// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package edw_etl_aditya.amazon_cannibalization_job_process_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: amazon_cannibalization_job_process Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class amazon_cannibalization_job_process implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (EDW_Database != null) {

				this.setProperty("EDW_Database", EDW_Database.toString());

			}

			if (EDW_Host != null) {

				this.setProperty("EDW_Host", EDW_Host.toString());

			}

			if (EDW_Password != null) {

				this.setProperty("EDW_Password", EDW_Password.toString());

			}

			if (EDW_Port != null) {

				this.setProperty("EDW_Port", EDW_Port.toString());

			}

			if (EDW_Schema != null) {

				this.setProperty("EDW_Schema", EDW_Schema.toString());

			}

			if (EDW_Username != null) {

				this.setProperty("EDW_Username", EDW_Username.toString());

			}

			if (SH_Database != null) {

				this.setProperty("SH_Database", SH_Database.toString());

			}

			if (SH_Password != null) {

				this.setProperty("SH_Password", SH_Password.toString());

			}

			if (SH_Port != null) {

				this.setProperty("SH_Port", SH_Port.toString());

			}

			if (SH_RR_Host != null) {

				this.setProperty("SH_RR_Host", SH_RR_Host.toString());

			}

			if (SH_Username != null) {

				this.setProperty("SH_Username", SH_Username.toString());

			}

		}

		public String EDW_Database;

		public String getEDW_Database() {
			return this.EDW_Database;
		}

		public String EDW_Host;

		public String getEDW_Host() {
			return this.EDW_Host;
		}

		public String EDW_Password;

		public String getEDW_Password() {
			return this.EDW_Password;
		}

		public String EDW_Port;

		public String getEDW_Port() {
			return this.EDW_Port;
		}

		public String EDW_Schema;

		public String getEDW_Schema() {
			return this.EDW_Schema;
		}

		public String EDW_Username;

		public String getEDW_Username() {
			return this.EDW_Username;
		}

		public String SH_Database;

		public String getSH_Database() {
			return this.SH_Database;
		}

		public String SH_Password;

		public String getSH_Password() {
			return this.SH_Password;
		}

		public String SH_Port;

		public String getSH_Port() {
			return this.SH_Port;
		}

		public String SH_RR_Host;

		public String getSH_RR_Host() {
			return this.SH_RR_Host;
		}

		public String SH_Username;

		public String getSH_Username() {
			return this.SH_Username;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "amazon_cannibalization_job_process";
	private final String projectName = "EDW_ETL_ADITYA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					amazon_cannibalization_job_process.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(amazon_cannibalization_job_process.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public Integer counts;

		public Integer getCounts() {
			return this.counts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.counts = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.counts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("counts=" + String.valueOf(counts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select count(1) as counts from edw_process_logs_impact where job_status = 'Running' and job_name = 'amazon_cannibalizat"
						+ "ion_job_process'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.counts = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.counts = rs_tDBInput_1.getInt(1);
							} else {
								row1.counts = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row1.id * 2;
						//
						// lowercase the name
						// output_row.name = row1.name.toLowerCase();

						globalMap.put("counts", row1.counts);

						System.out.println("count:" + globalMap.get("counts"));

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("counts")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tDBRow_4Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_4 begin ] start
				 */

				ok_Hash.put("tDBRow_4", false);
				start_Hash.put("tDBRow_4", System.currentTimeMillis());

				currentComponent = "tDBRow_4";

				int tos_count_tDBRow_4 = 0;

				java.sql.Connection conn_tDBRow_4 = null;
				String query_tDBRow_4 = "";
				boolean whetherReject_tDBRow_4 = false;
				conn_tDBRow_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
				java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4
						.createStatement();
				resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);

				/**
				 * [tDBRow_4 begin ] stop
				 */

				/**
				 * [tDBRow_4 main ] start
				 */

				currentComponent = "tDBRow_4";

				query_tDBRow_4 = "insert into edw_process_logs_impact (job_user, job_name, job_start, job_status) \nvalues ('"
						+ context.EDW_Username
						+ "','amazon_cannibalization_job_process',current_timestamp,'Running')";
				whetherReject_tDBRow_4 = false;
				globalMap.put("tDBRow_4_QUERY", query_tDBRow_4);
				try {
					stmt_tDBRow_4.execute(query_tDBRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_4 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_4) {

				}

				tos_count_tDBRow_4++;

				/**
				 * [tDBRow_4 main ] stop
				 */

				/**
				 * [tDBRow_4 process_data_begin ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_4 process_data_end ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_end ] stop
				 */

				/**
				 * [tDBRow_4 end ] start
				 */

				currentComponent = "tDBRow_4";

				stmt_tDBRow_4.close();
				resourceMap.remove("stmt_tDBRow_4");
				resourceMap.put("statementClosed_tDBRow_4", true);
				resourceMap.put("finish_tDBRow_4", true);

				ok_Hash.put("tDBRow_4", true);
				end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tDBRow_3Process(globalMap);

				/**
				 * [tDBRow_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_4 finally ] start
				 */

				currentComponent = "tDBRow_4";

				if (resourceMap.get("statementClosed_tDBRow_4") == null) {
					java.sql.Statement stmtToClose_tDBRow_4 = null;
					if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_4")) != null) {
						stmtToClose_tDBRow_4.close();
					}
				}

				/**
				 * [tDBRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				java.sql.Connection conn_tDBRow_3 = null;
				String query_tDBRow_3 = "";
				boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
				java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3
						.createStatement();
				resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				query_tDBRow_3 = "set @email_rank= 0,  @current_email = '', @add_rank = 0, @current_add  = ''";
				whetherReject_tDBRow_3 = false;
				globalMap.put("tDBRow_3_QUERY", query_tDBRow_3);
				try {
					stmt_tDBRow_3.execute(query_tDBRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_3) {

				}

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

				stmt_tDBRow_3.close();
				resourceMap.remove("stmt_tDBRow_3");
				resourceMap.put("statementClosed_tDBRow_3", true);
				resourceMap.put("finish_tDBRow_3", true);

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tDBRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

				if (resourceMap.get("statementClosed_tDBRow_3") == null) {
					java.sql.Statement stmtToClose_tDBRow_3 = null;
					if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_3")) != null) {
						stmtToClose_tDBRow_3.close();
					}
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public static class OUTPUTStruct implements
			routines.system.IPersistableRow<OUTPUTStruct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public Long customer_key;

		public Long getCustomer_key() {
			return this.customer_key;
		}

		public Long amazon_customer_key;

		public Long getAmazon_customer_key() {
			return this.amazon_customer_key;
		}

		public String order_name;

		public String getOrder_name() {
			return this.order_name;
		}

		public java.util.Date order_processed_at;

		public java.util.Date getOrder_processed_at() {
			return this.order_processed_at;
		}

		public String order_sales_channel;

		public String getOrder_sales_channel() {
			return this.order_sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecomm_customer;

		public String getIs_first_tj_ecomm_customer() {
			return this.is_first_tj_ecomm_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public java.util.Date edw_created_at;

		public java.util.Date getEdw_created_at() {
			return this.edw_created_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.customer_key = null;
					} else {
						this.customer_key = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.amazon_customer_key = null;
					} else {
						this.amazon_customer_key = dis.readLong();
					}

					this.order_name = readString(dis);

					this.order_processed_at = readDate(dis);

					this.order_sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecomm_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.edw_created_at = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.customer_key);
				}

				// Long

				if (this.amazon_customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.amazon_customer_key);
				}

				// String

				writeString(this.order_name, dos);

				// java.util.Date

				writeDate(this.order_processed_at, dos);

				// String

				writeString(this.order_sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecomm_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// java.util.Date

				writeDate(this.edw_created_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",amazon_customer_key="
					+ String.valueOf(amazon_customer_key));
			sb.append(",order_name=" + order_name);
			sb.append(",order_processed_at="
					+ String.valueOf(order_processed_at));
			sb.append(",order_sales_channel=" + order_sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecomm_customer="
					+ is_first_tj_ecomm_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",edw_created_at=" + String.valueOf(edw_created_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUTPUTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date processed_at;

		public java.util.Date getProcessed_at() {
			return this.processed_at;
		}

		public String sales_channel;

		public String getSales_channel() {
			return this.sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecom_customer;

		public String getIs_first_tj_ecom_customer() {
			return this.is_first_tj_ecom_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public String shipping_address_new;

		public String getShipping_address_new() {
			return this.shipping_address_new;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

					this.name = readString(dis);

					this.processed_at = readDate(dis);

					this.sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecom_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.shipping_address_new = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.processed_at, dos);

				// String

				writeString(this.sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecom_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// String

				writeString(this.shipping_address_new, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("email=" + email);
			sb.append(",name=" + name);
			sb.append(",processed_at=" + String.valueOf(processed_at));
			sb.append(",sales_channel=" + sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecom_customer=" + is_first_tj_ecom_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",shipping_address_new=" + shipping_address_new);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements
			routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date processed_at;

		public java.util.Date getProcessed_at() {
			return this.processed_at;
		}

		public String sales_channel;

		public String getSales_channel() {
			return this.sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecom_customer;

		public String getIs_first_tj_ecom_customer() {
			return this.is_first_tj_ecom_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public String shipping_address_new;

		public String getShipping_address_new() {
			return this.shipping_address_new;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

					this.name = readString(dis);

					this.processed_at = readDate(dis);

					this.sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecom_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.shipping_address_new = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.processed_at, dos);

				// String

				writeString(this.sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecom_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// String

				writeString(this.shipping_address_new, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("email=" + email);
			sb.append(",name=" + name);
			sb.append(",processed_at=" + String.valueOf(processed_at));
			sb.append(",sales_channel=" + sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecom_customer=" + is_first_tj_ecom_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",shipping_address_new=" + shipping_address_new);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_5Process(globalMap);
				tDBInput_8Process(globalMap);

				row2Struct row2 = new row2Struct();
				OUTPUTStruct OUTPUT = new OUTPUTStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("OUTPUT" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBOutput_3 = "fact_ecomm_amazon_cannibalization";
				String schemaForSearch_tDBOutput_3 = null;
				String tableForSearch_tDBOutput_3 = tableName_tDBOutput_3;
				if (dbschema_tDBOutput_3 != null
						&& dbschema_tDBOutput_3.trim().length() > 0) {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ tableName_tDBOutput_3;
				}

				schemaForSearch_tDBOutput_3 = dbschema_tDBOutput_3;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				long date_tDBOutput_3;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				class Util_tDBOutput_3 {

					int correctNumPerInsert(String source, int numPerInsert) {
						if (source == null) {
							return numPerInsert;
						}

						int columnCountEveryRow = 0;

						for (int i = 0; i < source.length(); i++) {
							if ('?' == source.charAt(i)) {
								columnCountEveryRow++;
							}
						}

						if (columnCountEveryRow == 0) {
							return numPerInsert;
						}

						int maxNumForParameterSize = 32767;
						int maxNumPerInsert = maxNumForParameterSize
								/ columnCountEveryRow;

						if (numPerInsert > maxNumPerInsert) {
							return maxNumPerInsert;
						}

						return numPerInsert;
					}

				}

				final Util_tDBOutput_3 util_tDBOutput_3 = new Util_tDBOutput_3();
				int numPerInsert_tDBOutput_3 = 100;
				int count_tDBOutput_3 = 0;

				int rsTruncCountNumber_tDBOutput_3 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_3 = stmtTruncCount_tDBOutput_3
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_3 + "\"")) {
						if (rsTruncCount_tDBOutput_3.next()) {
							rsTruncCountNumber_tDBOutput_3 = rsTruncCount_tDBOutput_3
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					stmtTrunc_tDBOutput_3.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_3 + "\"");
					deletedCount_tDBOutput_3 += rsTruncCountNumber_tDBOutput_3;
				}
				int rowCounttDBOutput_3 = 0;
				class BufferLine_tDBOutput_3 {
					Long customer_key;

					public BufferLine_tDBOutput_3 c0(Long customer_key) {
						this.customer_key = customer_key;
						return this;
					}

					Long amazon_customer_key;

					public BufferLine_tDBOutput_3 c1(Long amazon_customer_key) {
						this.amazon_customer_key = amazon_customer_key;
						return this;
					}

					String order_name;

					public BufferLine_tDBOutput_3 c2(String order_name) {
						this.order_name = order_name;
						return this;
					}

					java.util.Date order_processed_at;

					public BufferLine_tDBOutput_3 c3(
							java.util.Date order_processed_at) {
						this.order_processed_at = order_processed_at;
						return this;
					}

					String order_sales_channel;

					public BufferLine_tDBOutput_3 c4(String order_sales_channel) {
						this.order_sales_channel = order_sales_channel;
						return this;
					}

					Integer order_instance;

					public BufferLine_tDBOutput_3 c5(Integer order_instance) {
						this.order_instance = order_instance;
						return this;
					}

					String is_overall_first_order;

					public BufferLine_tDBOutput_3 c6(
							String is_overall_first_order) {
						this.is_overall_first_order = is_overall_first_order;
						return this;
					}

					String is_first_tj_ecomm_customer;

					public BufferLine_tDBOutput_3 c7(
							String is_first_tj_ecomm_customer) {
						this.is_first_tj_ecomm_customer = is_first_tj_ecomm_customer;
						return this;
					}

					String is_first_amazon_customer;

					public BufferLine_tDBOutput_3 c8(
							String is_first_amazon_customer) {
						this.is_first_amazon_customer = is_first_amazon_customer;
						return this;
					}

					java.util.Date edw_created_at;

					public BufferLine_tDBOutput_3 c9(
							java.util.Date edw_created_at) {
						this.edw_created_at = edw_created_at;
						return this;
					}
				}

				java.util.List<BufferLine_tDBOutput_3> exInsertColValueListtDBOutput_3 = new java.util.ArrayList();
				BufferLine_tDBOutput_3 exInsertColValuetDBOutput_3 = null;

				String valueList_tDBOutput_3 = "(?,?,?,?,?,?,?,?,?,?)";
				numPerInsert_tDBOutput_3 = util_tDBOutput_3
						.correctNumPerInsert(valueList_tDBOutput_3,
								numPerInsert_tDBOutput_3);

				StringBuilder extendInsertValueStmt_tDBOutput_3 = new StringBuilder();
				for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < numPerInsert_tDBOutput_3; i_tDBOutput_3++) {
					extendInsertValueStmt_tDBOutput_3
							.append(valueList_tDBOutput_3);
					if (i_tDBOutput_3 != numPerInsert_tDBOutput_3 - 1)
						extendInsertValueStmt_tDBOutput_3.append(",");
				}

				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"customer_key\",\"amazon_customer_key\",\"order_name\",\"order_processed_at\",\"order_sales_channel\",\"order_instance\",\"is_overall_first_order\",\"is_first_tj_ecomm_customer\",\"is_first_amazon_customer\",\"edw_created_at\") VALUES "
						+ extendInsertValueStmt_tDBOutput_3.toString();
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OUTPUTStruct OUTPUT_tmp = new OUTPUTStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT COALESCE(email,'Email not found in TJ') email, name, processed_at, \ncase when sales_channel in ('SHOPIFY','SOLID"
						+ "US') then 'TJ E-COMMERCE' else \nsales_channel end sales_channel, ROUND(email_rank,0) AS order_instance, \n case when emai"
						+ "l_rank=1 then 'Yes' else 'No' end is_overall_first_order,\n case when email_rank=1 and sales_channel='SHOPIFY' then 'Yes'"
						+ " else 'No' end is_first_tj_ecom_customer,\n case when email_rank=1 and sales_channel='AMAZON' then 'Yes' else 'No' end is"
						+ "_first_amazon_customer, shipping_address_new\n   FROM\n     (SELECT lower(email) as email, name , sales_effective_at proce"
						+ "ssed_at, sales_channel,\n     			@email_rank := IF(@current_email = email, @email_rank + 1, 1)  as email_rank,\n          "
						+ "        @current_email := email, shipping_address_new\n       FROM edw_staging.overall_orders\n       where name like 'SH%"
						+ "' or name like 'R%' or name like 'SO%'\n       and email is not null\n       ORDER BY email, sales_effective_at\n     ) ran"
						+ "ked where shipping_address_new is not null\n   order by ranked.email,ranked.email_rank;";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.email = null;
						} else {

							row2.email = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.name = null;
						} else {

							row2.name = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.processed_at = null;
						} else {

							if (rs_tDBInput_2.getString(3) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_2)) {
									row2.processed_at = rs_tDBInput_2
											.getTimestamp(3);
								} else {
									row2.processed_at = (java.util.Date) year0_tDBInput_2
											.clone();
								}
							} else {
								row2.processed_at = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.sales_channel = null;
						} else {

							row2.sales_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.order_instance = null;
						} else {

							if (rs_tDBInput_2.getObject(5) != null) {
								row2.order_instance = rs_tDBInput_2.getInt(5);
							} else {
								row2.order_instance = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.is_overall_first_order = null;
						} else {

							row2.is_overall_first_order = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.is_first_tj_ecom_customer = null;
						} else {

							row2.is_first_tj_ecom_customer = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.is_first_amazon_customer = null;
						} else {

							row2.is_first_amazon_customer = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.shipping_address_new = null;
						} else {

							row2.shipping_address_new = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 9, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.email = row2.email;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.email = '"
							// + row5HashKey.email + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row9"
						// /////////////////////////////////////////////

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row9HashKey.shipping_address = row2.shipping_address_new;

							row9HashKey.hashCodeDirty = true;

							tHash_Lookup_row9.lookup(row9HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.shipping_address = '"
							// + row9HashKey.shipping_address + "'");
						} // G 071

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							OUTPUT = null;

							// # Output table : 'OUTPUT'
							OUTPUT_tmp.customer_key = row5.customer_key;
							OUTPUT_tmp.amazon_customer_key = row9.amazon_customer_key;
							OUTPUT_tmp.order_name = row2.name;
							OUTPUT_tmp.order_processed_at = row2.processed_at;
							OUTPUT_tmp.order_sales_channel = row2.sales_channel;
							OUTPUT_tmp.order_instance = row2.order_instance;
							OUTPUT_tmp.is_overall_first_order = row2.is_overall_first_order;
							OUTPUT_tmp.is_first_tj_ecomm_customer = row2.is_first_tj_ecom_customer;
							OUTPUT_tmp.is_first_amazon_customer = row2.is_first_amazon_customer;
							OUTPUT_tmp.edw_created_at = TalendDate
									.getCurrentDate();
							OUTPUT = OUTPUT_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "OUTPUT"
						if (OUTPUT != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							// OUTPUT
							// OUTPUT

							if (execStat) {
								runStat.updateStatOnConnection("OUTPUT"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_3 = false;
							int countertDBOutput_3 = rowCounttDBOutput_3 * (10) + 1;

							if (OUTPUT.customer_key == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_3.setLong(countertDBOutput_3,
										OUTPUT.customer_key);

							}

							countertDBOutput_3++;

							if (OUTPUT.amazon_customer_key == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_3.setLong(countertDBOutput_3,
										OUTPUT.amazon_customer_key);

							}

							countertDBOutput_3++;

							if (OUTPUT.order_name == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_3.setString(countertDBOutput_3,
										OUTPUT.order_name);

							}

							countertDBOutput_3++;

							if (OUTPUT.order_processed_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_3 = OUTPUT.order_processed_at
										.getTime();
								if (date_tDBOutput_3 < year1_tDBOutput_3
										|| date_tDBOutput_3 >= year10000_tDBOutput_3) {
									pstmt_tDBOutput_3.setString(
											countertDBOutput_3,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_3.setTimestamp(
											countertDBOutput_3,
											new java.sql.Timestamp(
													date_tDBOutput_3));
								}
							} else {

								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.DATE);

							}

							countertDBOutput_3++;

							if (OUTPUT.order_sales_channel == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_3.setString(countertDBOutput_3,
										OUTPUT.order_sales_channel);

							}

							countertDBOutput_3++;

							if (OUTPUT.order_instance == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_3.setInt(countertDBOutput_3,
										OUTPUT.order_instance);

							}

							countertDBOutput_3++;

							if (OUTPUT.is_overall_first_order == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_3.setString(countertDBOutput_3,
										OUTPUT.is_overall_first_order);

							}

							countertDBOutput_3++;

							if (OUTPUT.is_first_tj_ecomm_customer == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_3.setString(countertDBOutput_3,
										OUTPUT.is_first_tj_ecomm_customer);

							}

							countertDBOutput_3++;

							if (OUTPUT.is_first_amazon_customer == null) {
								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_3.setString(countertDBOutput_3,
										OUTPUT.is_first_amazon_customer);

							}

							countertDBOutput_3++;

							if (OUTPUT.edw_created_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_3 = OUTPUT.edw_created_at
										.getTime();
								if (date_tDBOutput_3 < year1_tDBOutput_3
										|| date_tDBOutput_3 >= year10000_tDBOutput_3) {
									pstmt_tDBOutput_3.setString(
											countertDBOutput_3,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_3.setTimestamp(
											countertDBOutput_3,
											new java.sql.Timestamp(
													date_tDBOutput_3));
								}
							} else {

								pstmt_tDBOutput_3.setNull(countertDBOutput_3,
										java.sql.Types.DATE);

							}

							countertDBOutput_3++;

							exInsertColValuetDBOutput_3 = new BufferLine_tDBOutput_3();
							exInsertColValuetDBOutput_3

							.c0(OUTPUT.customer_key)
									.c1(OUTPUT.amazon_customer_key)
									.c2(OUTPUT.order_name)
									.c3(OUTPUT.order_processed_at)
									.c4(OUTPUT.order_sales_channel)
									.c5(OUTPUT.order_instance)
									.c6(OUTPUT.is_overall_first_order)
									.c7(OUTPUT.is_first_tj_ecomm_customer)
									.c8(OUTPUT.is_first_amazon_customer)
									.c9(OUTPUT.edw_created_at);

							exInsertColValueListtDBOutput_3
									.add(exInsertColValuetDBOutput_3);
							rowCounttDBOutput_3++;

							nb_line_tDBOutput_3++;

							if (rowCounttDBOutput_3 == numPerInsert_tDBOutput_3) {
								insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3
										+ pstmt_tDBOutput_3.executeUpdate();
								exInsertColValueListtDBOutput_3.clear();
								rowCounttDBOutput_3 = 0;
								countertDBOutput_3 = 1;
							}
							if (!whetherReject_tDBOutput_3) {
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "OUTPUT"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (rowCounttDBOutput_3 != 0) {

					StringBuilder extendInsertValue_tDBOutput_3 = new StringBuilder();
					for (int i_tDBOutput_3 = 0; i_tDBOutput_3 < rowCounttDBOutput_3; i_tDBOutput_3++) {
						extendInsertValue_tDBOutput_3
								.append("(?,?,?,?,?,?,?,?,?,?)");
						if (i_tDBOutput_3 != rowCounttDBOutput_3 - 1)
							extendInsertValue_tDBOutput_3.append(",");
					}

					insert_tDBOutput_3 = "INSERT INTO \""
							+ tableName_tDBOutput_3
							+ "\" (\"customer_key\",\"amazon_customer_key\",\"order_name\",\"order_processed_at\",\"order_sales_channel\",\"order_instance\",\"is_overall_first_order\",\"is_first_tj_ecomm_customer\",\"is_first_amazon_customer\",\"edw_created_at\") VALUES "
							+ extendInsertValue_tDBOutput_3.toString();
					pstmt_tDBOutput_3 = conn_tDBOutput_3
							.prepareStatement(insert_tDBOutput_3);
					rowCounttDBOutput_3 = 0;
					for (BufferLine_tDBOutput_3 bufferLtDBOutput_3 : exInsertColValueListtDBOutput_3) {
						int counttDBOutput_3 = rowCounttDBOutput_3 * (10) + 1;
						if (bufferLtDBOutput_3.customer_key == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_3.setLong(counttDBOutput_3,
									bufferLtDBOutput_3.customer_key);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.amazon_customer_key == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_3.setLong(counttDBOutput_3,
									bufferLtDBOutput_3.amazon_customer_key);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.order_name == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_3.setString(counttDBOutput_3,
									bufferLtDBOutput_3.order_name);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.order_processed_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_3 = bufferLtDBOutput_3.order_processed_at
									.getTime();
							if (date_tDBOutput_3 < year1_tDBOutput_3
									|| date_tDBOutput_3 >= year10000_tDBOutput_3) {
								pstmt_tDBOutput_3.setString(counttDBOutput_3,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_3
										.setTimestamp(counttDBOutput_3,
												new java.sql.Timestamp(
														date_tDBOutput_3));
							}
						} else {

							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.DATE);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.order_sales_channel == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_3.setString(counttDBOutput_3,
									bufferLtDBOutput_3.order_sales_channel);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.order_instance == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_3.setInt(counttDBOutput_3,
									bufferLtDBOutput_3.order_instance);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.is_overall_first_order == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_3.setString(counttDBOutput_3,
									bufferLtDBOutput_3.is_overall_first_order);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.is_first_tj_ecomm_customer == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_3
									.setString(
											counttDBOutput_3,
											bufferLtDBOutput_3.is_first_tj_ecomm_customer);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.is_first_amazon_customer == null) {
							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_3
									.setString(
											counttDBOutput_3,
											bufferLtDBOutput_3.is_first_amazon_customer);

						}

						counttDBOutput_3++;

						if (bufferLtDBOutput_3.edw_created_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_3 = bufferLtDBOutput_3.edw_created_at
									.getTime();
							if (date_tDBOutput_3 < year1_tDBOutput_3
									|| date_tDBOutput_3 >= year10000_tDBOutput_3) {
								pstmt_tDBOutput_3.setString(counttDBOutput_3,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_3
										.setTimestamp(counttDBOutput_3,
												new java.sql.Timestamp(
														date_tDBOutput_3));
							}
						} else {

							pstmt_tDBOutput_3.setNull(counttDBOutput_3,
									java.sql.Types.DATE);

						}

						counttDBOutput_3++;

						rowCounttDBOutput_3++;
					}
					insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3
							+ pstmt_tDBOutput_3.executeUpdate();
				}

				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("OUTPUT" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row9");

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class OUTPUTTStruct implements
			routines.system.IPersistableRow<OUTPUTTStruct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public Long customer_key;

		public Long getCustomer_key() {
			return this.customer_key;
		}

		public Long amazon_customer_key;

		public Long getAmazon_customer_key() {
			return this.amazon_customer_key;
		}

		public String order_name;

		public String getOrder_name() {
			return this.order_name;
		}

		public java.util.Date order_processed_at;

		public java.util.Date getOrder_processed_at() {
			return this.order_processed_at;
		}

		public String order_sales_channel;

		public String getOrder_sales_channel() {
			return this.order_sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecomm_customer;

		public String getIs_first_tj_ecomm_customer() {
			return this.is_first_tj_ecomm_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public java.util.Date edw_created_at;

		public java.util.Date getEdw_created_at() {
			return this.edw_created_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.customer_key = null;
					} else {
						this.customer_key = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.amazon_customer_key = null;
					} else {
						this.amazon_customer_key = dis.readLong();
					}

					this.order_name = readString(dis);

					this.order_processed_at = readDate(dis);

					this.order_sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecomm_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.edw_created_at = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.customer_key);
				}

				// Long

				if (this.amazon_customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.amazon_customer_key);
				}

				// String

				writeString(this.order_name, dos);

				// java.util.Date

				writeDate(this.order_processed_at, dos);

				// String

				writeString(this.order_sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecomm_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// java.util.Date

				writeDate(this.edw_created_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",amazon_customer_key="
					+ String.valueOf(amazon_customer_key));
			sb.append(",order_name=" + order_name);
			sb.append(",order_processed_at="
					+ String.valueOf(order_processed_at));
			sb.append(",order_sales_channel=" + order_sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecomm_customer="
					+ is_first_tj_ecomm_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",edw_created_at=" + String.valueOf(edw_created_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUTPUTTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date processed_at;

		public java.util.Date getProcessed_at() {
			return this.processed_at;
		}

		public String sales_channel;

		public String getSales_channel() {
			return this.sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecom_customer;

		public String getIs_first_tj_ecom_customer() {
			return this.is_first_tj_ecom_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public String shipping_address_new;

		public String getShipping_address_new() {
			return this.shipping_address_new;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

					this.name = readString(dis);

					this.processed_at = readDate(dis);

					this.sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecom_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.shipping_address_new = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.processed_at, dos);

				// String

				writeString(this.sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecom_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// String

				writeString(this.shipping_address_new, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("email=" + email);
			sb.append(",name=" + name);
			sb.append(",processed_at=" + String.valueOf(processed_at));
			sb.append(",sales_channel=" + sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecom_customer=" + is_first_tj_ecom_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",shipping_address_new=" + shipping_address_new);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements
			routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public java.util.Date processed_at;

		public java.util.Date getProcessed_at() {
			return this.processed_at;
		}

		public String sales_channel;

		public String getSales_channel() {
			return this.sales_channel;
		}

		public Integer order_instance;

		public Integer getOrder_instance() {
			return this.order_instance;
		}

		public String is_overall_first_order;

		public String getIs_overall_first_order() {
			return this.is_overall_first_order;
		}

		public String is_first_tj_ecom_customer;

		public String getIs_first_tj_ecom_customer() {
			return this.is_first_tj_ecom_customer;
		}

		public String is_first_amazon_customer;

		public String getIs_first_amazon_customer() {
			return this.is_first_amazon_customer;
		}

		public String shipping_address_new;

		public String getShipping_address_new() {
			return this.shipping_address_new;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

					this.name = readString(dis);

					this.processed_at = readDate(dis);

					this.sales_channel = readString(dis);

					this.order_instance = readInteger(dis);

					this.is_overall_first_order = readString(dis);

					this.is_first_tj_ecom_customer = readString(dis);

					this.is_first_amazon_customer = readString(dis);

					this.shipping_address_new = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

				// String

				writeString(this.name, dos);

				// java.util.Date

				writeDate(this.processed_at, dos);

				// String

				writeString(this.sales_channel, dos);

				// Integer

				writeInteger(this.order_instance, dos);

				// String

				writeString(this.is_overall_first_order, dos);

				// String

				writeString(this.is_first_tj_ecom_customer, dos);

				// String

				writeString(this.is_first_amazon_customer, dos);

				// String

				writeString(this.shipping_address_new, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("email=" + email);
			sb.append(",name=" + name);
			sb.append(",processed_at=" + String.valueOf(processed_at));
			sb.append(",sales_channel=" + sales_channel);
			sb.append(",order_instance=" + String.valueOf(order_instance));
			sb.append(",is_overall_first_order=" + is_overall_first_order);
			sb.append(",is_first_tj_ecom_customer=" + is_first_tj_ecom_customer);
			sb.append(",is_first_amazon_customer=" + is_first_amazon_customer);
			sb.append(",shipping_address_new=" + shipping_address_new);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_6Process(globalMap);
				tDBInput_9Process(globalMap);

				row3Struct row3 = new row3Struct();
				OUTPUTTStruct OUTPUTT = new OUTPUTTStruct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("OUTPUTT" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBOutput_5 = "fact_ecomm_amazon_cannibalization";
				String schemaForSearch_tDBOutput_5 = null;
				String tableForSearch_tDBOutput_5 = tableName_tDBOutput_5;
				if (dbschema_tDBOutput_5 != null
						&& dbschema_tDBOutput_5.trim().length() > 0) {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\""
							+ tableName_tDBOutput_5;
				}

				schemaForSearch_tDBOutput_5 = dbschema_tDBOutput_5;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				long date_tDBOutput_5;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				conn_tDBOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				class Util_tDBOutput_5 {

					int correctNumPerInsert(String source, int numPerInsert) {
						if (source == null) {
							return numPerInsert;
						}

						int columnCountEveryRow = 0;

						for (int i = 0; i < source.length(); i++) {
							if ('?' == source.charAt(i)) {
								columnCountEveryRow++;
							}
						}

						if (columnCountEveryRow == 0) {
							return numPerInsert;
						}

						int maxNumForParameterSize = 32767;
						int maxNumPerInsert = maxNumForParameterSize
								/ columnCountEveryRow;

						if (numPerInsert > maxNumPerInsert) {
							return maxNumPerInsert;
						}

						return numPerInsert;
					}

				}

				final Util_tDBOutput_5 util_tDBOutput_5 = new Util_tDBOutput_5();
				int numPerInsert_tDBOutput_5 = 100;
				int count_tDBOutput_5 = 0;

				int rowCounttDBOutput_5 = 0;
				class BufferLine_tDBOutput_5 {
					Long customer_key;

					public BufferLine_tDBOutput_5 c0(Long customer_key) {
						this.customer_key = customer_key;
						return this;
					}

					Long amazon_customer_key;

					public BufferLine_tDBOutput_5 c1(Long amazon_customer_key) {
						this.amazon_customer_key = amazon_customer_key;
						return this;
					}

					String order_name;

					public BufferLine_tDBOutput_5 c2(String order_name) {
						this.order_name = order_name;
						return this;
					}

					java.util.Date order_processed_at;

					public BufferLine_tDBOutput_5 c3(
							java.util.Date order_processed_at) {
						this.order_processed_at = order_processed_at;
						return this;
					}

					String order_sales_channel;

					public BufferLine_tDBOutput_5 c4(String order_sales_channel) {
						this.order_sales_channel = order_sales_channel;
						return this;
					}

					Integer order_instance;

					public BufferLine_tDBOutput_5 c5(Integer order_instance) {
						this.order_instance = order_instance;
						return this;
					}

					String is_overall_first_order;

					public BufferLine_tDBOutput_5 c6(
							String is_overall_first_order) {
						this.is_overall_first_order = is_overall_first_order;
						return this;
					}

					String is_first_tj_ecomm_customer;

					public BufferLine_tDBOutput_5 c7(
							String is_first_tj_ecomm_customer) {
						this.is_first_tj_ecomm_customer = is_first_tj_ecomm_customer;
						return this;
					}

					String is_first_amazon_customer;

					public BufferLine_tDBOutput_5 c8(
							String is_first_amazon_customer) {
						this.is_first_amazon_customer = is_first_amazon_customer;
						return this;
					}

					java.util.Date edw_created_at;

					public BufferLine_tDBOutput_5 c9(
							java.util.Date edw_created_at) {
						this.edw_created_at = edw_created_at;
						return this;
					}
				}

				java.util.List<BufferLine_tDBOutput_5> exInsertColValueListtDBOutput_5 = new java.util.ArrayList();
				BufferLine_tDBOutput_5 exInsertColValuetDBOutput_5 = null;

				String valueList_tDBOutput_5 = "(?,?,?,?,?,?,?,?,?,?)";
				numPerInsert_tDBOutput_5 = util_tDBOutput_5
						.correctNumPerInsert(valueList_tDBOutput_5,
								numPerInsert_tDBOutput_5);

				StringBuilder extendInsertValueStmt_tDBOutput_5 = new StringBuilder();
				for (int i_tDBOutput_5 = 0; i_tDBOutput_5 < numPerInsert_tDBOutput_5; i_tDBOutput_5++) {
					extendInsertValueStmt_tDBOutput_5
							.append(valueList_tDBOutput_5);
					if (i_tDBOutput_5 != numPerInsert_tDBOutput_5 - 1)
						extendInsertValueStmt_tDBOutput_5.append(",");
				}

				String insert_tDBOutput_5 = "INSERT INTO \""
						+ tableName_tDBOutput_5
						+ "\" (\"customer_key\",\"amazon_customer_key\",\"order_name\",\"order_processed_at\",\"order_sales_channel\",\"order_instance\",\"is_overall_first_order\",\"is_first_tj_ecomm_customer\",\"is_first_amazon_customer\",\"edw_created_at\") VALUES "
						+ extendInsertValueStmt_tDBOutput_5.toString();
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OUTPUTTStruct OUTPUTT_tmp = new OUTPUTTStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT COALESCE(email,'Email not found in TJ') email, name, processed_at, \ncase when sales_channel in ('SHOPIFY','SOLID"
						+ "US') then 'TJ E-COMMERCE' else \nsales_channel end sales_channel, ROUND(add_rank,0) AS order_instance, \n case when add_ra"
						+ "nk=1 then 'Yes' else 'No' end is_overall_first_order,\n case when add_rank=1 and sales_channel='SHOPIFY' then 'Yes' else "
						+ "'No' end is_first_tj_ecom_customer,\n case when add_rank=1 and sales_channel='AMAZON' then 'Yes' else 'No' end is_first_a"
						+ "mazon_customer,\nshipping_address_new\n   FROM\n     (SELECT lower(email) as email, name , sales_effective_at processed_at,"
						+ " sales_channel,  shipping_address_new,   \n     			@add_rank := IF(@current_add = shipping_address_new, @add_rank + 1, 1)"
						+ " as add_rank,\n                  @current_add := shipping_address_new\n       FROM edw_staging.overall_orders\n       where"
						+ " name like 'SO%'\n       and email is null\n       ORDER BY shipping_address_new, sales_effective_at\n  ) ranked where ship"
						+ "ping_address_new is not null\n   order by ranked.shipping_address_new,ranked.add_rank;";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.email = null;
						} else {

							row3.email = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.name = null;
						} else {

							row3.name = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.processed_at = null;
						} else {

							if (rs_tDBInput_3.getString(3) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_3)) {
									row3.processed_at = rs_tDBInput_3
											.getTimestamp(3);
								} else {
									row3.processed_at = (java.util.Date) year0_tDBInput_3
											.clone();
								}
							} else {
								row3.processed_at = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.sales_channel = null;
						} else {

							row3.sales_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.order_instance = null;
						} else {

							if (rs_tDBInput_3.getObject(5) != null) {
								row3.order_instance = rs_tDBInput_3.getInt(5);
							} else {
								row3.order_instance = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.is_overall_first_order = null;
						} else {

							row3.is_overall_first_order = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.is_first_tj_ecom_customer = null;
						} else {

							row3.is_first_tj_ecom_customer = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.is_first_amazon_customer = null;
						} else {

							row3.is_first_amazon_customer = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 8, false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.shipping_address_new = null;
						} else {

							row3.shipping_address_new = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 9, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row6HashKey.email = row3.email;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.email = '"
							// + row6HashKey.email + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row10HashKey.shipping_address = row3.shipping_address_new;

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.shipping_address = '"
							// + row10HashKey.shipping_address + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							OUTPUTT = null;

							// # Output table : 'OUTPUTT'
							OUTPUTT_tmp.customer_key = row6.customer_key;
							OUTPUTT_tmp.amazon_customer_key = row10.amazon_customer_key;
							OUTPUTT_tmp.order_name = row3.name;
							OUTPUTT_tmp.order_processed_at = row3.processed_at;
							OUTPUTT_tmp.order_sales_channel = row3.sales_channel;
							OUTPUTT_tmp.order_instance = row3.order_instance;
							OUTPUTT_tmp.is_overall_first_order = row3.is_overall_first_order;
							OUTPUTT_tmp.is_first_tj_ecomm_customer = row3.is_first_tj_ecom_customer;
							OUTPUTT_tmp.is_first_amazon_customer = row3.is_first_amazon_customer;
							OUTPUTT_tmp.edw_created_at = TalendDate
									.getCurrentDate();
							OUTPUTT = OUTPUTT_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
						// Start of branch "OUTPUTT"
						if (OUTPUTT != null) {

							/**
							 * [tDBOutput_5 main ] start
							 */

							currentComponent = "tDBOutput_5";

							// OUTPUTT
							// OUTPUTT

							if (execStat) {
								runStat.updateStatOnConnection("OUTPUTT"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_5 = false;
							int countertDBOutput_5 = rowCounttDBOutput_5 * (10) + 1;

							if (OUTPUTT.customer_key == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_5.setLong(countertDBOutput_5,
										OUTPUTT.customer_key);

							}

							countertDBOutput_5++;

							if (OUTPUTT.amazon_customer_key == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_5.setLong(countertDBOutput_5,
										OUTPUTT.amazon_customer_key);

							}

							countertDBOutput_5++;

							if (OUTPUTT.order_name == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_5.setString(countertDBOutput_5,
										OUTPUTT.order_name);

							}

							countertDBOutput_5++;

							if (OUTPUTT.order_processed_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_5 = OUTPUTT.order_processed_at
										.getTime();
								if (date_tDBOutput_5 < year1_tDBOutput_5
										|| date_tDBOutput_5 >= year10000_tDBOutput_5) {
									pstmt_tDBOutput_5.setString(
											countertDBOutput_5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_5.setTimestamp(
											countertDBOutput_5,
											new java.sql.Timestamp(
													date_tDBOutput_5));
								}
							} else {

								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.DATE);

							}

							countertDBOutput_5++;

							if (OUTPUTT.order_sales_channel == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_5.setString(countertDBOutput_5,
										OUTPUTT.order_sales_channel);

							}

							countertDBOutput_5++;

							if (OUTPUTT.order_instance == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_5.setInt(countertDBOutput_5,
										OUTPUTT.order_instance);

							}

							countertDBOutput_5++;

							if (OUTPUTT.is_overall_first_order == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_5.setString(countertDBOutput_5,
										OUTPUTT.is_overall_first_order);

							}

							countertDBOutput_5++;

							if (OUTPUTT.is_first_tj_ecomm_customer == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_5.setString(countertDBOutput_5,
										OUTPUTT.is_first_tj_ecomm_customer);

							}

							countertDBOutput_5++;

							if (OUTPUTT.is_first_amazon_customer == null) {
								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_5.setString(countertDBOutput_5,
										OUTPUTT.is_first_amazon_customer);

							}

							countertDBOutput_5++;

							if (OUTPUTT.edw_created_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_5 = OUTPUTT.edw_created_at
										.getTime();
								if (date_tDBOutput_5 < year1_tDBOutput_5
										|| date_tDBOutput_5 >= year10000_tDBOutput_5) {
									pstmt_tDBOutput_5.setString(
											countertDBOutput_5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_5.setTimestamp(
											countertDBOutput_5,
											new java.sql.Timestamp(
													date_tDBOutput_5));
								}
							} else {

								pstmt_tDBOutput_5.setNull(countertDBOutput_5,
										java.sql.Types.DATE);

							}

							countertDBOutput_5++;

							exInsertColValuetDBOutput_5 = new BufferLine_tDBOutput_5();
							exInsertColValuetDBOutput_5

							.c0(OUTPUTT.customer_key)
									.c1(OUTPUTT.amazon_customer_key)
									.c2(OUTPUTT.order_name)
									.c3(OUTPUTT.order_processed_at)
									.c4(OUTPUTT.order_sales_channel)
									.c5(OUTPUTT.order_instance)
									.c6(OUTPUTT.is_overall_first_order)
									.c7(OUTPUTT.is_first_tj_ecomm_customer)
									.c8(OUTPUTT.is_first_amazon_customer)
									.c9(OUTPUTT.edw_created_at);

							exInsertColValueListtDBOutput_5
									.add(exInsertColValuetDBOutput_5);
							rowCounttDBOutput_5++;

							nb_line_tDBOutput_5++;

							if (rowCounttDBOutput_5 == numPerInsert_tDBOutput_5) {
								insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5
										+ pstmt_tDBOutput_5.executeUpdate();
								exInsertColValueListtDBOutput_5.clear();
								rowCounttDBOutput_5 = 0;
								countertDBOutput_5 = 1;
							}
							if (!whetherReject_tDBOutput_5) {
							}

							tos_count_tDBOutput_5++;

							/**
							 * [tDBOutput_5 main ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_end ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_end ] stop
							 */

						} // End of branch "OUTPUTT"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (rowCounttDBOutput_5 != 0) {

					StringBuilder extendInsertValue_tDBOutput_5 = new StringBuilder();
					for (int i_tDBOutput_5 = 0; i_tDBOutput_5 < rowCounttDBOutput_5; i_tDBOutput_5++) {
						extendInsertValue_tDBOutput_5
								.append("(?,?,?,?,?,?,?,?,?,?)");
						if (i_tDBOutput_5 != rowCounttDBOutput_5 - 1)
							extendInsertValue_tDBOutput_5.append(",");
					}

					insert_tDBOutput_5 = "INSERT INTO \""
							+ tableName_tDBOutput_5
							+ "\" (\"customer_key\",\"amazon_customer_key\",\"order_name\",\"order_processed_at\",\"order_sales_channel\",\"order_instance\",\"is_overall_first_order\",\"is_first_tj_ecomm_customer\",\"is_first_amazon_customer\",\"edw_created_at\") VALUES "
							+ extendInsertValue_tDBOutput_5.toString();
					pstmt_tDBOutput_5 = conn_tDBOutput_5
							.prepareStatement(insert_tDBOutput_5);
					rowCounttDBOutput_5 = 0;
					for (BufferLine_tDBOutput_5 bufferLtDBOutput_5 : exInsertColValueListtDBOutput_5) {
						int counttDBOutput_5 = rowCounttDBOutput_5 * (10) + 1;
						if (bufferLtDBOutput_5.customer_key == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_5.setLong(counttDBOutput_5,
									bufferLtDBOutput_5.customer_key);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.amazon_customer_key == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_5.setLong(counttDBOutput_5,
									bufferLtDBOutput_5.amazon_customer_key);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.order_name == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_5.setString(counttDBOutput_5,
									bufferLtDBOutput_5.order_name);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.order_processed_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_5 = bufferLtDBOutput_5.order_processed_at
									.getTime();
							if (date_tDBOutput_5 < year1_tDBOutput_5
									|| date_tDBOutput_5 >= year10000_tDBOutput_5) {
								pstmt_tDBOutput_5.setString(counttDBOutput_5,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_5
										.setTimestamp(counttDBOutput_5,
												new java.sql.Timestamp(
														date_tDBOutput_5));
							}
						} else {

							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.DATE);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.order_sales_channel == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_5.setString(counttDBOutput_5,
									bufferLtDBOutput_5.order_sales_channel);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.order_instance == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_5.setInt(counttDBOutput_5,
									bufferLtDBOutput_5.order_instance);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.is_overall_first_order == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_5.setString(counttDBOutput_5,
									bufferLtDBOutput_5.is_overall_first_order);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.is_first_tj_ecomm_customer == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_5
									.setString(
											counttDBOutput_5,
											bufferLtDBOutput_5.is_first_tj_ecomm_customer);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.is_first_amazon_customer == null) {
							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_5
									.setString(
											counttDBOutput_5,
											bufferLtDBOutput_5.is_first_amazon_customer);

						}

						counttDBOutput_5++;

						if (bufferLtDBOutput_5.edw_created_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_5 = bufferLtDBOutput_5.edw_created_at
									.getTime();
							if (date_tDBOutput_5 < year1_tDBOutput_5
									|| date_tDBOutput_5 >= year10000_tDBOutput_5) {
								pstmt_tDBOutput_5.setString(counttDBOutput_5,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_5
										.setTimestamp(counttDBOutput_5,
												new java.sql.Timestamp(
														date_tDBOutput_5));
							}
						} else {

							pstmt_tDBOutput_5.setNull(counttDBOutput_5,
									java.sql.Types.DATE);

						}

						counttDBOutput_5++;

						rowCounttDBOutput_5++;
					}
					insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5
							+ pstmt_tDBOutput_5.executeUpdate();
				}

				if (pstmt_tDBOutput_5 != null) {
					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("OUTPUTT" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBRow_5Process(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_5 begin ] start
				 */

				ok_Hash.put("tDBRow_5", false);
				start_Hash.put("tDBRow_5", System.currentTimeMillis());

				currentComponent = "tDBRow_5";

				int tos_count_tDBRow_5 = 0;

				java.sql.Connection conn_tDBRow_5 = null;
				String query_tDBRow_5 = "";
				boolean whetherReject_tDBRow_5 = false;
				conn_tDBRow_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_5", conn_tDBRow_5);
				java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5
						.createStatement();
				resourceMap.put("stmt_tDBRow_5", stmt_tDBRow_5);

				/**
				 * [tDBRow_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 main ] start
				 */

				currentComponent = "tDBRow_5";

				query_tDBRow_5 = "update edw_process_logs_impact\nset job_status = 'Completed',\njob_end = CURRENT_TIMESTAMP\nwhere job_name = 'amazon_canni"
						+ "balization_job_process'\nand job_status = 'Running';";
				whetherReject_tDBRow_5 = false;
				globalMap.put("tDBRow_5_QUERY", query_tDBRow_5);
				try {
					stmt_tDBRow_5.execute(query_tDBRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_5 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tDBRow_5++;

				/**
				 * [tDBRow_5 main ] stop
				 */

				/**
				 * [tDBRow_5 process_data_begin ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_5 process_data_end ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_end ] stop
				 */

				/**
				 * [tDBRow_5 end ] start
				 */

				currentComponent = "tDBRow_5";

				stmt_tDBRow_5.close();
				resourceMap.remove("stmt_tDBRow_5");
				resourceMap.put("statementClosed_tDBRow_5", true);
				resourceMap.put("finish_tDBRow_5", true);

				ok_Hash.put("tDBRow_5", true);
				end_Hash.put("tDBRow_5", System.currentTimeMillis());

				/**
				 * [tDBRow_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_5 finally ] start
				 */

				currentComponent = "tDBRow_5";

				if (resourceMap.get("statementClosed_tDBRow_5") == null) {
					java.sql.Statement stmtToClose_tDBRow_5 = null;
					if ((stmtToClose_tDBRow_5 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_5")) != null) {
						stmtToClose_tDBRow_5.close();
					}
				}

				/**
				 * [tDBRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long customer_key;

		public Long getCustomer_key() {
			return this.customer_key;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.email == null) ? 0 : this.email.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.email == null) {
				if (other.email != null)
					return false;

			} else if (!this.email.equals(other.email))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.customer_key = this.customer_key;
			other.email = this.email;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.email = this.email;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.customer_key = null;
				} else {
					this.customer_key = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.customer_key);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",email=" + email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.email, other.email);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_5 - inputs:(after_tDBInput_2)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row2,row5,row9)
				// outputs:(OUTPUT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "select customer_key,email from tj_dwh_prod.dim_customers where is_shopify_customer = 1 or is_solidus_customer = 1 ";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.customer_key = null;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row5.customer_key = rs_tDBInput_5.getLong(1);
							} else {
								row5.customer_key = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.email = null;
						} else {

							row5.email = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 2, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.customer_key = row5.customer_key;

						row5_HashRow.email = row5.email;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long customer_key;

		public Long getCustomer_key() {
			return this.customer_key;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.email == null) ? 0 : this.email.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.email == null) {
				if (other.email != null)
					return false;

			} else if (!this.email.equals(other.email))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.customer_key = this.customer_key;
			other.email = this.email;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.email = this.email;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.customer_key = null;
				} else {
					this.customer_key = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.customer_key);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_key=" + String.valueOf(customer_key));
			sb.append(",email=" + email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.email, other.email);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tDBInput_6 - inputs:(after_tDBInput_3)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 -
				// inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(row3,row6,row10)
				// outputs:(OUTPUTT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "select customer_key,email from tj_dwh_prod.dim_customers where is_shopify_customer = 1 or is_solidus_customer = 1 ";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.customer_key = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row6.customer_key = rs_tDBInput_6.getLong(1);
							} else {
								row6.customer_key = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.email = null;
						} else {

							row6.email = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 2, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.customer_key = row6.customer_key;

						row6_HashRow.email = row6.email;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long amazon_customer_key;

		public Long getAmazon_customer_key() {
			return this.amazon_customer_key;
		}

		public String shipping_address;

		public String getShipping_address() {
			return this.shipping_address;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.shipping_address == null) ? 0
								: this.shipping_address.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.shipping_address == null) {
				if (other.shipping_address != null)
					return false;

			} else if (!this.shipping_address.equals(other.shipping_address))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.amazon_customer_key = this.amazon_customer_key;
			other.shipping_address = this.shipping_address;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.shipping_address = this.shipping_address;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.shipping_address = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.shipping_address, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.amazon_customer_key = null;
				} else {
					this.amazon_customer_key = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.amazon_customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.amazon_customer_key);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("amazon_customer_key="
					+ String.valueOf(amazon_customer_key));
			sb.append(",shipping_address=" + shipping_address);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.shipping_address,
					other.shipping_address);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tDBInput_8 - inputs:(after_tDBInput_2)
				// outputs:(row9,row9) | target node:tAdvancedHash_row9 -
				// inputs:(row9) outputs:()
				// linked node: tMap_1 - inputs:(row2,row5,row9)
				// outputs:(OUTPUT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();

				String dbquery_tDBInput_8 = "select amazon_customer_key, shipping_address from public.dim_amazon_customers";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row9.amazon_customer_key = null;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row9.amazon_customer_key = rs_tDBInput_8
										.getLong(1);
							} else {
								row9.amazon_customer_key = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row9.shipping_address = null;
						} else {

							row9.shipping_address = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 2, false);
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 main ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						row9Struct row9_HashRow = new row9Struct();

						row9_HashRow.amazon_customer_key = row9.amazon_customer_key;

						row9_HashRow.shipping_address = row9.shipping_address;

						tHash_Lookup_row9.put(row9_HashRow);

						tos_count_tAdvancedHash_row9++;

						/**
						 * [tAdvancedHash_row9 main ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long amazon_customer_key;

		public Long getAmazon_customer_key() {
			return this.amazon_customer_key;
		}

		public String shipping_address;

		public String getShipping_address() {
			return this.shipping_address;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.shipping_address == null) ? 0
								: this.shipping_address.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.shipping_address == null) {
				if (other.shipping_address != null)
					return false;

			} else if (!this.shipping_address.equals(other.shipping_address))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.amazon_customer_key = this.amazon_customer_key;
			other.shipping_address = this.shipping_address;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.shipping_address = this.shipping_address;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.shipping_address = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.shipping_address, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.amazon_customer_key = null;
				} else {
					this.amazon_customer_key = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.amazon_customer_key == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.amazon_customer_key);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("amazon_customer_key="
					+ String.valueOf(amazon_customer_key));
			sb.append(",shipping_address=" + shipping_address);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.shipping_address,
					other.shipping_address);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tDBInput_9 - inputs:(after_tDBInput_3)
				// outputs:(row10,row10) | target node:tAdvancedHash_row10 -
				// inputs:(row10) outputs:()
				// linked node: tMap_2 - inputs:(row3,row6,row10)
				// outputs:(OUTPUTT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();

				String dbquery_tDBInput_9 = "select amazon_customer_key, shipping_address from public.dim_amazon_customers";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row10.amazon_customer_key = null;
						} else {

							if (rs_tDBInput_9.getObject(1) != null) {
								row10.amazon_customer_key = rs_tDBInput_9
										.getLong(1);
							} else {
								row10.amazon_customer_key = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row10.shipping_address = null;
						} else {

							row10.shipping_address = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 2, false);
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.amazon_customer_key = row10.amazon_customer_key;

						row10_HashRow.shipping_address = row10.shipping_address;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_amazon_cannibalization_job_process,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_amazon_cannibalization_job_process) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row4.type = lcm.getType();
						row4.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row4.priority = lcm.getPriority();
						row4.message = lcm.getMessage();
						row4.code = lcm.getCode();

						row4.moment = java.util.Calendar.getInstance()
								.getTime();

						row4.pid = pid;
						row4.root_pid = rootPid;
						row4.father_pid = fatherPid;

						row4.project = projectName;
						row4.job = jobName;
						row4.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema

						globalMap.put("pid", row4.pid);

						globalMap.put("message", row4.message);

						globalMap.put("code", row4.code);

						System.out.println("pid:" + globalMap.get("pid"));

						System.out.println("message:"
								+ globalMap.get("message"));

						System.out.println("code:" + globalMap.get("code"));

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(
							String.format(
									"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				java.sql.Connection conn_tDBRow_2 = null;
				String query_tDBRow_2 = "";
				boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
				java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2
						.createStatement();
				resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				query_tDBRow_2 = "update edw_process_logs_impact\nset job_status = 'Failed', job_end = CURRENT_TIMESTAMP\nwhere job_name = 'amazon_cannibal"
						+ "ization_job_process'\nand job_status = 'Running';";
				whetherReject_tDBRow_2 = false;
				globalMap.put("tDBRow_2_QUERY", query_tDBRow_2);
				try {
					stmt_tDBRow_2.execute(query_tDBRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_2 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

				stmt_tDBRow_2.close();
				resourceMap.remove("stmt_tDBRow_2");
				resourceMap.put("statementClosed_tDBRow_2", true);
				resourceMap.put("finish_tDBRow_2", true);

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				/**
				 * [tDBRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

				if (resourceMap.get("statementClosed_tDBRow_2") == null) {
					java.sql.Statement stmtToClose_tDBRow_2 = null;
					if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_2")) != null) {
						stmtToClose_tDBRow_2.close();
					}
				}

				/**
				 * [tDBRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tDBClose_2Process(globalMap);

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_2 begin ] start
				 */

				ok_Hash.put("tDBClose_2", false);
				start_Hash.put("tDBClose_2", System.currentTimeMillis());

				currentComponent = "tDBClose_2";

				int tos_count_tDBClose_2 = 0;

				/**
				 * [tDBClose_2 begin ] stop
				 */

				/**
				 * [tDBClose_2 main ] start
				 */

				currentComponent = "tDBClose_2";

				java.sql.Connection conn_tDBClose_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed()) {
					conn_tDBClose_2.close();
				}

				if (null != java.sql.DriverManager.getLogWriter()) {
					java.sql.DriverManager.getLogWriter().close();
				}

				java.io.PrintWriter logWriter_tDBClose_2 = (java.io.PrintWriter) globalMap
						.get("logWriter_tDBConnection_2");
				if (logWriter_tDBClose_2 != null) {
					logWriter_tDBClose_2.close();
				}

				tos_count_tDBClose_2++;

				/**
				 * [tDBClose_2 main ] stop
				 */

				/**
				 * [tDBClose_2 process_data_begin ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_2 process_data_end ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_end ] stop
				 */

				/**
				 * [tDBClose_2 end ] start
				 */

				currentComponent = "tDBClose_2";

				ok_Hash.put("tDBClose_2", true);
				end_Hash.put("tDBClose_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tDBClose_3Process(globalMap);

				/**
				 * [tDBClose_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_2 finally ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_3 begin ] start
				 */

				ok_Hash.put("tDBClose_3", false);
				start_Hash.put("tDBClose_3", System.currentTimeMillis());

				currentComponent = "tDBClose_3";

				int tos_count_tDBClose_3 = 0;

				/**
				 * [tDBClose_3 begin ] stop
				 */

				/**
				 * [tDBClose_3 main ] start
				 */

				currentComponent = "tDBClose_3";

				java.sql.Connection conn_tDBClose_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");
				if (conn_tDBClose_3 != null && !conn_tDBClose_3.isClosed()) {
					conn_tDBClose_3.close();
				}

				if (null != java.sql.DriverManager.getLogWriter()) {
					java.sql.DriverManager.getLogWriter().close();
				}

				java.io.PrintWriter logWriter_tDBClose_3 = (java.io.PrintWriter) globalMap
						.get("logWriter_tDBConnection_3");
				if (logWriter_tDBClose_3 != null) {
					logWriter_tDBClose_3.close();
				}

				tos_count_tDBClose_3++;

				/**
				 * [tDBClose_3 main ] stop
				 */

				/**
				 * [tDBClose_3 process_data_begin ] start
				 */

				currentComponent = "tDBClose_3";

				/**
				 * [tDBClose_3 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_3 process_data_end ] start
				 */

				currentComponent = "tDBClose_3";

				/**
				 * [tDBClose_3 process_data_end ] stop
				 */

				/**
				 * [tDBClose_3 end ] start
				 */

				currentComponent = "tDBClose_3";

				ok_Hash.put("tDBClose_3", true);
				end_Hash.put("tDBClose_3", System.currentTimeMillis());

				/**
				 * [tDBClose_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_3 finally ] start
				 */

				currentComponent = "tDBClose_3";

				/**
				 * [tDBClose_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_3_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://"
						+ context.SH_RR_Host + ":" + context.SH_Port + "/"
						+ context.SH_Database + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = context.SH_Username;

				final String decryptedPassword_tDBConnection_1 = context.SH_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", context.SH_Database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				StringBuilder sbuilder_tDBConnection_2 = new StringBuilder();
				sbuilder_tDBConnection_2.append("jdbc:redshift:");
				sbuilder_tDBConnection_2.append("//").append(context.EDW_Host)
						.append(":").append(context.EDW_Port).append("/")
						.append(context.EDW_Database).append("?loglevel=")
						.append(0);
				String url_tDBConnection_2 = sbuilder_tDBConnection_2
						.toString();
				String dbUser_tDBConnection_2 = context.EDW_Username;

				final String decryptedPassword_tDBConnection_2 = context.EDW_Password;
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(
						url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}
				globalMap.put("schema_" + "tDBConnection_2", "public");

				globalMap
						.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBConnection_3Process(globalMap);

				/**
				 * [tDBConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				StringBuilder sbuilder_tDBConnection_3 = new StringBuilder();
				sbuilder_tDBConnection_3.append("jdbc:redshift:");
				sbuilder_tDBConnection_3.append("//").append(context.EDW_Host)
						.append(":").append(context.EDW_Port).append("/")
						.append(context.EDW_Database).append("?loglevel=")
						.append(0);
				String url_tDBConnection_3 = sbuilder_tDBConnection_3
						.toString();
				String dbUser_tDBConnection_3 = context.EDW_Username;

				final String decryptedPassword_tDBConnection_3 = context.EDW_Password;
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(
						url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(true);
				}
				globalMap
						.put("schema_" + "tDBConnection_3", context.EDW_Schema);

				globalMap
						.put("conn_" + "tDBConnection_3", conn_tDBConnection_3);

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				/**
				 * [tDBConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final amazon_cannibalization_job_process amazon_cannibalization_job_processClass = new amazon_cannibalization_job_process();

		int exitCode = amazon_cannibalization_job_processClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = amazon_cannibalization_job_process.class
					.getClassLoader().getResourceAsStream(
							"edw_etl_aditya/amazon_cannibalization_job_process_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = amazon_cannibalization_job_process.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("EDW_Database", "id_String");

			context.EDW_Database = (String) context.getProperty("EDW_Database");
			context.setContextType("EDW_Host", "id_String");

			context.EDW_Host = (String) context.getProperty("EDW_Host");
			context.setContextType("EDW_Password", "id_String");

			context.EDW_Password = (String) context.getProperty("EDW_Password");
			context.setContextType("EDW_Port", "id_String");

			context.EDW_Port = (String) context.getProperty("EDW_Port");
			context.setContextType("EDW_Schema", "id_String");

			context.EDW_Schema = (String) context.getProperty("EDW_Schema");
			context.setContextType("EDW_Username", "id_String");

			context.EDW_Username = (String) context.getProperty("EDW_Username");
			context.setContextType("SH_Database", "id_String");

			context.SH_Database = (String) context.getProperty("SH_Database");
			context.setContextType("SH_Password", "id_String");

			context.SH_Password = (String) context.getProperty("SH_Password");
			context.setContextType("SH_Port", "id_String");

			context.SH_Port = (String) context.getProperty("SH_Port");
			context.setContextType("SH_RR_Host", "id_String");

			context.SH_RR_Host = (String) context.getProperty("SH_RR_Host");
			context.setContextType("SH_Username", "id_String");

			context.SH_Username = (String) context.getProperty("SH_Username");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("EDW_Database")) {
				context.EDW_Database = (String) parentContextMap
						.get("EDW_Database");
			}
			if (parentContextMap.containsKey("EDW_Host")) {
				context.EDW_Host = (String) parentContextMap.get("EDW_Host");
			}
			if (parentContextMap.containsKey("EDW_Password")) {
				context.EDW_Password = (String) parentContextMap
						.get("EDW_Password");
			}
			if (parentContextMap.containsKey("EDW_Port")) {
				context.EDW_Port = (String) parentContextMap.get("EDW_Port");
			}
			if (parentContextMap.containsKey("EDW_Schema")) {
				context.EDW_Schema = (String) parentContextMap
						.get("EDW_Schema");
			}
			if (parentContextMap.containsKey("EDW_Username")) {
				context.EDW_Username = (String) parentContextMap
						.get("EDW_Username");
			}
			if (parentContextMap.containsKey("SH_Database")) {
				context.SH_Database = (String) parentContextMap
						.get("SH_Database");
			}
			if (parentContextMap.containsKey("SH_Password")) {
				context.SH_Password = (String) parentContextMap
						.get("SH_Password");
			}
			if (parentContextMap.containsKey("SH_Port")) {
				context.SH_Port = (String) parentContextMap.get("SH_Port");
			}
			if (parentContextMap.containsKey("SH_RR_Host")) {
				context.SH_RR_Host = (String) parentContextMap
						.get("SH_RR_Host");
			}
			if (parentContextMap.containsKey("SH_Username")) {
				context.SH_Username = (String) parentContextMap
						.get("SH_Username");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : amazon_cannibalization_job_process");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2",
				globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_3",
				globalMap.get("conn_tDBConnection_3"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 269377 characters generated by Talend Open Studio for Data Integration on the
 * 24 January, 2020 7:49:26 PM IST
 ************************************************************************************************/
