// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package edw_etl_aditya.fact_orders_fulfillment_status_updation1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: fact_orders_fulfillment_status_updation1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class fact_orders_fulfillment_status_updation1 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (Reddatabase != null) {

				this.setProperty("Reddatabase", Reddatabase.toString());

			}

			if (Redhost != null) {

				this.setProperty("Redhost", Redhost.toString());

			}

			if (Redpassword != null) {

				this.setProperty("Redpassword", Redpassword.toString());

			}

			if (Redport != null) {

				this.setProperty("Redport", Redport.toString());

			}

			if (Redusername != null) {

				this.setProperty("Redusername", Redusername.toString());

			}

			if (max != null) {

				this.setProperty("max", max.toString());

			}

			if (maxid != null) {

				this.setProperty("maxid", maxid.toString());

			}

			if (id != null) {

				this.setProperty("id", id.toString());

			}

			if (idds != null) {

				this.setProperty("idds", idds.toString());

			}

			if (accesskey != null) {

				this.setProperty("accesskey", accesskey.toString());

			}

			if (Database != null) {

				this.setProperty("Database", Database.toString());

			}

			if (Host != null) {

				this.setProperty("Host", Host.toString());

			}

			if (Password != null) {

				this.setProperty("Password", Password.toString());

			}

			if (Port != null) {

				this.setProperty("Port", Port.toString());

			}

			if (secretkey != null) {

				this.setProperty("secretkey", secretkey.toString());

			}

			if (Username != null) {

				this.setProperty("Username", Username.toString());

			}

			if (iddd != null) {

				this.setProperty("iddd", iddd.toString());

			}

			if (maxidd != null) {

				this.setProperty("maxidd", maxidd.toString());

			}

		}

		public String Reddatabase;

		public String getReddatabase() {
			return this.Reddatabase;
		}

		public String Redhost;

		public String getRedhost() {
			return this.Redhost;
		}

		public String Redpassword;

		public String getRedpassword() {
			return this.Redpassword;
		}

		public String Redport;

		public String getRedport() {
			return this.Redport;
		}

		public String Redusername;

		public String getRedusername() {
			return this.Redusername;
		}

		public Long max;

		public Long getMax() {
			return this.max;
		}

		public Long maxid;

		public Long getMaxid() {
			return this.maxid;
		}

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long idds;

		public Long getIdds() {
			return this.idds;
		}

		public String accesskey;

		public String getAccesskey() {
			return this.accesskey;
		}

		public String Database;

		public String getDatabase() {
			return this.Database;
		}

		public String Host;

		public String getHost() {
			return this.Host;
		}

		public String Password;

		public String getPassword() {
			return this.Password;
		}

		public String Port;

		public String getPort() {
			return this.Port;
		}

		public java.lang.String secretkey;

		public java.lang.String getSecretkey() {
			return this.secretkey;
		}

		public String Username;

		public String getUsername() {
			return this.Username;
		}

		public Long iddd;

		public Long getIddd() {
			return this.iddd;
		}

		public Long maxidd;

		public Long getMaxidd() {
			return this.maxidd;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "fact_orders_fulfillment_status_updation1";
	private final String projectName = "EDW_ETL_ADITYA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					fact_orders_fulfillment_status_updation1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									fact_orders_fulfillment_status_updation1.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				class BytesLimit65535_tDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBClose_1().limitLog4jByte();

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + context.Host
						+ ":" + context.Port + "/" + context.Database + "?"
						+ properties_tDBConnection_1;

				String dbUser_tDBConnection_1 = context.Username;

				final String decryptedPassword_tDBConnection_1 = context.Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", context.Database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				class BytesLimit65535_tDBConnection_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_2().limitLog4jByte();

				java.io.Writer output_tDBConnection_2 = new java.io.FileWriter(
						"/Users/masteradmin/Downloads/TOS_DI-20180411_1414-V7.0.1/workspace/redshift-jdbc.log",
						true);
				java.io.PrintWriter logWriter_tDBConnection_2 = new java.io.PrintWriter(
						output_tDBConnection_2, true);
				globalMap.put("logWriter_tDBConnection_2",
						logWriter_tDBConnection_2);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_2);
				StringBuilder sbuilder_tDBConnection_2 = new StringBuilder();
				sbuilder_tDBConnection_2.append("jdbc:redshift://")
						.append(context.Redhost).append(":")
						.append(context.Redport).append("/")
						.append(context.Reddatabase).append("?loglevel=")
						.append(1);
				String url_tDBConnection_2 = sbuilder_tDBConnection_2
						.toString();

				String dbUser_tDBConnection_2 = context.Redusername;

				final String decryptedPassword_tDBConnection_2 = context.Redpassword;
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.amazon.redshift.jdbc41.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(
						url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}
				globalMap.put("schema_" + "tDBConnection_2", "public");

				globalMap
						.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBConnection_3Process(globalMap);

				/**
				 * [tDBConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				class BytesLimit65535_tDBConnection_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_3().limitLog4jByte();

				java.io.Writer output_tDBConnection_3 = new java.io.FileWriter(
						"/Users/masteradmin/Downloads/TOS_DI-20180411_1414-V7.0.1/workspace/redshift-jdbc.log",
						true);
				java.io.PrintWriter logWriter_tDBConnection_3 = new java.io.PrintWriter(
						output_tDBConnection_3, true);
				globalMap.put("logWriter_tDBConnection_3",
						logWriter_tDBConnection_3);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_3);
				StringBuilder sbuilder_tDBConnection_3 = new StringBuilder();
				sbuilder_tDBConnection_3.append("jdbc:redshift://")
						.append(context.Redhost).append(":")
						.append(context.Redport).append("/")
						.append(context.Reddatabase).append("?loglevel=")
						.append(1);
				String url_tDBConnection_3 = sbuilder_tDBConnection_3
						.toString();

				String dbUser_tDBConnection_3 = context.Redusername;

				final String decryptedPassword_tDBConnection_3 = context.Redpassword;
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "com.amazon.redshift.jdbc41.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(
						url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(false);
				}
				globalMap.put("schema_" + "tDBConnection_3", "tj_dwh_prod");

				globalMap
						.put("conn_" + "tDBConnection_3", conn_tDBConnection_3);

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tS3Connection_1Process(globalMap);

				/**
				 * [tDBConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				class BytesLimit65535_tS3Connection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Connection_1().limitLog4jByte();

				final String decryptedPassword_tS3Connection_1 = context.secretkey;

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						context.accesskey, decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.internal.StaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1
						.setUserAgent("APN/1.0 Talend/7.0 Studio/7.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = new com.amazonaws.services.s3.AmazonS3Client(
						credentialsProvider_tS3Connection_1, cc_tS3Connection_1);

				try {
					conn_tS3Connection_1
							.getBucketLoggingConfiguration("Check-Connection-Only");
				} catch (com.amazonaws.AmazonServiceException ase) {
					if (ase.getErrorCode().equals("NoSuchBucket")) {
						// ignore
					} else {
						throw ase;
					}
				}

				globalMap
						.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk43", 0, "ok");
				}
				tDBInput_10Process(globalMap);

				/**
				 * [tS3Connection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Integer countss;

		public Integer getCountss() {
			return this.countss;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					this.countss = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.countss, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("countss=" + String.valueOf(countss));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_7 = 0;

				class BytesLimit65535_tJavaRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_7().limitLog4jByte();

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				class BytesLimit65535_tDBInput_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_10().limitLog4jByte();

				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10
						.createStatement();

				String dbquery_tDBInput_10 = "select count(1) as countss from process_logs where process_state = 'Running' and process_name = 'fact_orders_fulfillmen"
						+ "t_status_updation'";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10
							.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10
							.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10
							.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row10.countss = null;
						} else {

							if (rs_tDBInput_10.getObject(1) != null) {
								row10.countss = rs_tDBInput_10.getInt(1);
							} else {
								row10.countss = null;
							}
						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_7 main ] start
						 */

						currentComponent = "tJavaRow_7";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row10.id * 2;
						//
						// lowercase the name
						// output_row.name = row10.name.toLowerCase();

						globalMap.put("countss", row10.countss);

						System.out.println("count:" + globalMap.get("countss"));

						nb_line_tJavaRow_7++;

						tos_count_tJavaRow_7++;

						/**
						 * [tJavaRow_7 main ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_end ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					stmt_tDBInput_10.close();

				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if (((Integer) globalMap.get("countss")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "true");
					}

					tDBRow_7Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "false");
					}
				}

				/**
				 * [tJavaRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_7 begin ] start
				 */

				ok_Hash.put("tDBRow_7", false);
				start_Hash.put("tDBRow_7", System.currentTimeMillis());

				currentComponent = "tDBRow_7";

				int tos_count_tDBRow_7 = 0;

				class BytesLimit65535_tDBRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_7().limitLog4jByte();

				java.sql.Connection conn_tDBRow_7 = null;
				String query_tDBRow_7 = "";
				boolean whetherReject_tDBRow_7 = false;
				conn_tDBRow_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_7 = conn_tDBRow_7
						.createStatement();

				/**
				 * [tDBRow_7 begin ] stop
				 */

				/**
				 * [tDBRow_7 main ] start
				 */

				currentComponent = "tDBRow_7";

				query_tDBRow_7 = "insert into process_logs (process_name, start_time, process_state) values ('fact_orders_fulfillment_status_updation',cu"
						+ "rrent_timestamp,'Running')";
				whetherReject_tDBRow_7 = false;
				globalMap.put("tDBRow_7_QUERY", query_tDBRow_7);
				try {
					stmt_tDBRow_7.execute(query_tDBRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_7 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_7) {

				}

				tos_count_tDBRow_7++;

				/**
				 * [tDBRow_7 main ] stop
				 */

				/**
				 * [tDBRow_7 process_data_begin ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_7 process_data_end ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_end ] stop
				 */

				/**
				 * [tDBRow_7 end ] start
				 */

				currentComponent = "tDBRow_7";

				stmt_tDBRow_7.close();

				ok_Hash.put("tDBRow_7", true);
				end_Hash.put("tDBRow_7", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk40", 0, "ok");
				}
				tDBCommit_10Process(globalMap);

				/**
				 * [tDBRow_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_7 finally ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_10 begin ] start
				 */

				ok_Hash.put("tDBCommit_10", false);
				start_Hash.put("tDBCommit_10", System.currentTimeMillis());

				currentComponent = "tDBCommit_10";

				int tos_count_tDBCommit_10 = 0;

				class BytesLimit65535_tDBCommit_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_10().limitLog4jByte();

				/**
				 * [tDBCommit_10 begin ] stop
				 */

				/**
				 * [tDBCommit_10 main ] start
				 */

				currentComponent = "tDBCommit_10";

				java.sql.Connection conn_tDBCommit_10 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_10 != null && !conn_tDBCommit_10.isClosed()) {

					conn_tDBCommit_10.commit();

				}

				tos_count_tDBCommit_10++;

				/**
				 * [tDBCommit_10 main ] stop
				 */

				/**
				 * [tDBCommit_10 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_10 process_data_end ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_10 end ] start
				 */

				currentComponent = "tDBCommit_10";

				ok_Hash.put("tDBCommit_10", true);
				end_Hash.put("tDBCommit_10", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tDBInput_11Process(globalMap);

				/**
				 * [tDBCommit_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_10 finally ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_10_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long iddd;

		public Long getIddd() {
			return this.iddd;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.iddd = null;
					} else {
						this.iddd = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.iddd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.iddd);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddd=" + String.valueOf(iddd));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_8 = 0;

				class BytesLimit65535_tJavaRow_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_8().limitLog4jByte();

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				class BytesLimit65535_tDBInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_11().limitLog4jByte();

				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "select coalesce(max(last_id),0) as iddd from process_logs where process_name = 'fact_orders_fulfillment_status_updation"
						+ "' and process_state = 'Completed';";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row11.iddd = null;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row11.iddd = rs_tDBInput_11.getLong(1);
							} else {
								row11.iddd = null;
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_8 main ] start
						 */

						currentComponent = "tJavaRow_8";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.iddd = row11.iddd;

						nb_line_tJavaRow_8++;

						tos_count_tJavaRow_8++;

						/**
						 * [tJavaRow_8 main ] stop
						 */

						/**
						 * [tJavaRow_8 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_8";

						/**
						 * [tJavaRow_8 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_8 process_data_end ] start
						 */

						currentComponent = "tJavaRow_8";

						/**
						 * [tJavaRow_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					stmt_tDBInput_11.close();

				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tJavaRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long order_id;

		public Long getOrder_id() {
			return this.order_id;
		}

		public String order_name;

		public String getOrder_name() {
			return this.order_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.order_id = null;
					} else {
						this.order_id = dis.readLong();
					}

					this.order_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// Long

				if (this.order_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_id);
				}

				// String

				writeString(this.order_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",order_id=" + String.valueOf(order_id));
			sb.append(",order_name=" + order_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				class BytesLimit65535_tFileOutputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"/tmp/ordersfulfillmentstatusupdate.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select id, order_id, order_name from tj_dwh_prod.fact_orders_fulfillment_status where id > "
						+ context.iddd + " order by id";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row9.id = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row9.id = rs_tDBInput_2.getLong(1);
							} else {
								row9.id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row9.order_id = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row9.order_id = rs_tDBInput_2.getLong(2);
							} else {
								row9.order_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row9.order_name = null;
						} else {

							row9.order_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row9.id != null) {
							sb_tFileOutputDelimited_3.append(row9.id);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row9.order_id != null) {
							sb_tFileOutputDelimited_3.append(row9.order_id);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row9.order_name != null) {
							sb_tFileOutputDelimited_3.append(row9.order_name);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3",
								nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3
								.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tS3Put_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_3 begin ] start
				 */

				ok_Hash.put("tS3Put_3", false);
				start_Hash.put("tS3Put_3", System.currentTimeMillis());

				currentComponent = "tS3Put_3";

				int tos_count_tS3Put_3 = 0;

				class BytesLimit65535_tS3Put_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Put_3().limitLog4jByte();

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_3 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_3 = "EDW_RW/ordersfulfillmentstatusupdate.csv";

				int partSizeInBytes_tS3Put_3 = 5 * 1024 * 1024;

				Object fileOrStream_tS3Put_3 = "/tmp/ordersfulfillmentstatusupdate.csv";

				boolean useStream_tS3Put_3 = false;
				java.io.InputStream uploadStream_tS3Put_3 = null;

				try {

					if (fileOrStream_tS3Put_3 instanceof String) {
						useStream_tS3Put_3 = false;
					} else if (fileOrStream_tS3Put_3 instanceof java.io.InputStream) {
						useStream_tS3Put_3 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_3 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_3) {
						java.io.File inputFile_tS3Put_3 = new java.io.File(
								(String) fileOrStream_tS3Put_3);

						long multipart_upload_threshold_tS3Put_3 = 5 * 1024 * 1024;

						com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_3 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
								.standard()
								.withMinimumUploadPartSize(
										(long) partSizeInBytes_tS3Put_3)
								.withMultipartUploadThreshold(
										multipart_upload_threshold_tS3Put_3)
								.withS3Client(conn_tS3Put_3).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"tj-redshift-edw", key_tS3Put_3,
								inputFile_tS3Put_3)
								.withMetadata(objectMetadata_tS3Put_3);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_3 = tm_tS3Put_3
								.upload(putRequest_tS3Put_3);

						upload_tS3Put_3.waitForCompletion();
					} else {
						java.io.InputStream sourceStream_tS3Put_3 = ((java.io.InputStream) fileOrStream_tS3Put_3);

						class S3StreamUtil {
							public int getLength(byte[] output) {
								for (int i = output.length - 1; i > 0; i--) {
									if (output[i] != 0) {
										return i + 1;
									}
								}
								return 0;
							}
						}

						S3StreamUtil streamUtil_tS3Put_3 = new S3StreamUtil();
						byte[] buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
						sourceStream_tS3Put_3.read(buffer_tS3Put_3);
						long curPartSize_tS3Put_3 = streamUtil_tS3Put_3
								.getLength(buffer_tS3Put_3);
						boolean multiUpload_tS3Put_3 = curPartSize_tS3Put_3 == partSizeInBytes_tS3Put_3;

						if (!multiUpload_tS3Put_3) {
							objectMetadata_tS3Put_3
									.setContentLength(curPartSize_tS3Put_3);
							uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_3, 0, Long.valueOf(
											curPartSize_tS3Put_3).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"tj-redshift-edw", key_tS3Put_3,
									uploadStream_tS3Put_3,
									objectMetadata_tS3Put_3);

							conn_tS3Put_3.putObject(putRequest_tS3Put_3);
						} else {
							uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_3);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_3 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"tj-redshift-edw", key_tS3Put_3,
									objectMetadata_tS3Put_3);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_3 = conn_tS3Put_3
									.initiateMultipartUpload(putRequest_tS3Put_3);
							String uploadId_tS3Put_3 = initResponse_tS3Put_3
									.getUploadId();
							int partNumber_tS3Put_3 = 1;
							boolean streamHasNext_tS3Put_3 = true;
							byte[] probeAvailability_tS3Put_3 = new byte[1];
							try {
								while (streamHasNext_tS3Put_3) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_3 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("tj-redshift-edw")
											.withKey(key_tS3Put_3)
											.withUploadId(uploadId_tS3Put_3)
											.withPartNumber(partNumber_tS3Put_3)
											.withPartSize(curPartSize_tS3Put_3);
									uploadRequest_tS3Put_3
											.setInputStream(uploadStream_tS3Put_3);
									streamHasNext_tS3Put_3 = sourceStream_tS3Put_3
											.read(probeAvailability_tS3Put_3) != -1;
									if (!streamHasNext_tS3Put_3) {
										uploadRequest_tS3Put_3
												.setLastPart(true);
									}

									partTags_tS3Put_3.add(conn_tS3Put_3
											.uploadPart(uploadRequest_tS3Put_3)
											.getPartETag());
									partNumber_tS3Put_3++;

									if (uploadStream_tS3Put_3 != null) {
										uploadStream_tS3Put_3.close();
									}
									buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
									sourceStream_tS3Put_3.read(buffer_tS3Put_3,
											1, partSizeInBytes_tS3Put_3 - 1);
									buffer_tS3Put_3[0] = probeAvailability_tS3Put_3[0];
									probeAvailability_tS3Put_3 = new byte[1];
									curPartSize_tS3Put_3 = streamUtil_tS3Put_3
											.getLength(buffer_tS3Put_3);
									uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
											buffer_tS3Put_3);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_3 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"tj-redshift-edw", key_tS3Put_3,
										uploadId_tS3Put_3, partTags_tS3Put_3);
								conn_tS3Put_3
										.completeMultipartUpload(compRequest_tS3Put_3);
							} catch (java.lang.Exception uploadException_tS3Put_3) {
								conn_tS3Put_3
										.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"tj-redshift-edw",
												key_tS3Put_3, uploadId_tS3Put_3));
								throw uploadException_tS3Put_3;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_3) {

					System.err.println(e_tS3Put_3.getMessage());

				} finally {
					if (useStream_tS3Put_3 && uploadStream_tS3Put_3 != null) {
						uploadStream_tS3Put_3.close();
					}

				}

				/**
				 * [tS3Put_3 begin ] stop
				 */

				/**
				 * [tS3Put_3 main ] start
				 */

				currentComponent = "tS3Put_3";

				tos_count_tS3Put_3++;

				/**
				 * [tS3Put_3 main ] stop
				 */

				/**
				 * [tS3Put_3 process_data_begin ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_3 process_data_end ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 process_data_end ] stop
				 */

				/**
				 * [tS3Put_3 end ] start
				 */

				currentComponent = "tS3Put_3";

				ok_Hash.put("tS3Put_3", true);
				end_Hash.put("tS3Put_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk34", 0, "ok");
				}
				tDBBulkExec_3Process(globalMap);

				/**
				 * [tS3Put_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_3 finally ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_3 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_3", false);
				start_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_3";

				int tos_count_tDBBulkExec_3 = 0;

				class BytesLimit65535_tDBBulkExec_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBBulkExec_3().limitLog4jByte();

				String dbschema_tDBBulkExec_3 = null;

				dbschema_tDBBulkExec_3 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBBulkExec_3 = "orders_fulfillment_status_update";
				String tableName2_tDBBulkExec_3 = tableName_tDBBulkExec_3;
				boolean isTempTable_tDBBulkExec_3 = tableName_tDBBulkExec_3 != null
						&& tableName_tDBBulkExec_3.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_3) {
					tableName2_tDBBulkExec_3 = "\"" + tableName2_tDBBulkExec_3
							+ "\"";
				} else if (dbschema_tDBBulkExec_3 == null
						|| dbschema_tDBBulkExec_3.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "\".\""
							+ tableName_tDBBulkExec_3;
					tableName2_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "."
							+ tableName2_tDBBulkExec_3;
				}

				java.sql.Connection conn_tDBBulkExec_3 = null;
				conn_tDBBulkExec_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				StringBuilder command_tDBBulkExec_3 = new StringBuilder();
				char fieldSeparator_tDBBulkExec_3 = String.valueOf(',').charAt(
						0);
				char textEnclosure_tDBBulkExec_3 = '\0';

				command_tDBBulkExec_3.append("COPY ")
						.append(tableName2_tDBBulkExec_3)

						.append(" (").append("id").append(",")
						.append("order_id").append(",").append("order_name")
						.append(")").append(" FROM '");

				final String decryptedPwd_tDBBulkExec_3 = context.secretkey;

				command_tDBBulkExec_3.append("s3://").append("tj-redshift-edw")
						.append("/")
						.append("EDW_RW/ordersfulfillmentstatusupdate.csv")
						.append("' ")

						.append("credentials 'aws_access_key_id=")
						.append(context.accesskey)
						.append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_3).append("' ")
						.append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_3).append("' ");
				if (textEnclosure_tDBBulkExec_3 != '\0') {
					command_tDBBulkExec_3.append("CSV QUOTE '")
							.append(textEnclosure_tDBBulkExec_3).append("' ");
				}
				command_tDBBulkExec_3.append("ENCODING ").append("UTF8")
						.append(" ");

				java.sql.Statement stmt_tDBBulkExec_3 = conn_tDBBulkExec_3
						.createStatement();
				stmt_tDBBulkExec_3.execute(command_tDBBulkExec_3.toString());

				/**
				 * [tDBBulkExec_3 begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 main ] start
				 */

				currentComponent = "tDBBulkExec_3";

				tos_count_tDBBulkExec_3++;

				/**
				 * [tDBBulkExec_3 main ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_3 end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				ok_Hash.put("tDBBulkExec_3", true);
				end_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk35", 0, "ok");
				}
				tDBCommit_9Process(globalMap);

				/**
				 * [tDBBulkExec_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_3 finally ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_9 begin ] start
				 */

				ok_Hash.put("tDBCommit_9", false);
				start_Hash.put("tDBCommit_9", System.currentTimeMillis());

				currentComponent = "tDBCommit_9";

				int tos_count_tDBCommit_9 = 0;

				class BytesLimit65535_tDBCommit_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_9().limitLog4jByte();

				/**
				 * [tDBCommit_9 begin ] stop
				 */

				/**
				 * [tDBCommit_9 main ] start
				 */

				currentComponent = "tDBCommit_9";

				java.sql.Connection conn_tDBCommit_9 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_9 != null && !conn_tDBCommit_9.isClosed()) {

					conn_tDBCommit_9.commit();

				}

				tos_count_tDBCommit_9++;

				/**
				 * [tDBCommit_9 main ] stop
				 */

				/**
				 * [tDBCommit_9 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_9 process_data_end ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_9 end ] start
				 */

				currentComponent = "tDBCommit_9";

				ok_Hash.put("tDBCommit_9", true);
				end_Hash.put("tDBCommit_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk46", 0, "ok");
				}
				tDBInput_12Process(globalMap);

				/**
				 * [tDBCommit_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_9 finally ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_9_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long maxidd;

		public Long getMaxidd() {
			return this.maxidd;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.maxidd = null;
					} else {
						this.maxidd = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.maxidd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.maxidd);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("maxidd=" + String.valueOf(maxidd));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_9 = 0;

				class BytesLimit65535_tJavaRow_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_9().limitLog4jByte();

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				class BytesLimit65535_tDBInput_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_12().limitLog4jByte();

				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				conn_tDBInput_12 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12
						.createStatement();

				String dbquery_tDBInput_12 = "select max(id) as maxidd from tj_dwh_prod.fact_orders_fulfillment_status";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12
							.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12
							.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12
							.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row12.maxidd = null;
						} else {

							if (rs_tDBInput_12.getObject(1) != null) {
								row12.maxidd = rs_tDBInput_12.getLong(1);
							} else {
								row12.maxidd = null;
							}
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_9 main ] start
						 */

						currentComponent = "tJavaRow_9";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.maxidd = row12.maxidd;

						globalMap.put("maxidd", row12.maxidd);

						System.out.println("max:" + globalMap.get("maxidd"));
						nb_line_tJavaRow_9++;

						tos_count_tJavaRow_9++;

						/**
						 * [tJavaRow_9 main ] stop
						 */

						/**
						 * [tJavaRow_9 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_9";

						/**
						 * [tJavaRow_9 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_9 process_data_end ] start
						 */

						currentComponent = "tJavaRow_9";

						/**
						 * [tJavaRow_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					stmt_tDBInput_12.close();

				}
				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk45", 0, "ok");
				}
				tDBRow_8Process(globalMap);

				/**
				 * [tJavaRow_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_8 begin ] start
				 */

				ok_Hash.put("tDBRow_8", false);
				start_Hash.put("tDBRow_8", System.currentTimeMillis());

				currentComponent = "tDBRow_8";

				int tos_count_tDBRow_8 = 0;

				class BytesLimit65535_tDBRow_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_8().limitLog4jByte();

				java.sql.Connection conn_tDBRow_8 = null;
				String query_tDBRow_8 = "";
				boolean whetherReject_tDBRow_8 = false;
				conn_tDBRow_8 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8
						.createStatement();

				/**
				 * [tDBRow_8 begin ] stop
				 */

				/**
				 * [tDBRow_8 main ] start
				 */

				currentComponent = "tDBRow_8";

				query_tDBRow_8 = "update process_logs\nset process_state = 'Completed', end_time = CURRENT_TIMESTAMP,\nLast_id = "
						+ context.maxidd
						+ "\nwhere process_name = 'fact_orders_fulfillment_status_updation' and process_state = 'Running';";
				whetherReject_tDBRow_8 = false;
				globalMap.put("tDBRow_8_QUERY", query_tDBRow_8);
				try {
					stmt_tDBRow_8.execute(query_tDBRow_8);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_8 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_8) {

				}

				tos_count_tDBRow_8++;

				/**
				 * [tDBRow_8 main ] stop
				 */

				/**
				 * [tDBRow_8 process_data_begin ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_8 process_data_end ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_end ] stop
				 */

				/**
				 * [tDBRow_8 end ] start
				 */

				currentComponent = "tDBRow_8";

				stmt_tDBRow_8.close();

				ok_Hash.put("tDBRow_8", true);
				end_Hash.put("tDBRow_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk44", 0, "ok");
				}
				tDBCommit_11Process(globalMap);

				/**
				 * [tDBRow_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_8 finally ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_11 begin ] start
				 */

				ok_Hash.put("tDBCommit_11", false);
				start_Hash.put("tDBCommit_11", System.currentTimeMillis());

				currentComponent = "tDBCommit_11";

				int tos_count_tDBCommit_11 = 0;

				class BytesLimit65535_tDBCommit_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_11().limitLog4jByte();

				/**
				 * [tDBCommit_11 begin ] stop
				 */

				/**
				 * [tDBCommit_11 main ] start
				 */

				currentComponent = "tDBCommit_11";

				java.sql.Connection conn_tDBCommit_11 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_11 != null && !conn_tDBCommit_11.isClosed()) {

					conn_tDBCommit_11.commit();

				}

				tos_count_tDBCommit_11++;

				/**
				 * [tDBCommit_11 main ] stop
				 */

				/**
				 * [tDBCommit_11 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_11 process_data_end ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_11 end ] start
				 */

				currentComponent = "tDBCommit_11";

				ok_Hash.put("tDBCommit_11", true);
				end_Hash.put("tDBCommit_11", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk47", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBCommit_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_11 finally ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_11_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Integer counts;

		public Integer getCounts() {
			return this.counts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					this.counts = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.counts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("counts=" + String.valueOf(counts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				class BytesLimit65535_tDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_3().limitLog4jByte();

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "select count(1) as counts from process_logs where process_state = 'Running' and process_name = 'fact_orders_fulfillment"
						+ "_status_updation_by_shipping'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.counts = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.counts = rs_tDBInput_3.getInt(1);
							} else {
								row3.counts = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row3.id * 2;
						//
						// lowercase the name
						// output_row.name = row3.name.toLowerCase();

						globalMap.put("counts", row3.counts);

						System.out.println("count:" + globalMap.get("counts"));

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					stmt_tDBInput_3.close();

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("counts")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tDBRow_3Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				class BytesLimit65535_tDBRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_3().limitLog4jByte();

				java.sql.Connection conn_tDBRow_3 = null;
				String query_tDBRow_3 = "";
				boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3
						.createStatement();

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				query_tDBRow_3 = "insert into process_logs (process_name, start_time, process_state) values ('fact_orders_fulfillment_status_updation_by_"
						+ "shipping',current_timestamp,'Running')";
				whetherReject_tDBRow_3 = false;
				globalMap.put("tDBRow_3_QUERY", query_tDBRow_3);
				try {
					stmt_tDBRow_3.execute(query_tDBRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_3) {

				}

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

				stmt_tDBRow_3.close();

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk30", 0, "ok");
				}
				tDBCommit_5Process(globalMap);

				/**
				 * [tDBRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_5 begin ] start
				 */

				ok_Hash.put("tDBCommit_5", false);
				start_Hash.put("tDBCommit_5", System.currentTimeMillis());

				currentComponent = "tDBCommit_5";

				int tos_count_tDBCommit_5 = 0;

				class BytesLimit65535_tDBCommit_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_5().limitLog4jByte();

				/**
				 * [tDBCommit_5 begin ] stop
				 */

				/**
				 * [tDBCommit_5 main ] start
				 */

				currentComponent = "tDBCommit_5";

				java.sql.Connection conn_tDBCommit_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_5 != null && !conn_tDBCommit_5.isClosed()) {

					conn_tDBCommit_5.commit();

				}

				tos_count_tDBCommit_5++;

				/**
				 * [tDBCommit_5 main ] stop
				 */

				/**
				 * [tDBCommit_5 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_5";

				/**
				 * [tDBCommit_5 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_5 process_data_end ] start
				 */

				currentComponent = "tDBCommit_5";

				/**
				 * [tDBCommit_5 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_5 end ] start
				 */

				currentComponent = "tDBCommit_5";

				ok_Hash.put("tDBCommit_5", true);
				end_Hash.put("tDBCommit_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tDBInput_7Process(globalMap);

				/**
				 * [tDBCommit_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_5 finally ] start
				 */

				currentComponent = "tDBCommit_5";

				/**
				 * [tDBCommit_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_5_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_5 = 0;

				class BytesLimit65535_tJavaRow_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_5().limitLog4jByte();

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				class BytesLimit65535_tDBInput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_7().limitLog4jByte();

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "select coalesce(max(last_id),0) as id from process_logs where process_name = 'fact_orders_fulfillment_status_updation_b"
						+ "y_shipping' and process_state = 'Completed';";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.id = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row7.id = rs_tDBInput_7.getLong(1);
							} else {
								row7.id = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.id = row7.id;

						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_end ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					stmt_tDBInput_7.close();

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk28", 0, "ok");
				}
				tDBInput_1Process(globalMap);

				/**
				 * [tJavaRow_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long order_id;

		public Long getOrder_id() {
			return this.order_id;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.order_id = null;
					} else {
						this.order_id = dis.readLong();
					}

					this.title = readString(dis);

					this.code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// Long

				if (this.order_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_id);
				}

				// String

				writeString(this.title, dos);

				// String

				writeString(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",order_id=" + String.valueOf(order_id));
			sb.append(",title=" + title);
			sb.append(",code=" + code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				class BytesLimit65535_tFileOutputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/tmp/ordershipping.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				class BytesLimit65535_tDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_1().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select id, order_id, replace(title,',',';') as title, code from shopify_staging.orders_shipping_lines where id > "
						+ context.id + " order by id";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.id = rs_tDBInput_1.getLong(1);
							} else {
								row1.id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.order_id = null;
						} else {

							if (rs_tDBInput_1.getObject(2) != null) {
								row1.order_id = rs_tDBInput_1.getLong(2);
							} else {
								row1.order_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.title = null;
						} else {

							row1.title = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.code = null;
						} else {

							row1.code = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 4, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row1.id != null) {
							sb_tFileOutputDelimited_1.append(row1.id);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.order_id != null) {
							sb_tFileOutputDelimited_1.append(row1.order_id);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.title != null) {
							sb_tFileOutputDelimited_1.append(row1.title);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.code != null) {
							sb_tFileOutputDelimited_1.append(row1.code);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					stmt_tDBInput_1.close();
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tS3Put_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_1 begin ] start
				 */

				ok_Hash.put("tS3Put_1", false);
				start_Hash.put("tS3Put_1", System.currentTimeMillis());

				currentComponent = "tS3Put_1";

				int tos_count_tS3Put_1 = 0;

				class BytesLimit65535_tS3Put_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Put_1().limitLog4jByte();

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_1 = "EDW_RW/ordershipping.csv";

				int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;

				Object fileOrStream_tS3Put_1 = "/tmp/ordershipping.csv";

				boolean useStream_tS3Put_1 = false;
				java.io.InputStream uploadStream_tS3Put_1 = null;

				try {

					if (fileOrStream_tS3Put_1 instanceof String) {
						useStream_tS3Put_1 = false;
					} else if (fileOrStream_tS3Put_1 instanceof java.io.InputStream) {
						useStream_tS3Put_1 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_1) {
						java.io.File inputFile_tS3Put_1 = new java.io.File(
								(String) fileOrStream_tS3Put_1);

						long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;

						com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
								.standard()
								.withMinimumUploadPartSize(
										(long) partSizeInBytes_tS3Put_1)
								.withMultipartUploadThreshold(
										multipart_upload_threshold_tS3Put_1)
								.withS3Client(conn_tS3Put_1).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"tj-redshift-edw", key_tS3Put_1,
								inputFile_tS3Put_1)
								.withMetadata(objectMetadata_tS3Put_1);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1
								.upload(putRequest_tS3Put_1);

						upload_tS3Put_1.waitForCompletion();
					} else {
						java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream) fileOrStream_tS3Put_1);

						class S3StreamUtil {
							public int getLength(byte[] output) {
								for (int i = output.length - 1; i > 0; i--) {
									if (output[i] != 0) {
										return i + 1;
									}
								}
								return 0;
							}
						}

						S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
						byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
						sourceStream_tS3Put_1.read(buffer_tS3Put_1);
						long curPartSize_tS3Put_1 = streamUtil_tS3Put_1
								.getLength(buffer_tS3Put_1);
						boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;

						if (!multiUpload_tS3Put_1) {
							objectMetadata_tS3Put_1
									.setContentLength(curPartSize_tS3Put_1);
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_1, 0, Long.valueOf(
											curPartSize_tS3Put_1).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"tj-redshift-edw", key_tS3Put_1,
									uploadStream_tS3Put_1,
									objectMetadata_tS3Put_1);

							conn_tS3Put_1.putObject(putRequest_tS3Put_1);
						} else {
							uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_1);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"tj-redshift-edw", key_tS3Put_1,
									objectMetadata_tS3Put_1);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1
									.initiateMultipartUpload(putRequest_tS3Put_1);
							String uploadId_tS3Put_1 = initResponse_tS3Put_1
									.getUploadId();
							int partNumber_tS3Put_1 = 1;
							boolean streamHasNext_tS3Put_1 = true;
							byte[] probeAvailability_tS3Put_1 = new byte[1];
							try {
								while (streamHasNext_tS3Put_1) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("tj-redshift-edw")
											.withKey(key_tS3Put_1)
											.withUploadId(uploadId_tS3Put_1)
											.withPartNumber(partNumber_tS3Put_1)
											.withPartSize(curPartSize_tS3Put_1);
									uploadRequest_tS3Put_1
											.setInputStream(uploadStream_tS3Put_1);
									streamHasNext_tS3Put_1 = sourceStream_tS3Put_1
											.read(probeAvailability_tS3Put_1) != -1;
									if (!streamHasNext_tS3Put_1) {
										uploadRequest_tS3Put_1
												.setLastPart(true);
									}

									partTags_tS3Put_1.add(conn_tS3Put_1
											.uploadPart(uploadRequest_tS3Put_1)
											.getPartETag());
									partNumber_tS3Put_1++;

									if (uploadStream_tS3Put_1 != null) {
										uploadStream_tS3Put_1.close();
									}
									buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
									sourceStream_tS3Put_1.read(buffer_tS3Put_1,
											1, partSizeInBytes_tS3Put_1 - 1);
									buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
									probeAvailability_tS3Put_1 = new byte[1];
									curPartSize_tS3Put_1 = streamUtil_tS3Put_1
											.getLength(buffer_tS3Put_1);
									uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(
											buffer_tS3Put_1);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"tj-redshift-edw", key_tS3Put_1,
										uploadId_tS3Put_1, partTags_tS3Put_1);
								conn_tS3Put_1
										.completeMultipartUpload(compRequest_tS3Put_1);
							} catch (java.lang.Exception uploadException_tS3Put_1) {
								conn_tS3Put_1
										.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"tj-redshift-edw",
												key_tS3Put_1, uploadId_tS3Put_1));
								throw uploadException_tS3Put_1;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_1) {

					System.err.println(e_tS3Put_1.getMessage());

				} finally {
					if (useStream_tS3Put_1 && uploadStream_tS3Put_1 != null) {
						uploadStream_tS3Put_1.close();
					}

				}

				/**
				 * [tS3Put_1 begin ] stop
				 */

				/**
				 * [tS3Put_1 main ] start
				 */

				currentComponent = "tS3Put_1";

				tos_count_tS3Put_1++;

				/**
				 * [tS3Put_1 main ] stop
				 */

				/**
				 * [tS3Put_1 process_data_begin ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_1 process_data_end ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 process_data_end ] stop
				 */

				/**
				 * [tS3Put_1 end ] start
				 */

				currentComponent = "tS3Put_1";

				ok_Hash.put("tS3Put_1", true);
				end_Hash.put("tS3Put_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBBulkExec_1Process(globalMap);

				/**
				 * [tS3Put_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_1 finally ] start
				 */

				currentComponent = "tS3Put_1";

				/**
				 * [tS3Put_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBBulkExec_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_1 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_1", false);
				start_Hash.put("tDBBulkExec_1", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_1";

				int tos_count_tDBBulkExec_1 = 0;

				class BytesLimit65535_tDBBulkExec_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBBulkExec_1().limitLog4jByte();

				String dbschema_tDBBulkExec_1 = null;

				dbschema_tDBBulkExec_1 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBBulkExec_1 = "order_shipping";
				String tableName2_tDBBulkExec_1 = tableName_tDBBulkExec_1;
				boolean isTempTable_tDBBulkExec_1 = tableName_tDBBulkExec_1 != null
						&& tableName_tDBBulkExec_1.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_1) {
					tableName2_tDBBulkExec_1 = "\"" + tableName2_tDBBulkExec_1
							+ "\"";
				} else if (dbschema_tDBBulkExec_1 == null
						|| dbschema_tDBBulkExec_1.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_1 = dbschema_tDBBulkExec_1 + "\".\""
							+ tableName_tDBBulkExec_1;
					tableName2_tDBBulkExec_1 = dbschema_tDBBulkExec_1 + "."
							+ tableName2_tDBBulkExec_1;
				}

				java.sql.Connection conn_tDBBulkExec_1 = null;
				conn_tDBBulkExec_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBBulkExec_1 = conn_tDBBulkExec_1
						.getMetaData();
				java.sql.ResultSet rsTable_tDBBulkExec_1 = dbMetaData_tDBBulkExec_1
						.getTables(null, dbschema_tDBBulkExec_1, null,
								new String[] { "TABLE" });
				boolean whetherExist_tDBBulkExec_1 = false;
				while (rsTable_tDBBulkExec_1.next()) {
					if (rsTable_tDBBulkExec_1.getString("TABLE_NAME")
							.equalsIgnoreCase("order_shipping")) {
						whetherExist_tDBBulkExec_1 = true;
						break;
					}
				}
				rsTable_tDBBulkExec_1.close();
				if (whetherExist_tDBBulkExec_1) {
					java.sql.Statement stmtDrop_tDBBulkExec_1 = conn_tDBBulkExec_1
							.createStatement();

					stmtDrop_tDBBulkExec_1.execute("DROP TABLE \""
							+ tableName_tDBBulkExec_1 + "\"");

					stmtDrop_tDBBulkExec_1.close();
				}
				java.sql.Statement stmtCreate_tDBBulkExec_1 = conn_tDBBulkExec_1
						.createStatement();

				stmtCreate_tDBBulkExec_1
						.execute("CREATE TABLE \""
								+ tableName_tDBBulkExec_1
								+ "\"(\"id\" BIGINT ,\"order_id\" BIGINT ,\"title\" VARCHAR(200)  ,\"code\" VARCHAR(200)  )");

				stmtCreate_tDBBulkExec_1.close();

				// in mysql when autoCommit=true don't commit.
				if (!conn_tDBBulkExec_1.getAutoCommit()) {
					conn_tDBBulkExec_1.commit();
				}

				StringBuilder command_tDBBulkExec_1 = new StringBuilder();
				char fieldSeparator_tDBBulkExec_1 = String.valueOf(',').charAt(
						0);
				char textEnclosure_tDBBulkExec_1 = '\0';

				command_tDBBulkExec_1.append("COPY ")
						.append(tableName2_tDBBulkExec_1)

						.append(" (").append("id").append(",")
						.append("order_id").append(",").append("title")
						.append(",").append("code").append(")")
						.append(" FROM '");

				final String decryptedPwd_tDBBulkExec_1 = context.secretkey;

				command_tDBBulkExec_1.append("s3://").append("tj-redshift-edw")
						.append("/").append("EDW_RW/ordershipping.csv")
						.append("' ")

						.append("credentials 'aws_access_key_id=")
						.append(context.accesskey)
						.append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_1).append("' ")
						.append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_1).append("' ");
				if (textEnclosure_tDBBulkExec_1 != '\0') {
					command_tDBBulkExec_1.append("CSV QUOTE '")
							.append(textEnclosure_tDBBulkExec_1).append("' ");
				}
				command_tDBBulkExec_1.append("ENCODING ").append("UTF8")
						.append(" ");

				java.sql.Statement stmt_tDBBulkExec_1 = conn_tDBBulkExec_1
						.createStatement();
				stmt_tDBBulkExec_1.execute(command_tDBBulkExec_1.toString());

				/**
				 * [tDBBulkExec_1 begin ] stop
				 */

				/**
				 * [tDBBulkExec_1 main ] start
				 */

				currentComponent = "tDBBulkExec_1";

				tos_count_tDBBulkExec_1++;

				/**
				 * [tDBBulkExec_1 main ] stop
				 */

				/**
				 * [tDBBulkExec_1 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_1 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_1 end ] start
				 */

				currentComponent = "tDBBulkExec_1";

				ok_Hash.put("tDBBulkExec_1", true);
				end_Hash.put("tDBBulkExec_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBBulkExec_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_1 finally ] start
				 */

				currentComponent = "tDBBulkExec_1";

				/**
				 * [tDBBulkExec_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				class BytesLimit65535_tDBCommit_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_1().limitLog4jByte();

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					conn_tDBCommit_1.commit();

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBRow_1Process(globalMap);

				/**
				 * [tDBCommit_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				class BytesLimit65535_tDBRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_1().limitLog4jByte();

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1
						.createStatement();

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				query_tDBRow_1 = "update public.orders_fulfillment_status_update\nset title = os.title, \ncode = os.code \nFROM public.order_shipping os\nwhe"
						+ "re public.orders_fulfillment_status_update.order_id = os.order_id;"

				;
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBCommit_2Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_2 begin ] start
				 */

				ok_Hash.put("tDBCommit_2", false);
				start_Hash.put("tDBCommit_2", System.currentTimeMillis());

				currentComponent = "tDBCommit_2";

				int tos_count_tDBCommit_2 = 0;

				class BytesLimit65535_tDBCommit_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_2().limitLog4jByte();

				/**
				 * [tDBCommit_2 begin ] stop
				 */

				/**
				 * [tDBCommit_2 main ] start
				 */

				currentComponent = "tDBCommit_2";

				java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed()) {

					conn_tDBCommit_2.commit();

				}

				tos_count_tDBCommit_2++;

				/**
				 * [tDBCommit_2 main ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_end ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_2 end ] start
				 */

				currentComponent = "tDBCommit_2";

				ok_Hash.put("tDBCommit_2", true);
				end_Hash.put("tDBCommit_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tDBInput_4Process(globalMap);

				/**
				 * [tDBCommit_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_2 finally ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long max;

		public Long getMax() {
			return this.max;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.max = null;
					} else {
						this.max = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.max == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.max);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("max=" + String.valueOf(max));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				class BytesLimit65535_tJavaRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_2().limitLog4jByte();

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				class BytesLimit65535_tDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_4().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "select max(id) as max from shopify_staging.orders_shipping_lines";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.max = null;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row4.max = rs_tDBInput_4.getLong(1);
							} else {
								row4.max = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.max = row4.max;

						globalMap.put("max", row4.max);

						System.out.println("max:" + globalMap.get("max"));
						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					stmt_tDBInput_4.close();
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tDBRow_4Process(globalMap);

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_4 begin ] start
				 */

				ok_Hash.put("tDBRow_4", false);
				start_Hash.put("tDBRow_4", System.currentTimeMillis());

				currentComponent = "tDBRow_4";

				int tos_count_tDBRow_4 = 0;

				class BytesLimit65535_tDBRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_4().limitLog4jByte();

				java.sql.Connection conn_tDBRow_4 = null;
				String query_tDBRow_4 = "";
				boolean whetherReject_tDBRow_4 = false;
				conn_tDBRow_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4
						.createStatement();

				/**
				 * [tDBRow_4 begin ] stop
				 */

				/**
				 * [tDBRow_4 main ] start
				 */

				currentComponent = "tDBRow_4";

				query_tDBRow_4 = "update process_logs\nset process_state = 'Completed', end_time = CURRENT_TIMESTAMP ,\nLast_id = "
						+ context.max
						+ "\nwhere process_name = 'fact_orders_fulfillment_status_updation_by_shipping' and process_state = 'Running';";
				whetherReject_tDBRow_4 = false;
				globalMap.put("tDBRow_4_QUERY", query_tDBRow_4);
				try {
					stmt_tDBRow_4.execute(query_tDBRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_4 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_4) {

				}

				tos_count_tDBRow_4++;

				/**
				 * [tDBRow_4 main ] stop
				 */

				/**
				 * [tDBRow_4 process_data_begin ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_4 process_data_end ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 process_data_end ] stop
				 */

				/**
				 * [tDBRow_4 end ] start
				 */

				currentComponent = "tDBRow_4";

				stmt_tDBRow_4.close();

				ok_Hash.put("tDBRow_4", true);
				end_Hash.put("tDBRow_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tDBCommit_6Process(globalMap);

				/**
				 * [tDBRow_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_4 finally ] start
				 */

				currentComponent = "tDBRow_4";

				/**
				 * [tDBRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_4_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_6 begin ] start
				 */

				ok_Hash.put("tDBCommit_6", false);
				start_Hash.put("tDBCommit_6", System.currentTimeMillis());

				currentComponent = "tDBCommit_6";

				int tos_count_tDBCommit_6 = 0;

				class BytesLimit65535_tDBCommit_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_6().limitLog4jByte();

				/**
				 * [tDBCommit_6 begin ] stop
				 */

				/**
				 * [tDBCommit_6 main ] start
				 */

				currentComponent = "tDBCommit_6";

				java.sql.Connection conn_tDBCommit_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_6 != null && !conn_tDBCommit_6.isClosed()) {

					conn_tDBCommit_6.commit();

				}

				tos_count_tDBCommit_6++;

				/**
				 * [tDBCommit_6 main ] stop
				 */

				/**
				 * [tDBCommit_6 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_6";

				/**
				 * [tDBCommit_6 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_6 process_data_end ] start
				 */

				currentComponent = "tDBCommit_6";

				/**
				 * [tDBCommit_6 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_6 end ] start
				 */

				currentComponent = "tDBCommit_6";

				ok_Hash.put("tDBCommit_6", true);
				end_Hash.put("tDBCommit_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tDBInput_5Process(globalMap);

				/**
				 * [tDBCommit_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_6 finally ] start
				 */

				currentComponent = "tDBCommit_6";

				/**
				 * [tDBCommit_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_6_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Integer counts;

		public Integer getCounts() {
			return this.counts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					this.counts = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.counts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("counts=" + String.valueOf(counts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				class BytesLimit65535_tJavaRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_3().limitLog4jByte();

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				class BytesLimit65535_tDBInput_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_5().limitLog4jByte();

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "select count(1) as counts from process_logs where process_state = 'Running' and process_name = 'fact_orders_fulfillment"
						+ "_status_updation_by_ams'";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.counts = null;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row5.counts = rs_tDBInput_5.getInt(1);
							} else {
								row5.counts = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row5.id * 2;
						//
						// lowercase the name
						// output_row.name = row5.name.toLowerCase();

						globalMap.put("counts", row5.counts);

						System.out.println("count:" + globalMap.get("counts"));

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_end ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					stmt_tDBInput_5.close();

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if (((Integer) globalMap.get("counts")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "true");
					}

					tDBRow_5Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "false");
					}
				}

				/**
				 * [tJavaRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_5 begin ] start
				 */

				ok_Hash.put("tDBRow_5", false);
				start_Hash.put("tDBRow_5", System.currentTimeMillis());

				currentComponent = "tDBRow_5";

				int tos_count_tDBRow_5 = 0;

				class BytesLimit65535_tDBRow_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_5().limitLog4jByte();

				java.sql.Connection conn_tDBRow_5 = null;
				String query_tDBRow_5 = "";
				boolean whetherReject_tDBRow_5 = false;
				conn_tDBRow_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_5 = conn_tDBRow_5
						.createStatement();

				/**
				 * [tDBRow_5 begin ] stop
				 */

				/**
				 * [tDBRow_5 main ] start
				 */

				currentComponent = "tDBRow_5";

				query_tDBRow_5 = "insert into process_logs (process_name, start_time, process_state) values ('fact_orders_fulfillment_status_updation_by_"
						+ "ams',current_timestamp,'Running')";
				whetherReject_tDBRow_5 = false;
				globalMap.put("tDBRow_5_QUERY", query_tDBRow_5);
				try {
					stmt_tDBRow_5.execute(query_tDBRow_5);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_5 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_5) {

				}

				tos_count_tDBRow_5++;

				/**
				 * [tDBRow_5 main ] stop
				 */

				/**
				 * [tDBRow_5 process_data_begin ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_5 process_data_end ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 process_data_end ] stop
				 */

				/**
				 * [tDBRow_5 end ] start
				 */

				currentComponent = "tDBRow_5";

				stmt_tDBRow_5.close();

				ok_Hash.put("tDBRow_5", true);
				end_Hash.put("tDBRow_5", System.currentTimeMillis());

				/**
				 * [tDBRow_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tDBRow_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBCommit_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_5 finally ] start
				 */

				currentComponent = "tDBRow_5";

				/**
				 * [tDBRow_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_5_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_7 begin ] start
				 */

				ok_Hash.put("tDBCommit_7", false);
				start_Hash.put("tDBCommit_7", System.currentTimeMillis());

				currentComponent = "tDBCommit_7";

				int tos_count_tDBCommit_7 = 0;

				class BytesLimit65535_tDBCommit_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_7().limitLog4jByte();

				/**
				 * [tDBCommit_7 begin ] stop
				 */

				/**
				 * [tDBCommit_7 main ] start
				 */

				currentComponent = "tDBCommit_7";

				java.sql.Connection conn_tDBCommit_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_7 != null && !conn_tDBCommit_7.isClosed()) {

					conn_tDBCommit_7.commit();

				}

				tos_count_tDBCommit_7++;

				/**
				 * [tDBCommit_7 main ] stop
				 */

				/**
				 * [tDBCommit_7 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_7";

				/**
				 * [tDBCommit_7 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_7 process_data_end ] start
				 */

				currentComponent = "tDBCommit_7";

				/**
				 * [tDBCommit_7 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_7 end ] start
				 */

				currentComponent = "tDBCommit_7";

				ok_Hash.put("tDBCommit_7", true);
				end_Hash.put("tDBCommit_7", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tDBInput_8Process(globalMap);

				/**
				 * [tDBCommit_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_7 finally ] start
				 */

				currentComponent = "tDBCommit_7";

				/**
				 * [tDBCommit_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long idds;

		public Long getIdds() {
			return this.idds;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.idds = null;
					} else {
						this.idds = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.idds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.idds);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idds=" + String.valueOf(idds));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_6 = 0;

				class BytesLimit65535_tJavaRow_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_6().limitLog4jByte();

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				class BytesLimit65535_tDBInput_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_8().limitLog4jByte();

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();

				String dbquery_tDBInput_8 = "select coalesce(max(last_id),0) as idds from process_logs where process_name = 'fact_orders_fulfillment_status_updation"
						+ "_by_ams' and process_state = 'Completed';";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.idds = null;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row8.idds = rs_tDBInput_8.getLong(1);
							} else {
								row8.idds = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_6 main ] start
						 */

						currentComponent = "tJavaRow_6";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.idds = row8.idds;

						nb_line_tJavaRow_6++;

						tos_count_tJavaRow_6++;

						/**
						 * [tJavaRow_6 main ] stop
						 */

						/**
						 * [tJavaRow_6 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_6";

						/**
						 * [tJavaRow_6 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_6 process_data_end ] start
						 */

						currentComponent = "tJavaRow_6";

						/**
						 * [tJavaRow_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					stmt_tDBInput_8.close();

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk29", 0, "ok");
				}
				tDBInput_9Process(globalMap);

				/**
				 * [tJavaRow_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public String sh_order_id;

		public String getSh_order_id() {
			return this.sh_order_id;
		}

		public String generated_ftp_file_name;

		public String getGenerated_ftp_file_name() {
			return this.generated_ftp_file_name;
		}

		public String consolidated_file_name;

		public String getConsolidated_file_name() {
			return this.consolidated_file_name;
		}

		public java.util.Date updated_at;

		public java.util.Date getUpdated_at() {
			return this.updated_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					this.sh_order_id = readString(dis);

					this.generated_ftp_file_name = readString(dis);

					this.consolidated_file_name = readString(dis);

					this.updated_at = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sh_order_id, dos);

				// String

				writeString(this.generated_ftp_file_name, dos);

				// String

				writeString(this.consolidated_file_name, dos);

				// java.util.Date

				writeDate(this.updated_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sh_order_id=" + sh_order_id);
			sb.append(",generated_ftp_file_name=" + generated_ftp_file_name);
			sb.append(",consolidated_file_name=" + consolidated_file_name);
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				class BytesLimit65535_tFileOutputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"/tmp/orderams.csv")).getAbsolutePath().replace("\\",
						"/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				class BytesLimit65535_tDBInput_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_9().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_9 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_9.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_9 = calendar_tDBInput_9.getTime();
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();

				String dbquery_tDBInput_9 = "select distinct fl.sh_order_id, l.generated_ftp_file_name, l.consolidated_file_name, l.updated_at\nfrom mw_integration.a"
						+ "ms_ftp_process_log l join mw_integration.ams_ftp_ledger fl\non l.generated_ftp_file_name = fl.csv_name\nwhere l.id > "
						+ context.idds + " order by l.id";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row2.sh_order_id = null;
						} else {

							row2.sh_order_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 1, false);
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row2.generated_ftp_file_name = null;
						} else {

							row2.generated_ftp_file_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 2, false);
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row2.consolidated_file_name = null;
						} else {

							row2.consolidated_file_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 3, false);
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row2.updated_at = null;
						} else {

							if (rs_tDBInput_9.getString(4) != null) {
								String dateString_tDBInput_9 = rs_tDBInput_9
										.getString(4);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_9)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_9)) {
									row2.updated_at = rs_tDBInput_9
											.getTimestamp(4);
								} else {
									row2.updated_at = (java.util.Date) year0_tDBInput_9
											.clone();
								}
							} else {
								row2.updated_at = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row2.sh_order_id != null) {
							sb_tFileOutputDelimited_2.append(row2.sh_order_id);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.generated_ftp_file_name != null) {
							sb_tFileOutputDelimited_2
									.append(row2.generated_ftp_file_name);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.consolidated_file_name != null) {
							sb_tFileOutputDelimited_2
									.append(row2.consolidated_file_name);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.updated_at != null) {
							sb_tFileOutputDelimited_2.append(FormatterUtils
									.format_Date(row2.updated_at,
											"yyyy-MM-dd HH:mm:ss"));
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2",
								nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2
								.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					stmt_tDBInput_9.close();
				}

				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tS3Put_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Put_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_2 begin ] start
				 */

				ok_Hash.put("tS3Put_2", false);
				start_Hash.put("tS3Put_2", System.currentTimeMillis());

				currentComponent = "tS3Put_2";

				int tos_count_tS3Put_2 = 0;

				class BytesLimit65535_tS3Put_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Put_2().limitLog4jByte();

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_2 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_2 = "EDW_RW/orderams.csv";

				int partSizeInBytes_tS3Put_2 = 5 * 1024 * 1024;

				Object fileOrStream_tS3Put_2 = "/tmp/orderams.csv";

				boolean useStream_tS3Put_2 = false;
				java.io.InputStream uploadStream_tS3Put_2 = null;

				try {

					if (fileOrStream_tS3Put_2 instanceof String) {
						useStream_tS3Put_2 = false;
					} else if (fileOrStream_tS3Put_2 instanceof java.io.InputStream) {
						useStream_tS3Put_2 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_2 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_2) {
						java.io.File inputFile_tS3Put_2 = new java.io.File(
								(String) fileOrStream_tS3Put_2);

						long multipart_upload_threshold_tS3Put_2 = 5 * 1024 * 1024;

						com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_2 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
								.standard()
								.withMinimumUploadPartSize(
										(long) partSizeInBytes_tS3Put_2)
								.withMultipartUploadThreshold(
										multipart_upload_threshold_tS3Put_2)
								.withS3Client(conn_tS3Put_2).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"tj-redshift-edw", key_tS3Put_2,
								inputFile_tS3Put_2)
								.withMetadata(objectMetadata_tS3Put_2);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_2 = tm_tS3Put_2
								.upload(putRequest_tS3Put_2);

						upload_tS3Put_2.waitForCompletion();
					} else {
						java.io.InputStream sourceStream_tS3Put_2 = ((java.io.InputStream) fileOrStream_tS3Put_2);

						class S3StreamUtil {
							public int getLength(byte[] output) {
								for (int i = output.length - 1; i > 0; i--) {
									if (output[i] != 0) {
										return i + 1;
									}
								}
								return 0;
							}
						}

						S3StreamUtil streamUtil_tS3Put_2 = new S3StreamUtil();
						byte[] buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
						sourceStream_tS3Put_2.read(buffer_tS3Put_2);
						long curPartSize_tS3Put_2 = streamUtil_tS3Put_2
								.getLength(buffer_tS3Put_2);
						boolean multiUpload_tS3Put_2 = curPartSize_tS3Put_2 == partSizeInBytes_tS3Put_2;

						if (!multiUpload_tS3Put_2) {
							objectMetadata_tS3Put_2
									.setContentLength(curPartSize_tS3Put_2);
							uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_2, 0, Long.valueOf(
											curPartSize_tS3Put_2).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"tj-redshift-edw", key_tS3Put_2,
									uploadStream_tS3Put_2,
									objectMetadata_tS3Put_2);

							conn_tS3Put_2.putObject(putRequest_tS3Put_2);
						} else {
							uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_2);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_2 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"tj-redshift-edw", key_tS3Put_2,
									objectMetadata_tS3Put_2);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_2 = conn_tS3Put_2
									.initiateMultipartUpload(putRequest_tS3Put_2);
							String uploadId_tS3Put_2 = initResponse_tS3Put_2
									.getUploadId();
							int partNumber_tS3Put_2 = 1;
							boolean streamHasNext_tS3Put_2 = true;
							byte[] probeAvailability_tS3Put_2 = new byte[1];
							try {
								while (streamHasNext_tS3Put_2) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_2 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("tj-redshift-edw")
											.withKey(key_tS3Put_2)
											.withUploadId(uploadId_tS3Put_2)
											.withPartNumber(partNumber_tS3Put_2)
											.withPartSize(curPartSize_tS3Put_2);
									uploadRequest_tS3Put_2
											.setInputStream(uploadStream_tS3Put_2);
									streamHasNext_tS3Put_2 = sourceStream_tS3Put_2
											.read(probeAvailability_tS3Put_2) != -1;
									if (!streamHasNext_tS3Put_2) {
										uploadRequest_tS3Put_2
												.setLastPart(true);
									}

									partTags_tS3Put_2.add(conn_tS3Put_2
											.uploadPart(uploadRequest_tS3Put_2)
											.getPartETag());
									partNumber_tS3Put_2++;

									if (uploadStream_tS3Put_2 != null) {
										uploadStream_tS3Put_2.close();
									}
									buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
									sourceStream_tS3Put_2.read(buffer_tS3Put_2,
											1, partSizeInBytes_tS3Put_2 - 1);
									buffer_tS3Put_2[0] = probeAvailability_tS3Put_2[0];
									probeAvailability_tS3Put_2 = new byte[1];
									curPartSize_tS3Put_2 = streamUtil_tS3Put_2
											.getLength(buffer_tS3Put_2);
									uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(
											buffer_tS3Put_2);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_2 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"tj-redshift-edw", key_tS3Put_2,
										uploadId_tS3Put_2, partTags_tS3Put_2);
								conn_tS3Put_2
										.completeMultipartUpload(compRequest_tS3Put_2);
							} catch (java.lang.Exception uploadException_tS3Put_2) {
								conn_tS3Put_2
										.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"tj-redshift-edw",
												key_tS3Put_2, uploadId_tS3Put_2));
								throw uploadException_tS3Put_2;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_2) {

					System.err.println(e_tS3Put_2.getMessage());

				} finally {
					if (useStream_tS3Put_2 && uploadStream_tS3Put_2 != null) {
						uploadStream_tS3Put_2.close();
					}

				}

				/**
				 * [tS3Put_2 begin ] stop
				 */

				/**
				 * [tS3Put_2 main ] start
				 */

				currentComponent = "tS3Put_2";

				tos_count_tS3Put_2++;

				/**
				 * [tS3Put_2 main ] stop
				 */

				/**
				 * [tS3Put_2 process_data_begin ] start
				 */

				currentComponent = "tS3Put_2";

				/**
				 * [tS3Put_2 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_2 process_data_end ] start
				 */

				currentComponent = "tS3Put_2";

				/**
				 * [tS3Put_2 process_data_end ] stop
				 */

				/**
				 * [tS3Put_2 end ] start
				 */

				currentComponent = "tS3Put_2";

				ok_Hash.put("tS3Put_2", true);
				end_Hash.put("tS3Put_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBBulkExec_2Process(globalMap);

				/**
				 * [tS3Put_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_2 finally ] start
				 */

				currentComponent = "tS3Put_2";

				/**
				 * [tS3Put_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_2_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBBulkExec_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_2 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_2", false);
				start_Hash.put("tDBBulkExec_2", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_2";

				int tos_count_tDBBulkExec_2 = 0;

				class BytesLimit65535_tDBBulkExec_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBBulkExec_2().limitLog4jByte();

				String dbschema_tDBBulkExec_2 = null;

				dbschema_tDBBulkExec_2 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBBulkExec_2 = "order_ams";
				String tableName2_tDBBulkExec_2 = tableName_tDBBulkExec_2;
				boolean isTempTable_tDBBulkExec_2 = tableName_tDBBulkExec_2 != null
						&& tableName_tDBBulkExec_2.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_2) {
					tableName2_tDBBulkExec_2 = "\"" + tableName2_tDBBulkExec_2
							+ "\"";
				} else if (dbschema_tDBBulkExec_2 == null
						|| dbschema_tDBBulkExec_2.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_2 = dbschema_tDBBulkExec_2 + "\".\""
							+ tableName_tDBBulkExec_2;
					tableName2_tDBBulkExec_2 = dbschema_tDBBulkExec_2 + "."
							+ tableName2_tDBBulkExec_2;
				}

				java.sql.Connection conn_tDBBulkExec_2 = null;
				conn_tDBBulkExec_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBBulkExec_2 = conn_tDBBulkExec_2
						.getMetaData();
				java.sql.ResultSet rsTable_tDBBulkExec_2 = dbMetaData_tDBBulkExec_2
						.getTables(null, dbschema_tDBBulkExec_2, null,
								new String[] { "TABLE" });
				boolean whetherExist_tDBBulkExec_2 = false;
				while (rsTable_tDBBulkExec_2.next()) {
					if (rsTable_tDBBulkExec_2.getString("TABLE_NAME")
							.equalsIgnoreCase("order_ams")) {
						whetherExist_tDBBulkExec_2 = true;
						break;
					}
				}
				rsTable_tDBBulkExec_2.close();
				if (whetherExist_tDBBulkExec_2) {
					java.sql.Statement stmtDrop_tDBBulkExec_2 = conn_tDBBulkExec_2
							.createStatement();

					stmtDrop_tDBBulkExec_2.execute("DROP TABLE \""
							+ tableName_tDBBulkExec_2 + "\"");

					stmtDrop_tDBBulkExec_2.close();
				}
				java.sql.Statement stmtCreate_tDBBulkExec_2 = conn_tDBBulkExec_2
						.createStatement();

				stmtCreate_tDBBulkExec_2
						.execute("CREATE TABLE \""
								+ tableName_tDBBulkExec_2
								+ "\"(\"sh_order_id\" VARCHAR(200)  ,\"generated_ftp_file_name\" VARCHAR(200)  ,\"consolidated_file_name\" VARCHAR(200)  ,\"ams_updated_at\" TIMESTAMP )");

				stmtCreate_tDBBulkExec_2.close();

				// in mysql when autoCommit=true don't commit.
				if (!conn_tDBBulkExec_2.getAutoCommit()) {
					conn_tDBBulkExec_2.commit();
				}

				StringBuilder command_tDBBulkExec_2 = new StringBuilder();
				char fieldSeparator_tDBBulkExec_2 = String.valueOf(',').charAt(
						0);
				char textEnclosure_tDBBulkExec_2 = '\0';

				command_tDBBulkExec_2.append("COPY ")
						.append(tableName2_tDBBulkExec_2)

						.append(" (").append("sh_order_id").append(",")
						.append("generated_ftp_file_name").append(",")
						.append("consolidated_file_name").append(",")
						.append("ams_updated_at").append(")").append(" FROM '");

				final String decryptedPwd_tDBBulkExec_2 = context.secretkey;

				command_tDBBulkExec_2.append("s3://").append("tj-redshift-edw")
						.append("/").append("EDW_RW/orderams.csv").append("' ")

						.append("credentials 'aws_access_key_id=")
						.append(context.accesskey)
						.append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_2).append("' ")
						.append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_2).append("' ");
				if (textEnclosure_tDBBulkExec_2 != '\0') {
					command_tDBBulkExec_2.append("CSV QUOTE '")
							.append(textEnclosure_tDBBulkExec_2).append("' ");
				}
				command_tDBBulkExec_2.append("ENCODING ").append("UTF8")
						.append(" ");

				java.sql.Statement stmt_tDBBulkExec_2 = conn_tDBBulkExec_2
						.createStatement();
				stmt_tDBBulkExec_2.execute(command_tDBBulkExec_2.toString());

				/**
				 * [tDBBulkExec_2 begin ] stop
				 */

				/**
				 * [tDBBulkExec_2 main ] start
				 */

				currentComponent = "tDBBulkExec_2";

				tos_count_tDBBulkExec_2++;

				/**
				 * [tDBBulkExec_2 main ] stop
				 */

				/**
				 * [tDBBulkExec_2 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_2 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_2 end ] start
				 */

				currentComponent = "tDBBulkExec_2";

				ok_Hash.put("tDBBulkExec_2", true);
				end_Hash.put("tDBBulkExec_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tDBCommit_3Process(globalMap);

				/**
				 * [tDBBulkExec_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_2 finally ] start
				 */

				currentComponent = "tDBBulkExec_2";

				/**
				 * [tDBBulkExec_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_2_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_3 begin ] start
				 */

				ok_Hash.put("tDBCommit_3", false);
				start_Hash.put("tDBCommit_3", System.currentTimeMillis());

				currentComponent = "tDBCommit_3";

				int tos_count_tDBCommit_3 = 0;

				class BytesLimit65535_tDBCommit_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_3().limitLog4jByte();

				/**
				 * [tDBCommit_3 begin ] stop
				 */

				/**
				 * [tDBCommit_3 main ] start
				 */

				currentComponent = "tDBCommit_3";

				java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed()) {

					conn_tDBCommit_3.commit();

				}

				tos_count_tDBCommit_3++;

				/**
				 * [tDBCommit_3 main ] stop
				 */

				/**
				 * [tDBCommit_3 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_3 process_data_end ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_3 end ] start
				 */

				currentComponent = "tDBCommit_3";

				ok_Hash.put("tDBCommit_3", true);
				end_Hash.put("tDBCommit_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tDBRow_2Process(globalMap);

				/**
				 * [tDBCommit_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_3 finally ] start
				 */

				currentComponent = "tDBCommit_3";

				/**
				 * [tDBCommit_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				class BytesLimit65535_tDBRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_2().limitLog4jByte();

				java.sql.Connection conn_tDBRow_2 = null;
				String query_tDBRow_2 = "";
				boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2
						.createStatement();

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				query_tDBRow_2 = "update public.orders_fulfillment_status_update\nset consolidated_file_name = a.consolidated_file_name, \nams_updated_at ="
						+ " a.ams_updated_at\nFROM public.order_ams a\nwhere public.orders_fulfillment_status_update.order_name= a.sh_order_id;"

				;
				whetherReject_tDBRow_2 = false;
				globalMap.put("tDBRow_2_QUERY", query_tDBRow_2);
				try {
					stmt_tDBRow_2.execute(query_tDBRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_2 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_2) {

				}

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

				stmt_tDBRow_2.close();

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tDBCommit_4Process(globalMap);

				/**
				 * [tDBRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_4 begin ] start
				 */

				ok_Hash.put("tDBCommit_4", false);
				start_Hash.put("tDBCommit_4", System.currentTimeMillis());

				currentComponent = "tDBCommit_4";

				int tos_count_tDBCommit_4 = 0;

				class BytesLimit65535_tDBCommit_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_4().limitLog4jByte();

				/**
				 * [tDBCommit_4 begin ] stop
				 */

				/**
				 * [tDBCommit_4 main ] start
				 */

				currentComponent = "tDBCommit_4";

				java.sql.Connection conn_tDBCommit_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_4 != null && !conn_tDBCommit_4.isClosed()) {

					conn_tDBCommit_4.commit();

				}

				tos_count_tDBCommit_4++;

				/**
				 * [tDBCommit_4 main ] stop
				 */

				/**
				 * [tDBCommit_4 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_4";

				/**
				 * [tDBCommit_4 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_4 process_data_end ] start
				 */

				currentComponent = "tDBCommit_4";

				/**
				 * [tDBCommit_4 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_4 end ] start
				 */

				currentComponent = "tDBCommit_4";

				ok_Hash.put("tDBCommit_4", true);
				end_Hash.put("tDBCommit_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBCommit_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_4 finally ] start
				 */

				currentComponent = "tDBCommit_4";

				/**
				 * [tDBCommit_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long maxid;

		public Long getMaxid() {
			return this.maxid;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.maxid = null;
					} else {
						this.maxid = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.maxid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.maxid);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("maxid=" + String.valueOf(maxid));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_4 = 0;

				class BytesLimit65535_tJavaRow_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_4().limitLog4jByte();

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				class BytesLimit65535_tDBInput_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_6().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "select max(id) as maxid from mw_integration.ams_ftp_process_log";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.maxid = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row6.maxid = rs_tDBInput_6.getLong(1);
							} else {
								row6.maxid = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.maxid = row6.maxid;

						globalMap.put("maxid", row6.maxid);

						System.out.println("max:" + globalMap.get("maxid"));
						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_end ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					stmt_tDBInput_6.close();
				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tDBRow_6Process(globalMap);

				/**
				 * [tJavaRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_6 begin ] start
				 */

				ok_Hash.put("tDBRow_6", false);
				start_Hash.put("tDBRow_6", System.currentTimeMillis());

				currentComponent = "tDBRow_6";

				int tos_count_tDBRow_6 = 0;

				class BytesLimit65535_tDBRow_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_6().limitLog4jByte();

				java.sql.Connection conn_tDBRow_6 = null;
				String query_tDBRow_6 = "";
				boolean whetherReject_tDBRow_6 = false;
				conn_tDBRow_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_6 = conn_tDBRow_6
						.createStatement();

				/**
				 * [tDBRow_6 begin ] stop
				 */

				/**
				 * [tDBRow_6 main ] start
				 */

				currentComponent = "tDBRow_6";

				query_tDBRow_6 = "update process_logs\nset process_state = 'Completed', end_time = CURRENT_TIMESTAMP,\nLast_id = "
						+ context.maxid
						+ "\nwhere process_name = 'fact_orders_fulfillment_status_updation_by_ams' and process_state = 'Running';";
				whetherReject_tDBRow_6 = false;
				globalMap.put("tDBRow_6_QUERY", query_tDBRow_6);
				try {
					stmt_tDBRow_6.execute(query_tDBRow_6);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_6 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_6) {

				}

				tos_count_tDBRow_6++;

				/**
				 * [tDBRow_6 main ] stop
				 */

				/**
				 * [tDBRow_6 process_data_begin ] start
				 */

				currentComponent = "tDBRow_6";

				/**
				 * [tDBRow_6 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_6 process_data_end ] start
				 */

				currentComponent = "tDBRow_6";

				/**
				 * [tDBRow_6 process_data_end ] stop
				 */

				/**
				 * [tDBRow_6 end ] start
				 */

				currentComponent = "tDBRow_6";

				stmt_tDBRow_6.close();

				ok_Hash.put("tDBRow_6", true);
				end_Hash.put("tDBRow_6", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tDBCommit_8Process(globalMap);

				/**
				 * [tDBRow_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_6 finally ] start
				 */

				currentComponent = "tDBRow_6";

				/**
				 * [tDBRow_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_6_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_8 begin ] start
				 */

				ok_Hash.put("tDBCommit_8", false);
				start_Hash.put("tDBCommit_8", System.currentTimeMillis());

				currentComponent = "tDBCommit_8";

				int tos_count_tDBCommit_8 = 0;

				class BytesLimit65535_tDBCommit_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_8().limitLog4jByte();

				/**
				 * [tDBCommit_8 begin ] stop
				 */

				/**
				 * [tDBCommit_8 main ] start
				 */

				currentComponent = "tDBCommit_8";

				java.sql.Connection conn_tDBCommit_8 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_8 != null && !conn_tDBCommit_8.isClosed()) {

					conn_tDBCommit_8.commit();

				}

				tos_count_tDBCommit_8++;

				/**
				 * [tDBCommit_8 main ] stop
				 */

				/**
				 * [tDBCommit_8 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_8";

				/**
				 * [tDBCommit_8 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_8 process_data_end ] start
				 */

				currentComponent = "tDBCommit_8";

				/**
				 * [tDBCommit_8 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_8 end ] start
				 */

				currentComponent = "tDBCommit_8";

				ok_Hash.put("tDBCommit_8", true);
				end_Hash.put("tDBCommit_8", System.currentTimeMillis());

				/**
				 * [tDBCommit_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_8 finally ] start
				 */

				currentComponent = "tDBCommit_8";

				/**
				 * [tDBCommit_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final fact_orders_fulfillment_status_updation1 fact_orders_fulfillment_status_updation1Class = new fact_orders_fulfillment_status_updation1();

		int exitCode = fact_orders_fulfillment_status_updation1Class
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = fact_orders_fulfillment_status_updation1.class
					.getClassLoader().getResourceAsStream(
							"edw_etl_aditya/fact_orders_fulfillment_status_updation1_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = fact_orders_fulfillment_status_updation1.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("Reddatabase", "id_String");

			context.Reddatabase = (String) context.getProperty("Reddatabase");
			context.setContextType("Redhost", "id_String");

			context.Redhost = (String) context.getProperty("Redhost");
			context.setContextType("Redpassword", "id_String");

			context.Redpassword = (String) context.getProperty("Redpassword");
			context.setContextType("Redport", "id_String");

			context.Redport = (String) context.getProperty("Redport");
			context.setContextType("Redusername", "id_String");

			context.Redusername = (String) context.getProperty("Redusername");
			context.setContextType("max", "id_Long");

			try {
				context.max = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("max"));
			} catch (NumberFormatException e) {
				context.max = null;
			}
			context.setContextType("maxid", "id_Long");

			try {
				context.maxid = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("maxid"));
			} catch (NumberFormatException e) {
				context.maxid = null;
			}
			context.setContextType("id", "id_Long");

			try {
				context.id = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("id"));
			} catch (NumberFormatException e) {
				context.id = null;
			}
			context.setContextType("idds", "id_Long");

			try {
				context.idds = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("idds"));
			} catch (NumberFormatException e) {
				context.idds = null;
			}
			context.setContextType("accesskey", "id_String");

			context.accesskey = (String) context.getProperty("accesskey");
			context.setContextType("Database", "id_String");

			context.Database = (String) context.getProperty("Database");
			context.setContextType("Host", "id_String");

			context.Host = (String) context.getProperty("Host");
			context.setContextType("Password", "id_String");

			context.Password = (String) context.getProperty("Password");
			context.setContextType("Port", "id_String");

			context.Port = (String) context.getProperty("Port");
			context.setContextType("secretkey", "id_Password");

			String pwd_secretkey_value = context.getProperty("secretkey");
			context.secretkey = null;
			if (pwd_secretkey_value != null) {
				if (context_param.containsKey("secretkey")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.secretkey = pwd_secretkey_value;
				} else if (!pwd_secretkey_value.isEmpty()) {
					try {
						context.secretkey = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_secretkey_value);
						context.put("secretkey", context.secretkey);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("Username", "id_String");

			context.Username = (String) context.getProperty("Username");
			context.setContextType("iddd", "id_Long");

			try {
				context.iddd = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("iddd"));
			} catch (NumberFormatException e) {
				context.iddd = null;
			}
			context.setContextType("maxidd", "id_Long");

			try {
				context.maxidd = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("maxidd"));
			} catch (NumberFormatException e) {
				context.maxidd = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("Reddatabase")) {
				context.Reddatabase = (String) parentContextMap
						.get("Reddatabase");
			}
			if (parentContextMap.containsKey("Redhost")) {
				context.Redhost = (String) parentContextMap.get("Redhost");
			}
			if (parentContextMap.containsKey("Redpassword")) {
				context.Redpassword = (String) parentContextMap
						.get("Redpassword");
			}
			if (parentContextMap.containsKey("Redport")) {
				context.Redport = (String) parentContextMap.get("Redport");
			}
			if (parentContextMap.containsKey("Redusername")) {
				context.Redusername = (String) parentContextMap
						.get("Redusername");
			}
			if (parentContextMap.containsKey("max")) {
				context.max = (Long) parentContextMap.get("max");
			}
			if (parentContextMap.containsKey("maxid")) {
				context.maxid = (Long) parentContextMap.get("maxid");
			}
			if (parentContextMap.containsKey("id")) {
				context.id = (Long) parentContextMap.get("id");
			}
			if (parentContextMap.containsKey("idds")) {
				context.idds = (Long) parentContextMap.get("idds");
			}
			if (parentContextMap.containsKey("accesskey")) {
				context.accesskey = (String) parentContextMap.get("accesskey");
			}
			if (parentContextMap.containsKey("Database")) {
				context.Database = (String) parentContextMap.get("Database");
			}
			if (parentContextMap.containsKey("Host")) {
				context.Host = (String) parentContextMap.get("Host");
			}
			if (parentContextMap.containsKey("Password")) {
				context.Password = (String) parentContextMap.get("Password");
			}
			if (parentContextMap.containsKey("Port")) {
				context.Port = (String) parentContextMap.get("Port");
			}
			if (parentContextMap.containsKey("secretkey")) {
				context.secretkey = (java.lang.String) parentContextMap
						.get("secretkey");
			}
			if (parentContextMap.containsKey("Username")) {
				context.Username = (String) parentContextMap.get("Username");
			}
			if (parentContextMap.containsKey("iddd")) {
				context.iddd = (Long) parentContextMap.get("iddd");
			}
			if (parentContextMap.containsKey("maxidd")) {
				context.maxidd = (Long) parentContextMap.get("maxidd");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("secretkey");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : fact_orders_fulfillment_status_updation1");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeS3Connections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2",
				globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_3",
				globalMap.get("conn_tDBConnection_3"));

		connections.put("conn_tS3Connection_1",
				globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 323250 characters generated by Talend Open Studio for Data Integration on the
 * 7 January, 2020 5:25:51 PM IST
 ************************************************************************************************/
