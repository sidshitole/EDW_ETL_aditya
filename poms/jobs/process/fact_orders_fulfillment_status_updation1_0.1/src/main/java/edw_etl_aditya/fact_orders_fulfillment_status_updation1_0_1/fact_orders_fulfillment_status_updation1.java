// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package edw_etl_aditya.fact_orders_fulfillment_status_updation1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: fact_orders_fulfillment_status_updation1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class fact_orders_fulfillment_status_updation1 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (maxid != null) {

				this.setProperty("maxid", maxid.toString());

			}

			if (id != null) {

				this.setProperty("id", id.toString());

			}

			if (idds != null) {

				this.setProperty("idds", idds.toString());

			}

			if (iddd != null) {

				this.setProperty("iddd", iddd.toString());

			}

			if (maxidd != null) {

				this.setProperty("maxidd", maxidd.toString());

			}

			if (accesskey != null) {

				this.setProperty("accesskey", accesskey.toString());

			}

			if (EDW_Database != null) {

				this.setProperty("EDW_Database", EDW_Database.toString());

			}

			if (EDW_Host != null) {

				this.setProperty("EDW_Host", EDW_Host.toString());

			}

			if (EDW_Password != null) {

				this.setProperty("EDW_Password", EDW_Password.toString());

			}

			if (EDW_Port != null) {

				this.setProperty("EDW_Port", EDW_Port.toString());

			}

			if (EDW_Schema != null) {

				this.setProperty("EDW_Schema", EDW_Schema.toString());

			}

			if (EDW_Username != null) {

				this.setProperty("EDW_Username", EDW_Username.toString());

			}

			if (secretkey != null) {

				this.setProperty("secretkey", secretkey.toString());

			}

			if (SH_Database != null) {

				this.setProperty("SH_Database", SH_Database.toString());

			}

			if (SH_Password != null) {

				this.setProperty("SH_Password", SH_Password.toString());

			}

			if (SH_Port != null) {

				this.setProperty("SH_Port", SH_Port.toString());

			}

			if (SH_RR_Host != null) {

				this.setProperty("SH_RR_Host", SH_RR_Host.toString());

			}

			if (SH_Username != null) {

				this.setProperty("SH_Username", SH_Username.toString());

			}

			if (max != null) {

				this.setProperty("max", max.toString());

			}

		}

		public Long maxid;

		public Long getMaxid() {
			return this.maxid;
		}

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long idds;

		public Long getIdds() {
			return this.idds;
		}

		public Long iddd;

		public Long getIddd() {
			return this.iddd;
		}

		public Long maxidd;

		public Long getMaxidd() {
			return this.maxidd;
		}

		public String accesskey;

		public String getAccesskey() {
			return this.accesskey;
		}

		public String EDW_Database;

		public String getEDW_Database() {
			return this.EDW_Database;
		}

		public String EDW_Host;

		public String getEDW_Host() {
			return this.EDW_Host;
		}

		public String EDW_Password;

		public String getEDW_Password() {
			return this.EDW_Password;
		}

		public String EDW_Port;

		public String getEDW_Port() {
			return this.EDW_Port;
		}

		public String EDW_Schema;

		public String getEDW_Schema() {
			return this.EDW_Schema;
		}

		public String EDW_Username;

		public String getEDW_Username() {
			return this.EDW_Username;
		}

		public java.lang.String secretkey;

		public java.lang.String getSecretkey() {
			return this.secretkey;
		}

		public String SH_Database;

		public String getSH_Database() {
			return this.SH_Database;
		}

		public String SH_Password;

		public String getSH_Password() {
			return this.SH_Password;
		}

		public String SH_Port;

		public String getSH_Port() {
			return this.SH_Port;
		}

		public String SH_RR_Host;

		public String getSH_RR_Host() {
			return this.SH_RR_Host;
		}

		public String SH_Username;

		public String getSH_Username() {
			return this.SH_Username;
		}

		public Long max;

		public Long getMax() {
			return this.max;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "fact_orders_fulfillment_status_updation1";
	private final String projectName = "EDW_ETL_ADITYA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					fact_orders_fulfillment_status_updation1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									fact_orders_fulfillment_status_updation1.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Put_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Put_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBBulkExec_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBBulkExec_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Put_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBBulkExec_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				class BytesLimit65535_tDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBClose_1().limitLog4jByte();

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://"
						+ context.SH_RR_Host + ":" + context.SH_Port + "/"
						+ context.SH_Database + "?"
						+ properties_tDBConnection_1;

				String dbUser_tDBConnection_1 = context.SH_Username;

				final String decryptedPassword_tDBConnection_1 = context.SH_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", context.SH_Database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				class BytesLimit65535_tDBConnection_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_2().limitLog4jByte();

				java.io.Writer output_tDBConnection_2 = new java.io.FileWriter(
						"/Users/masteradmin/Downloads/TOS_DI-20180411_1414-V7.0.1/workspace/redshift-jdbc.log",
						true);
				java.io.PrintWriter logWriter_tDBConnection_2 = new java.io.PrintWriter(
						output_tDBConnection_2, true);
				globalMap.put("logWriter_tDBConnection_2",
						logWriter_tDBConnection_2);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_2);
				StringBuilder sbuilder_tDBConnection_2 = new StringBuilder();
				sbuilder_tDBConnection_2.append("jdbc:redshift://")
						.append(context.EDW_Host).append(":")
						.append(context.EDW_Port).append("/")
						.append(context.EDW_Database).append("?loglevel=")
						.append(1);
				String url_tDBConnection_2 = sbuilder_tDBConnection_2
						.toString();

				String dbUser_tDBConnection_2 = context.EDW_Username;

				final String decryptedPassword_tDBConnection_2 = context.EDW_Password;
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.amazon.redshift.jdbc41.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(
						url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}
				globalMap.put("schema_" + "tDBConnection_2", "public");

				globalMap
						.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBConnection_3Process(globalMap);

				/**
				 * [tDBConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				class BytesLimit65535_tDBConnection_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_3().limitLog4jByte();

				java.io.Writer output_tDBConnection_3 = new java.io.FileWriter(
						"/Users/masteradmin/Downloads/TOS_DI-20180411_1414-V7.0.1/workspace/redshift-jdbc.log",
						true);
				java.io.PrintWriter logWriter_tDBConnection_3 = new java.io.PrintWriter(
						output_tDBConnection_3, true);
				globalMap.put("logWriter_tDBConnection_3",
						logWriter_tDBConnection_3);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_3);
				StringBuilder sbuilder_tDBConnection_3 = new StringBuilder();
				sbuilder_tDBConnection_3.append("jdbc:redshift://")
						.append(context.EDW_Host).append(":")
						.append(context.EDW_Port).append("/")
						.append(context.EDW_Database).append("?loglevel=")
						.append(1);
				String url_tDBConnection_3 = sbuilder_tDBConnection_3
						.toString();

				String dbUser_tDBConnection_3 = context.EDW_Username;

				final String decryptedPassword_tDBConnection_3 = context.EDW_Password;
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "com.amazon.redshift.jdbc41.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(
						url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(false);
				}
				globalMap.put("schema_" + "tDBConnection_3", "tj_dwh_prod");

				globalMap
						.put("conn_" + "tDBConnection_3", conn_tDBConnection_3);

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tS3Connection_1Process(globalMap);

				/**
				 * [tDBConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				class BytesLimit65535_tS3Connection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Connection_1().limitLog4jByte();

				final String decryptedPassword_tS3Connection_1 = context.secretkey;

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						context.accesskey, decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.internal.StaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1
						.setUserAgent("APN/1.0 Talend/7.0 Studio/7.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = new com.amazonaws.services.s3.AmazonS3Client(
						credentialsProvider_tS3Connection_1, cc_tS3Connection_1);

				try {
					conn_tS3Connection_1
							.getBucketLoggingConfiguration("Check-Connection-Only");
				} catch (com.amazonaws.AmazonServiceException ase) {
					if (ase.getErrorCode().equals("NoSuchBucket")) {
						// ignore
					} else {
						throw ase;
					}
				}

				globalMap
						.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk43", 0, "ok");
				}
				tDBInput_10Process(globalMap);

				/**
				 * [tS3Connection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Integer countss;

		public Integer getCountss() {
			return this.countss;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					this.countss = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.countss, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("countss=" + String.valueOf(countss));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_7 = 0;

				class BytesLimit65535_tJavaRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_7().limitLog4jByte();

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				class BytesLimit65535_tDBInput_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_10().limitLog4jByte();

				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10
						.createStatement();

				String dbquery_tDBInput_10 = "select count(1) as countss from process_logs where process_state = 'Running' and process_name = 'fact_orders_fulfillmen"
						+ "t_status_updation'";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10
							.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10
							.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10
							.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row10.countss = null;
						} else {

							if (rs_tDBInput_10.getObject(1) != null) {
								row10.countss = rs_tDBInput_10.getInt(1);
							} else {
								row10.countss = null;
							}
						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_7 main ] start
						 */

						currentComponent = "tJavaRow_7";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row10.id * 2;
						//
						// lowercase the name
						// output_row.name = row10.name.toLowerCase();

						globalMap.put("countss", row10.countss);

						System.out.println("count:" + globalMap.get("countss"));

						nb_line_tJavaRow_7++;

						tos_count_tJavaRow_7++;

						/**
						 * [tJavaRow_7 main ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_end ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					stmt_tDBInput_10.close();

				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if (((Integer) globalMap.get("countss")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "true");
					}

					tDBRow_7Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "false");
					}
				}

				/**
				 * [tJavaRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_7 begin ] start
				 */

				ok_Hash.put("tDBRow_7", false);
				start_Hash.put("tDBRow_7", System.currentTimeMillis());

				currentComponent = "tDBRow_7";

				int tos_count_tDBRow_7 = 0;

				class BytesLimit65535_tDBRow_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_7().limitLog4jByte();

				java.sql.Connection conn_tDBRow_7 = null;
				String query_tDBRow_7 = "";
				boolean whetherReject_tDBRow_7 = false;
				conn_tDBRow_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_7 = conn_tDBRow_7
						.createStatement();

				/**
				 * [tDBRow_7 begin ] stop
				 */

				/**
				 * [tDBRow_7 main ] start
				 */

				currentComponent = "tDBRow_7";

				query_tDBRow_7 = "insert into process_logs (process_name, start_time, process_state) values ('fact_orders_fulfillment_status_updation',cu"
						+ "rrent_timestamp,'Running')";
				whetherReject_tDBRow_7 = false;
				globalMap.put("tDBRow_7_QUERY", query_tDBRow_7);
				try {
					stmt_tDBRow_7.execute(query_tDBRow_7);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_7 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_7) {

				}

				tos_count_tDBRow_7++;

				/**
				 * [tDBRow_7 main ] stop
				 */

				/**
				 * [tDBRow_7 process_data_begin ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_7 process_data_end ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 process_data_end ] stop
				 */

				/**
				 * [tDBRow_7 end ] start
				 */

				currentComponent = "tDBRow_7";

				stmt_tDBRow_7.close();

				ok_Hash.put("tDBRow_7", true);
				end_Hash.put("tDBRow_7", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk40", 0, "ok");
				}
				tDBCommit_10Process(globalMap);

				/**
				 * [tDBRow_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_7 finally ] start
				 */

				currentComponent = "tDBRow_7";

				/**
				 * [tDBRow_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_7_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_10 begin ] start
				 */

				ok_Hash.put("tDBCommit_10", false);
				start_Hash.put("tDBCommit_10", System.currentTimeMillis());

				currentComponent = "tDBCommit_10";

				int tos_count_tDBCommit_10 = 0;

				class BytesLimit65535_tDBCommit_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_10().limitLog4jByte();

				/**
				 * [tDBCommit_10 begin ] stop
				 */

				/**
				 * [tDBCommit_10 main ] start
				 */

				currentComponent = "tDBCommit_10";

				java.sql.Connection conn_tDBCommit_10 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_10 != null && !conn_tDBCommit_10.isClosed()) {

					conn_tDBCommit_10.commit();

				}

				tos_count_tDBCommit_10++;

				/**
				 * [tDBCommit_10 main ] stop
				 */

				/**
				 * [tDBCommit_10 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_10 process_data_end ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_10 end ] start
				 */

				currentComponent = "tDBCommit_10";

				ok_Hash.put("tDBCommit_10", true);
				end_Hash.put("tDBCommit_10", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tDBInput_11Process(globalMap);

				/**
				 * [tDBCommit_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_10 finally ] start
				 */

				currentComponent = "tDBCommit_10";

				/**
				 * [tDBCommit_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_10_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long iddd;

		public Long getIddd() {
			return this.iddd;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.iddd = null;
					} else {
						this.iddd = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.iddd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.iddd);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddd=" + String.valueOf(iddd));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_8 = 0;

				class BytesLimit65535_tJavaRow_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_8().limitLog4jByte();

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				class BytesLimit65535_tDBInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_11().limitLog4jByte();

				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "select coalesce(max(last_id),0) as iddd from process_logs where process_name = 'fact_orders_fulfillment_status_updation"
						+ "' and process_state = 'Completed';";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row11.iddd = null;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row11.iddd = rs_tDBInput_11.getLong(1);
							} else {
								row11.iddd = null;
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_8 main ] start
						 */

						currentComponent = "tJavaRow_8";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.iddd = row11.iddd;

						nb_line_tJavaRow_8++;

						tos_count_tJavaRow_8++;

						/**
						 * [tJavaRow_8 main ] stop
						 */

						/**
						 * [tJavaRow_8 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_8";

						/**
						 * [tJavaRow_8 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_8 process_data_end ] start
						 */

						currentComponent = "tJavaRow_8";

						/**
						 * [tJavaRow_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					stmt_tDBInput_11.close();

				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tJavaRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long order_id;

		public Long getOrder_id() {
			return this.order_id;
		}

		public String order_name;

		public String getOrder_name() {
			return this.order_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.order_id = null;
					} else {
						this.order_id = dis.readLong();
					}

					this.order_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// Long

				if (this.order_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_id);
				}

				// String

				writeString(this.order_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",order_id=" + String.valueOf(order_id));
			sb.append(",order_name=" + order_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				class BytesLimit65535_tFileOutputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"/tmp/ordersfulfillmentstatusupdate.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select id, order_id, order_name from tj_dwh_prod.fact_orders_fulfillment_status where id > "
						+ context.iddd + " order by id";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row9.id = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row9.id = rs_tDBInput_2.getLong(1);
							} else {
								row9.id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row9.order_id = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row9.order_id = rs_tDBInput_2.getLong(2);
							} else {
								row9.order_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row9.order_name = null;
						} else {

							row9.order_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row9.id != null) {
							sb_tFileOutputDelimited_3.append(row9.id);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row9.order_id != null) {
							sb_tFileOutputDelimited_3.append(row9.order_id);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row9.order_name != null) {
							sb_tFileOutputDelimited_3.append(row9.order_name);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3",
								nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3
								.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tS3Put_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tS3Put_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Put_3 begin ] start
				 */

				ok_Hash.put("tS3Put_3", false);
				start_Hash.put("tS3Put_3", System.currentTimeMillis());

				currentComponent = "tS3Put_3";

				int tos_count_tS3Put_3 = 0;

				class BytesLimit65535_tS3Put_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tS3Put_3().limitLog4jByte();

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_3 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				String key_tS3Put_3 = "EDW_RW/ordersfulfillmentstatusupdate.csv";

				int partSizeInBytes_tS3Put_3 = 5 * 1024 * 1024;

				Object fileOrStream_tS3Put_3 = "/tmp/ordersfulfillmentstatusupdate.csv";

				boolean useStream_tS3Put_3 = false;
				java.io.InputStream uploadStream_tS3Put_3 = null;

				try {

					if (fileOrStream_tS3Put_3 instanceof String) {
						useStream_tS3Put_3 = false;
					} else if (fileOrStream_tS3Put_3 instanceof java.io.InputStream) {
						useStream_tS3Put_3 = true;
					}

					com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_3 = new com.amazonaws.services.s3.model.ObjectMetadata();

					if (!useStream_tS3Put_3) {
						java.io.File inputFile_tS3Put_3 = new java.io.File(
								(String) fileOrStream_tS3Put_3);

						long multipart_upload_threshold_tS3Put_3 = 5 * 1024 * 1024;

						com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_3 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
								.standard()
								.withMinimumUploadPartSize(
										(long) partSizeInBytes_tS3Put_3)
								.withMultipartUploadThreshold(
										multipart_upload_threshold_tS3Put_3)
								.withS3Client(conn_tS3Put_3).build();

						com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(
								"tj-redshift-edw", key_tS3Put_3,
								inputFile_tS3Put_3)
								.withMetadata(objectMetadata_tS3Put_3);

						com.amazonaws.services.s3.transfer.Upload upload_tS3Put_3 = tm_tS3Put_3
								.upload(putRequest_tS3Put_3);

						upload_tS3Put_3.waitForCompletion();
					} else {
						java.io.InputStream sourceStream_tS3Put_3 = ((java.io.InputStream) fileOrStream_tS3Put_3);

						class S3StreamUtil {
							public int getLength(byte[] output) {
								for (int i = output.length - 1; i > 0; i--) {
									if (output[i] != 0) {
										return i + 1;
									}
								}
								return 0;
							}
						}

						S3StreamUtil streamUtil_tS3Put_3 = new S3StreamUtil();
						byte[] buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
						sourceStream_tS3Put_3.read(buffer_tS3Put_3);
						long curPartSize_tS3Put_3 = streamUtil_tS3Put_3
								.getLength(buffer_tS3Put_3);
						boolean multiUpload_tS3Put_3 = curPartSize_tS3Put_3 == partSizeInBytes_tS3Put_3;

						if (!multiUpload_tS3Put_3) {
							objectMetadata_tS3Put_3
									.setContentLength(curPartSize_tS3Put_3);
							uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_3, 0, Long.valueOf(
											curPartSize_tS3Put_3).intValue());
							com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(
									"tj-redshift-edw", key_tS3Put_3,
									uploadStream_tS3Put_3,
									objectMetadata_tS3Put_3);

							conn_tS3Put_3.putObject(putRequest_tS3Put_3);
						} else {
							uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
									buffer_tS3Put_3);
							java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_3 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
							com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(
									"tj-redshift-edw", key_tS3Put_3,
									objectMetadata_tS3Put_3);

							com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_3 = conn_tS3Put_3
									.initiateMultipartUpload(putRequest_tS3Put_3);
							String uploadId_tS3Put_3 = initResponse_tS3Put_3
									.getUploadId();
							int partNumber_tS3Put_3 = 1;
							boolean streamHasNext_tS3Put_3 = true;
							byte[] probeAvailability_tS3Put_3 = new byte[1];
							try {
								while (streamHasNext_tS3Put_3) {
									com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_3 = new com.amazonaws.services.s3.model.UploadPartRequest()
											.withBucketName("tj-redshift-edw")
											.withKey(key_tS3Put_3)
											.withUploadId(uploadId_tS3Put_3)
											.withPartNumber(partNumber_tS3Put_3)
											.withPartSize(curPartSize_tS3Put_3);
									uploadRequest_tS3Put_3
											.setInputStream(uploadStream_tS3Put_3);
									streamHasNext_tS3Put_3 = sourceStream_tS3Put_3
											.read(probeAvailability_tS3Put_3) != -1;
									if (!streamHasNext_tS3Put_3) {
										uploadRequest_tS3Put_3
												.setLastPart(true);
									}

									partTags_tS3Put_3.add(conn_tS3Put_3
											.uploadPart(uploadRequest_tS3Put_3)
											.getPartETag());
									partNumber_tS3Put_3++;

									if (uploadStream_tS3Put_3 != null) {
										uploadStream_tS3Put_3.close();
									}
									buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
									sourceStream_tS3Put_3.read(buffer_tS3Put_3,
											1, partSizeInBytes_tS3Put_3 - 1);
									buffer_tS3Put_3[0] = probeAvailability_tS3Put_3[0];
									probeAvailability_tS3Put_3 = new byte[1];
									curPartSize_tS3Put_3 = streamUtil_tS3Put_3
											.getLength(buffer_tS3Put_3);
									uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(
											buffer_tS3Put_3);
								}

								com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_3 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
										"tj-redshift-edw", key_tS3Put_3,
										uploadId_tS3Put_3, partTags_tS3Put_3);
								conn_tS3Put_3
										.completeMultipartUpload(compRequest_tS3Put_3);
							} catch (java.lang.Exception uploadException_tS3Put_3) {
								conn_tS3Put_3
										.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(
												"tj-redshift-edw",
												key_tS3Put_3, uploadId_tS3Put_3));
								throw uploadException_tS3Put_3;
							}
						}
					}

				} catch (java.lang.Exception e_tS3Put_3) {

					System.err.println(e_tS3Put_3.getMessage());

				} finally {
					if (useStream_tS3Put_3 && uploadStream_tS3Put_3 != null) {
						uploadStream_tS3Put_3.close();
					}

				}

				/**
				 * [tS3Put_3 begin ] stop
				 */

				/**
				 * [tS3Put_3 main ] start
				 */

				currentComponent = "tS3Put_3";

				tos_count_tS3Put_3++;

				/**
				 * [tS3Put_3 main ] stop
				 */

				/**
				 * [tS3Put_3 process_data_begin ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 process_data_begin ] stop
				 */

				/**
				 * [tS3Put_3 process_data_end ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 process_data_end ] stop
				 */

				/**
				 * [tS3Put_3 end ] start
				 */

				currentComponent = "tS3Put_3";

				ok_Hash.put("tS3Put_3", true);
				end_Hash.put("tS3Put_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk34", 0, "ok");
				}
				tDBBulkExec_3Process(globalMap);

				/**
				 * [tS3Put_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Put_3 finally ] start
				 */

				currentComponent = "tS3Put_3";

				/**
				 * [tS3Put_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 1);
	}

	public void tDBBulkExec_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBBulkExec_3 begin ] start
				 */

				ok_Hash.put("tDBBulkExec_3", false);
				start_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				currentComponent = "tDBBulkExec_3";

				int tos_count_tDBBulkExec_3 = 0;

				class BytesLimit65535_tDBBulkExec_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBBulkExec_3().limitLog4jByte();

				String dbschema_tDBBulkExec_3 = null;

				dbschema_tDBBulkExec_3 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBBulkExec_3 = "fact_orders_fulfillment_status";
				String tableName2_tDBBulkExec_3 = tableName_tDBBulkExec_3;
				boolean isTempTable_tDBBulkExec_3 = tableName_tDBBulkExec_3 != null
						&& tableName_tDBBulkExec_3.trim().startsWith("#");
				if (isTempTable_tDBBulkExec_3) {
					tableName2_tDBBulkExec_3 = "\"" + tableName2_tDBBulkExec_3
							+ "\"";
				} else if (dbschema_tDBBulkExec_3 == null
						|| dbschema_tDBBulkExec_3.trim().length() == 0) {
					// do nothing
				} else {
					tableName_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "\".\""
							+ tableName_tDBBulkExec_3;
					tableName2_tDBBulkExec_3 = dbschema_tDBBulkExec_3 + "."
							+ tableName2_tDBBulkExec_3;
				}

				java.sql.Connection conn_tDBBulkExec_3 = null;
				conn_tDBBulkExec_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				StringBuilder command_tDBBulkExec_3 = new StringBuilder();
				char fieldSeparator_tDBBulkExec_3 = String.valueOf(',').charAt(
						0);
				char textEnclosure_tDBBulkExec_3 = '\0';

				command_tDBBulkExec_3.append("COPY ")
						.append(tableName2_tDBBulkExec_3)

						.append(" (").append("id").append(",")
						.append("order_id").append(",").append("order_name")
						.append(")").append(" FROM '");

				final String decryptedPwd_tDBBulkExec_3 = context.secretkey;

				command_tDBBulkExec_3.append("s3://").append("tj-redshift-edw")
						.append("/")
						.append("EDW_RW/ordersfulfillmentstatusupdate.csv")
						.append("' ")

						.append("credentials 'aws_access_key_id=")
						.append(context.accesskey)
						.append(";aws_secret_access_key=")
						.append(decryptedPwd_tDBBulkExec_3).append("' ")
						.append("DELIMITER '")
						.append(fieldSeparator_tDBBulkExec_3).append("' ");
				if (textEnclosure_tDBBulkExec_3 != '\0') {
					command_tDBBulkExec_3.append("CSV QUOTE '")
							.append(textEnclosure_tDBBulkExec_3).append("' ");
				}
				command_tDBBulkExec_3.append("ENCODING ").append("UTF8")
						.append(" ");

				java.sql.Statement stmt_tDBBulkExec_3 = conn_tDBBulkExec_3
						.createStatement();
				stmt_tDBBulkExec_3.execute(command_tDBBulkExec_3.toString());

				/**
				 * [tDBBulkExec_3 begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 main ] start
				 */

				currentComponent = "tDBBulkExec_3";

				tos_count_tDBBulkExec_3++;

				/**
				 * [tDBBulkExec_3 main ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_begin ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_begin ] stop
				 */

				/**
				 * [tDBBulkExec_3 process_data_end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 process_data_end ] stop
				 */

				/**
				 * [tDBBulkExec_3 end ] start
				 */

				currentComponent = "tDBBulkExec_3";

				ok_Hash.put("tDBBulkExec_3", true);
				end_Hash.put("tDBBulkExec_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk35", 0, "ok");
				}
				tDBCommit_9Process(globalMap);

				/**
				 * [tDBBulkExec_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBBulkExec_3 finally ] start
				 */

				currentComponent = "tDBBulkExec_3";

				/**
				 * [tDBBulkExec_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBBulkExec_3_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_9 begin ] start
				 */

				ok_Hash.put("tDBCommit_9", false);
				start_Hash.put("tDBCommit_9", System.currentTimeMillis());

				currentComponent = "tDBCommit_9";

				int tos_count_tDBCommit_9 = 0;

				class BytesLimit65535_tDBCommit_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_9().limitLog4jByte();

				/**
				 * [tDBCommit_9 begin ] stop
				 */

				/**
				 * [tDBCommit_9 main ] start
				 */

				currentComponent = "tDBCommit_9";

				java.sql.Connection conn_tDBCommit_9 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_9 != null && !conn_tDBCommit_9.isClosed()) {

					conn_tDBCommit_9.commit();

				}

				tos_count_tDBCommit_9++;

				/**
				 * [tDBCommit_9 main ] stop
				 */

				/**
				 * [tDBCommit_9 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_9 process_data_end ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_9 end ] start
				 */

				currentComponent = "tDBCommit_9";

				ok_Hash.put("tDBCommit_9", true);
				end_Hash.put("tDBCommit_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk46", 0, "ok");
				}
				tDBInput_12Process(globalMap);

				/**
				 * [tDBCommit_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_9 finally ] start
				 */

				currentComponent = "tDBCommit_9";

				/**
				 * [tDBCommit_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_9_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1 = new byte[0];

		public Long maxidd;

		public Long getMaxidd() {
			return this.maxidd;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_fact_orders_fulfillment_status_updation1) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.maxidd = null;
					} else {
						this.maxidd = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.maxidd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.maxidd);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("maxidd=" + String.valueOf(maxidd));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_9 = 0;

				class BytesLimit65535_tJavaRow_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_9().limitLog4jByte();

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				class BytesLimit65535_tDBInput_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_12().limitLog4jByte();

				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				conn_tDBInput_12 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12
						.createStatement();

				String dbquery_tDBInput_12 = "select max(id) as maxidd from tj_dwh_prod.fact_orders_fulfillment_status";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12
							.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12
							.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12
							.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row12.maxidd = null;
						} else {

							if (rs_tDBInput_12.getObject(1) != null) {
								row12.maxidd = rs_tDBInput_12.getLong(1);
							} else {
								row12.maxidd = null;
							}
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_9 main ] start
						 */

						currentComponent = "tJavaRow_9";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						context.maxidd = row12.maxidd;

						globalMap.put("maxidd", row12.maxidd);

						System.out.println("max:" + globalMap.get("maxidd"));
						nb_line_tJavaRow_9++;

						tos_count_tJavaRow_9++;

						/**
						 * [tJavaRow_9 main ] stop
						 */

						/**
						 * [tJavaRow_9 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_9";

						/**
						 * [tJavaRow_9 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_9 process_data_end ] start
						 */

						currentComponent = "tJavaRow_9";

						/**
						 * [tJavaRow_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					stmt_tDBInput_12.close();

				}
				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk45", 0, "ok");
				}
				tDBRow_8Process(globalMap);

				/**
				 * [tJavaRow_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_8 begin ] start
				 */

				ok_Hash.put("tDBRow_8", false);
				start_Hash.put("tDBRow_8", System.currentTimeMillis());

				currentComponent = "tDBRow_8";

				int tos_count_tDBRow_8 = 0;

				class BytesLimit65535_tDBRow_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBRow_8().limitLog4jByte();

				java.sql.Connection conn_tDBRow_8 = null;
				String query_tDBRow_8 = "";
				boolean whetherReject_tDBRow_8 = false;
				conn_tDBRow_8 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBRow_8 = conn_tDBRow_8
						.createStatement();

				/**
				 * [tDBRow_8 begin ] stop
				 */

				/**
				 * [tDBRow_8 main ] start
				 */

				currentComponent = "tDBRow_8";

				query_tDBRow_8 = "update process_logs\nset process_state = 'Completed', end_time = CURRENT_TIMESTAMP,\nLast_id = "
						+ context.maxidd
						+ "\nwhere process_name = 'fact_orders_fulfillment_status_updation' and process_state = 'Running';";
				whetherReject_tDBRow_8 = false;
				globalMap.put("tDBRow_8_QUERY", query_tDBRow_8);
				try {
					stmt_tDBRow_8.execute(query_tDBRow_8);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_8 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_8) {

				}

				tos_count_tDBRow_8++;

				/**
				 * [tDBRow_8 main ] stop
				 */

				/**
				 * [tDBRow_8 process_data_begin ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_8 process_data_end ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 process_data_end ] stop
				 */

				/**
				 * [tDBRow_8 end ] start
				 */

				currentComponent = "tDBRow_8";

				stmt_tDBRow_8.close();

				ok_Hash.put("tDBRow_8", true);
				end_Hash.put("tDBRow_8", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk44", 0, "ok");
				}
				tDBCommit_11Process(globalMap);

				/**
				 * [tDBRow_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_8 finally ] start
				 */

				currentComponent = "tDBRow_8";

				/**
				 * [tDBRow_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_8_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_11 begin ] start
				 */

				ok_Hash.put("tDBCommit_11", false);
				start_Hash.put("tDBCommit_11", System.currentTimeMillis());

				currentComponent = "tDBCommit_11";

				int tos_count_tDBCommit_11 = 0;

				class BytesLimit65535_tDBCommit_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_11().limitLog4jByte();

				/**
				 * [tDBCommit_11 begin ] stop
				 */

				/**
				 * [tDBCommit_11 main ] start
				 */

				currentComponent = "tDBCommit_11";

				java.sql.Connection conn_tDBCommit_11 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBCommit_11 != null && !conn_tDBCommit_11.isClosed()) {

					conn_tDBCommit_11.commit();

				}

				tos_count_tDBCommit_11++;

				/**
				 * [tDBCommit_11 main ] stop
				 */

				/**
				 * [tDBCommit_11 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_11 process_data_end ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_11 end ] start
				 */

				currentComponent = "tDBCommit_11";

				ok_Hash.put("tDBCommit_11", true);
				end_Hash.put("tDBCommit_11", System.currentTimeMillis());

				/**
				 * [tDBCommit_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_11 finally ] start
				 */

				currentComponent = "tDBCommit_11";

				/**
				 * [tDBCommit_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_11_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final fact_orders_fulfillment_status_updation1 fact_orders_fulfillment_status_updation1Class = new fact_orders_fulfillment_status_updation1();

		int exitCode = fact_orders_fulfillment_status_updation1Class
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = fact_orders_fulfillment_status_updation1.class
					.getClassLoader().getResourceAsStream(
							"edw_etl_aditya/fact_orders_fulfillment_status_updation1_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = fact_orders_fulfillment_status_updation1.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("maxid", "id_Long");

			try {
				context.maxid = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("maxid"));
			} catch (NumberFormatException e) {
				context.maxid = null;
			}
			context.setContextType("id", "id_Long");

			try {
				context.id = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("id"));
			} catch (NumberFormatException e) {
				context.id = null;
			}
			context.setContextType("idds", "id_Long");

			try {
				context.idds = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("idds"));
			} catch (NumberFormatException e) {
				context.idds = null;
			}
			context.setContextType("iddd", "id_Long");

			try {
				context.iddd = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("iddd"));
			} catch (NumberFormatException e) {
				context.iddd = null;
			}
			context.setContextType("maxidd", "id_Long");

			try {
				context.maxidd = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("maxidd"));
			} catch (NumberFormatException e) {
				context.maxidd = null;
			}
			context.setContextType("accesskey", "id_String");

			context.accesskey = (String) context.getProperty("accesskey");
			context.setContextType("EDW_Database", "id_String");

			context.EDW_Database = (String) context.getProperty("EDW_Database");
			context.setContextType("EDW_Host", "id_String");

			context.EDW_Host = (String) context.getProperty("EDW_Host");
			context.setContextType("EDW_Password", "id_String");

			context.EDW_Password = (String) context.getProperty("EDW_Password");
			context.setContextType("EDW_Port", "id_String");

			context.EDW_Port = (String) context.getProperty("EDW_Port");
			context.setContextType("EDW_Schema", "id_String");

			context.EDW_Schema = (String) context.getProperty("EDW_Schema");
			context.setContextType("EDW_Username", "id_String");

			context.EDW_Username = (String) context.getProperty("EDW_Username");
			context.setContextType("secretkey", "id_Password");

			String pwd_secretkey_value = context.getProperty("secretkey");
			context.secretkey = null;
			if (pwd_secretkey_value != null) {
				if (context_param.containsKey("secretkey")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.secretkey = pwd_secretkey_value;
				} else if (!pwd_secretkey_value.isEmpty()) {
					try {
						context.secretkey = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_secretkey_value);
						context.put("secretkey", context.secretkey);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SH_Database", "id_String");

			context.SH_Database = (String) context.getProperty("SH_Database");
			context.setContextType("SH_Password", "id_String");

			context.SH_Password = (String) context.getProperty("SH_Password");
			context.setContextType("SH_Port", "id_String");

			context.SH_Port = (String) context.getProperty("SH_Port");
			context.setContextType("SH_RR_Host", "id_String");

			context.SH_RR_Host = (String) context.getProperty("SH_RR_Host");
			context.setContextType("SH_Username", "id_String");

			context.SH_Username = (String) context.getProperty("SH_Username");
			context.setContextType("max", "id_Long");

			try {
				context.max = routines.system.ParserUtils.parseTo_Long(context
						.getProperty("max"));
			} catch (NumberFormatException e) {
				context.max = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("maxid")) {
				context.maxid = (Long) parentContextMap.get("maxid");
			}
			if (parentContextMap.containsKey("id")) {
				context.id = (Long) parentContextMap.get("id");
			}
			if (parentContextMap.containsKey("idds")) {
				context.idds = (Long) parentContextMap.get("idds");
			}
			if (parentContextMap.containsKey("iddd")) {
				context.iddd = (Long) parentContextMap.get("iddd");
			}
			if (parentContextMap.containsKey("maxidd")) {
				context.maxidd = (Long) parentContextMap.get("maxidd");
			}
			if (parentContextMap.containsKey("accesskey")) {
				context.accesskey = (String) parentContextMap.get("accesskey");
			}
			if (parentContextMap.containsKey("EDW_Database")) {
				context.EDW_Database = (String) parentContextMap
						.get("EDW_Database");
			}
			if (parentContextMap.containsKey("EDW_Host")) {
				context.EDW_Host = (String) parentContextMap.get("EDW_Host");
			}
			if (parentContextMap.containsKey("EDW_Password")) {
				context.EDW_Password = (String) parentContextMap
						.get("EDW_Password");
			}
			if (parentContextMap.containsKey("EDW_Port")) {
				context.EDW_Port = (String) parentContextMap.get("EDW_Port");
			}
			if (parentContextMap.containsKey("EDW_Schema")) {
				context.EDW_Schema = (String) parentContextMap
						.get("EDW_Schema");
			}
			if (parentContextMap.containsKey("EDW_Username")) {
				context.EDW_Username = (String) parentContextMap
						.get("EDW_Username");
			}
			if (parentContextMap.containsKey("secretkey")) {
				context.secretkey = (java.lang.String) parentContextMap
						.get("secretkey");
			}
			if (parentContextMap.containsKey("SH_Database")) {
				context.SH_Database = (String) parentContextMap
						.get("SH_Database");
			}
			if (parentContextMap.containsKey("SH_Password")) {
				context.SH_Password = (String) parentContextMap
						.get("SH_Password");
			}
			if (parentContextMap.containsKey("SH_Port")) {
				context.SH_Port = (String) parentContextMap.get("SH_Port");
			}
			if (parentContextMap.containsKey("SH_RR_Host")) {
				context.SH_RR_Host = (String) parentContextMap
						.get("SH_RR_Host");
			}
			if (parentContextMap.containsKey("SH_Username")) {
				context.SH_Username = (String) parentContextMap
						.get("SH_Username");
			}
			if (parentContextMap.containsKey("max")) {
				context.max = (Long) parentContextMap.get("max");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("secretkey");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : fact_orders_fulfillment_status_updation1");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeS3Connections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2",
				globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_3",
				globalMap.get("conn_tDBConnection_3"));

		connections.put("conn_tS3Connection_1",
				globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 142123 characters generated by Talend Open Studio for Data Integration on the
 * 8 January, 2020 4:36:15 PM IST
 ************************************************************************************************/
