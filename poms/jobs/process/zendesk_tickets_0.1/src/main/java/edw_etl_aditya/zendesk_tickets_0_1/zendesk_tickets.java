// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package edw_etl_aditya.zendesk_tickets_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: zendesk_tickets Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class zendesk_tickets implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (total_records != null) {

				this.setProperty("total_records", total_records.toString());

			}

			if (Impact_Staging != null) {

				this.setProperty("Impact_Staging", Impact_Staging.toString());

			}

			if (accesskey != null) {

				this.setProperty("accesskey", accesskey.toString());

			}

			if (EDW_Database != null) {

				this.setProperty("EDW_Database", EDW_Database.toString());

			}

			if (EDW_Host != null) {

				this.setProperty("EDW_Host", EDW_Host.toString());

			}

			if (EDW_Password != null) {

				this.setProperty("EDW_Password", EDW_Password.toString());

			}

			if (EDW_Port != null) {

				this.setProperty("EDW_Port", EDW_Port.toString());

			}

			if (EDW_Schema != null) {

				this.setProperty("EDW_Schema", EDW_Schema.toString());

			}

			if (EDW_Username != null) {

				this.setProperty("EDW_Username", EDW_Username.toString());

			}

			if (secretkey != null) {

				this.setProperty("secretkey", secretkey.toString());

			}

			if (SH_Database != null) {

				this.setProperty("SH_Database", SH_Database.toString());

			}

			if (SH_Password != null) {

				this.setProperty("SH_Password", SH_Password.toString());

			}

			if (SH_Port != null) {

				this.setProperty("SH_Port", SH_Port.toString());

			}

			if (SH_RR_Host != null) {

				this.setProperty("SH_RR_Host", SH_RR_Host.toString());

			}

			if (SH_Username != null) {

				this.setProperty("SH_Username", SH_Username.toString());

			}

		}

		public Integer total_records;

		public Integer getTotal_records() {
			return this.total_records;
		}

		public String Impact_Staging;

		public String getImpact_Staging() {
			return this.Impact_Staging;
		}

		public String accesskey;

		public String getAccesskey() {
			return this.accesskey;
		}

		public String EDW_Database;

		public String getEDW_Database() {
			return this.EDW_Database;
		}

		public String EDW_Host;

		public String getEDW_Host() {
			return this.EDW_Host;
		}

		public String EDW_Password;

		public String getEDW_Password() {
			return this.EDW_Password;
		}

		public String EDW_Port;

		public String getEDW_Port() {
			return this.EDW_Port;
		}

		public String EDW_Schema;

		public String getEDW_Schema() {
			return this.EDW_Schema;
		}

		public String EDW_Username;

		public String getEDW_Username() {
			return this.EDW_Username;
		}

		public java.lang.String secretkey;

		public java.lang.String getSecretkey() {
			return this.secretkey;
		}

		public String SH_Database;

		public String getSH_Database() {
			return this.SH_Database;
		}

		public String SH_Password;

		public String getSH_Password() {
			return this.SH_Password;
		}

		public String SH_Port;

		public String getSH_Port() {
			return this.SH_Port;
		}

		public String SH_RR_Host;

		public String getSH_RR_Host() {
			return this.SH_RR_Host;
		}

		public String SH_Username;

		public String getSH_Username() {
			return this.SH_Username;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "zendesk_tickets";
	private final String projectName = "EDW_ETL_ADITYA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					zendesk_tickets.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(zendesk_tickets.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://"
						+ context.SH_RR_Host + ":" + context.SH_Port + "/"
						+ context.SH_Database + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = context.SH_Username;

				final String decryptedPassword_tDBConnection_1 = context.SH_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", context.SH_Database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public Integer row_count;

		public Integer getRow_count() {
			return this.row_count;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					this.row_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.row_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("row_count=" + String.valueOf(row_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select COALESCE(count(*), 0) as NumberCount from crm_staging.process_logs \nwhere job_name = 'zendesk_tickets' and job_"
						+ "status='RUNNING'";
				;

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row6.row_count = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row6.row_count = rs_tDBInput_2.getInt(1);
							} else {
								row6.row_count = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						globalMap.put("NumberCount", row6.row_count);

						System.out.println("Number count : "
								+ globalMap.get("NumberCount"));
						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if ((Integer) globalMap.get("NumberCount") == (0)) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tDBRow_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1
						.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				query_tDBRow_1 = "insert into crm_staging.process_logs\n(job_name,job_status, source_system, destination_system,object_type,current_actio"
						+ "n,job_start) \nvalues\n('zendesk_tickets','RUNNING', 'Zendesk','crm_staging', 'zendesk_ticket','INSERT/UPDATE',NOW())";
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				if (resourceMap.get("statementClosed_tDBRow_1") == null) {
					java.sql.Statement stmtToClose_tDBRow_1 = null;
					if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_1")) != null) {
						stmtToClose_tDBRow_1.close();
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public Long generated_timestamp;

		public Long getGenerated_timestamp() {
			return this.generated_timestamp;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.generated_timestamp = null;
					} else {
						this.generated_timestamp = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.generated_timestamp == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.generated_timestamp);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("generated_timestamp="
					+ String.valueOf(generated_timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "select max(generated_timestamp) from crm_staging.zendesk_tickets";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row5.generated_timestamp = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row5.generated_timestamp = rs_tDBInput_3
										.getLong(1);
							} else {
								row5.generated_timestamp = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						// lowercase the name
						// output_row.name = row5.name.toLowerCase();
						String generated_timestamp1 = row5.generated_timestamp
								.toString();
						System.out.println(generated_timestamp1);
						globalMap.put("generated_timestamp",
								generated_timestamp1);
						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_end ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tJavaRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				// String generated_timestamp =
				// input_row.generated_timestamp.toString();

				globalMap.put("RunLoop", true);

				globalMap.put("total_records", 0);
				// globalMap.put("generated_timestamp",generated_timestamp);

				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", 999);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", 999);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", 999);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", 999);

				System.out.println("RunLoop" + globalMap.get("RunLoop"));
				System.out.println("generated_timestamp"
						+ globalMap.get("generated_timestamp"));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tLoop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public Long ticket_id;

		public Long getTicket_id() {
			return this.ticket_id;
		}

		public Long ticket_external_id;

		public Long getTicket_external_id() {
			return this.ticket_external_id;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String email_from_address;

		public String getEmail_from_address() {
			return this.email_from_address;
		}

		public String email_from_name;

		public String getEmail_from_name() {
			return this.email_from_name;
		}

		public String email_to_name;

		public String getEmail_to_name() {
			return this.email_to_name;
		}

		public String email_to_address;

		public String getEmail_to_address() {
			return this.email_to_address;
		}

		public java.util.Date created_at;

		public java.util.Date getCreated_at() {
			return this.created_at;
		}

		public java.util.Date updated_at;

		public java.util.Date getUpdated_at() {
			return this.updated_at;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String raw_subject;

		public String getRaw_subject() {
			return this.raw_subject;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String recipient;

		public String getRecipient() {
			return this.recipient;
		}

		public Long requester_id;

		public Long getRequester_id() {
			return this.requester_id;
		}

		public Long submitter_id;

		public Long getSubmitter_id() {
			return this.submitter_id;
		}

		public Long assignee_id;

		public Long getAssignee_id() {
			return this.assignee_id;
		}

		public Long organization_id;

		public Long getOrganization_id() {
			return this.organization_id;
		}

		public Long group_id;

		public Long getGroup_id() {
			return this.group_id;
		}

		public Long collaborator_ids;

		public Long getCollaborator_ids() {
			return this.collaborator_ids;
		}

		public Long follower_ids;

		public Long getFollower_ids() {
			return this.follower_ids;
		}

		public Long email_cc_ids;

		public Long getEmail_cc_ids() {
			return this.email_cc_ids;
		}

		public Long forum_topic_id;

		public Long getForum_topic_id() {
			return this.forum_topic_id;
		}

		public Long problem_id;

		public Long getProblem_id() {
			return this.problem_id;
		}

		public String has_incidents;

		public String getHas_incidents() {
			return this.has_incidents;
		}

		public String is_public;

		public String getIs_public() {
			return this.is_public;
		}

		public java.util.Date ticket_due_at;

		public java.util.Date getTicket_due_at() {
			return this.ticket_due_at;
		}

		public String satisfaction_rating_score;

		public String getSatisfaction_rating_score() {
			return this.satisfaction_rating_score;
		}

		public Long followup_ids;

		public Long getFollowup_ids() {
			return this.followup_ids;
		}

		public Long brand_id;

		public Long getBrand_id() {
			return this.brand_id;
		}

		public String allow_channelback;

		public String getAllow_channelback() {
			return this.allow_channelback;
		}

		public String allow_attachments;

		public String getAllow_attachments() {
			return this.allow_attachments;
		}

		public Integer generated_timestamp;

		public Integer getGenerated_timestamp() {
			return this.generated_timestamp;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EDW_ETL_ADITYA_zendesk_tickets,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ticket_id = null;
					} else {
						this.ticket_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ticket_external_id = null;
					} else {
						this.ticket_external_id = dis.readLong();
					}

					this.channel = readString(dis);

					this.email_from_address = readString(dis);

					this.email_from_name = readString(dis);

					this.email_to_name = readString(dis);

					this.email_to_address = readString(dis);

					this.created_at = readDate(dis);

					this.updated_at = readDate(dis);

					this.type = readString(dis);

					this.subject = readString(dis);

					this.raw_subject = readString(dis);

					this.description = readString(dis);

					this.priority = readString(dis);

					this.status = readString(dis);

					this.recipient = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.requester_id = null;
					} else {
						this.requester_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.submitter_id = null;
					} else {
						this.submitter_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.assignee_id = null;
					} else {
						this.assignee_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.organization_id = null;
					} else {
						this.organization_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.group_id = null;
					} else {
						this.group_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.collaborator_ids = null;
					} else {
						this.collaborator_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.follower_ids = null;
					} else {
						this.follower_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.email_cc_ids = null;
					} else {
						this.email_cc_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.forum_topic_id = null;
					} else {
						this.forum_topic_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.problem_id = null;
					} else {
						this.problem_id = dis.readLong();
					}

					this.has_incidents = readString(dis);

					this.is_public = readString(dis);

					this.ticket_due_at = readDate(dis);

					this.satisfaction_rating_score = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.followup_ids = null;
					} else {
						this.followup_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.brand_id = null;
					} else {
						this.brand_id = dis.readLong();
					}

					this.allow_channelback = readString(dis);

					this.allow_attachments = readString(dis);

					this.generated_timestamp = readInteger(dis);

					this.tags = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ticket_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ticket_id);
				}

				// Long

				if (this.ticket_external_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ticket_external_id);
				}

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.email_from_address, dos);

				// String

				writeString(this.email_from_name, dos);

				// String

				writeString(this.email_to_name, dos);

				// String

				writeString(this.email_to_address, dos);

				// java.util.Date

				writeDate(this.created_at, dos);

				// java.util.Date

				writeDate(this.updated_at, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.raw_subject, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.priority, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.recipient, dos);

				// Long

				if (this.requester_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.requester_id);
				}

				// Long

				if (this.submitter_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.submitter_id);
				}

				// Long

				if (this.assignee_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.assignee_id);
				}

				// Long

				if (this.organization_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.organization_id);
				}

				// Long

				if (this.group_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.group_id);
				}

				// Long

				if (this.collaborator_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.collaborator_ids);
				}

				// Long

				if (this.follower_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.follower_ids);
				}

				// Long

				if (this.email_cc_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.email_cc_ids);
				}

				// Long

				if (this.forum_topic_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.forum_topic_id);
				}

				// Long

				if (this.problem_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.problem_id);
				}

				// String

				writeString(this.has_incidents, dos);

				// String

				writeString(this.is_public, dos);

				// java.util.Date

				writeDate(this.ticket_due_at, dos);

				// String

				writeString(this.satisfaction_rating_score, dos);

				// Long

				if (this.followup_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.followup_ids);
				}

				// Long

				if (this.brand_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.brand_id);
				}

				// String

				writeString(this.allow_channelback, dos);

				// String

				writeString(this.allow_attachments, dos);

				// Integer

				writeInteger(this.generated_timestamp, dos);

				// String

				writeString(this.tags, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ticket_id=" + String.valueOf(ticket_id));
			sb.append(",ticket_external_id="
					+ String.valueOf(ticket_external_id));
			sb.append(",channel=" + channel);
			sb.append(",email_from_address=" + email_from_address);
			sb.append(",email_from_name=" + email_from_name);
			sb.append(",email_to_name=" + email_to_name);
			sb.append(",email_to_address=" + email_to_address);
			sb.append(",created_at=" + String.valueOf(created_at));
			sb.append(",updated_at=" + String.valueOf(updated_at));
			sb.append(",type=" + type);
			sb.append(",subject=" + subject);
			sb.append(",raw_subject=" + raw_subject);
			sb.append(",description=" + description);
			sb.append(",priority=" + priority);
			sb.append(",status=" + status);
			sb.append(",recipient=" + recipient);
			sb.append(",requester_id=" + String.valueOf(requester_id));
			sb.append(",submitter_id=" + String.valueOf(submitter_id));
			sb.append(",assignee_id=" + String.valueOf(assignee_id));
			sb.append(",organization_id=" + String.valueOf(organization_id));
			sb.append(",group_id=" + String.valueOf(group_id));
			sb.append(",collaborator_ids=" + String.valueOf(collaborator_ids));
			sb.append(",follower_ids=" + String.valueOf(follower_ids));
			sb.append(",email_cc_ids=" + String.valueOf(email_cc_ids));
			sb.append(",forum_topic_id=" + String.valueOf(forum_topic_id));
			sb.append(",problem_id=" + String.valueOf(problem_id));
			sb.append(",has_incidents=" + has_incidents);
			sb.append(",is_public=" + is_public);
			sb.append(",ticket_due_at=" + String.valueOf(ticket_due_at));
			sb.append(",satisfaction_rating_score=" + satisfaction_rating_score);
			sb.append(",followup_ids=" + String.valueOf(followup_ids));
			sb.append(",brand_id=" + String.valueOf(brand_id));
			sb.append(",allow_channelback=" + allow_channelback);
			sb.append(",allow_attachments=" + allow_attachments);
			sb.append(",generated_timestamp="
					+ String.valueOf(generated_timestamp));
			sb.append(",tags=" + tags);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public Long id;

		public Long getId() {
			return this.id;
		}

		public Long external_id;

		public Long getExternal_id() {
			return this.external_id;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String email_from_address;

		public String getEmail_from_address() {
			return this.email_from_address;
		}

		public String email_from_name;

		public String getEmail_from_name() {
			return this.email_from_name;
		}

		public String email_to_name;

		public String getEmail_to_name() {
			return this.email_to_name;
		}

		public String email_to_address;

		public String getEmail_to_address() {
			return this.email_to_address;
		}

		public String created_at;

		public String getCreated_at() {
			return this.created_at;
		}

		public String updated_at;

		public String getUpdated_at() {
			return this.updated_at;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String subject;

		public String getSubject() {
			return this.subject;
		}

		public String raw_subject;

		public String getRaw_subject() {
			return this.raw_subject;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String recipient;

		public String getRecipient() {
			return this.recipient;
		}

		public Long requester_id;

		public Long getRequester_id() {
			return this.requester_id;
		}

		public Long submitter_id;

		public Long getSubmitter_id() {
			return this.submitter_id;
		}

		public Long assignee_id;

		public Long getAssignee_id() {
			return this.assignee_id;
		}

		public Long organization_id;

		public Long getOrganization_id() {
			return this.organization_id;
		}

		public Long group_id;

		public Long getGroup_id() {
			return this.group_id;
		}

		public Long collaborator_ids;

		public Long getCollaborator_ids() {
			return this.collaborator_ids;
		}

		public Long follower_ids;

		public Long getFollower_ids() {
			return this.follower_ids;
		}

		public Long email_cc_ids;

		public Long getEmail_cc_ids() {
			return this.email_cc_ids;
		}

		public Long forum_topic_id;

		public Long getForum_topic_id() {
			return this.forum_topic_id;
		}

		public Long problem_id;

		public Long getProblem_id() {
			return this.problem_id;
		}

		public String has_incidents;

		public String getHas_incidents() {
			return this.has_incidents;
		}

		public String is_public;

		public String getIs_public() {
			return this.is_public;
		}

		public String due_at;

		public String getDue_at() {
			return this.due_at;
		}

		public String satisfaction_rating_score;

		public String getSatisfaction_rating_score() {
			return this.satisfaction_rating_score;
		}

		public Long followup_ids;

		public Long getFollowup_ids() {
			return this.followup_ids;
		}

		public Long brand_id;

		public Long getBrand_id() {
			return this.brand_id;
		}

		public String allow_channelback;

		public String getAllow_channelback() {
			return this.allow_channelback;
		}

		public String allow_attachments;

		public String getAllow_attachments() {
			return this.allow_attachments;
		}

		public Integer generated_timestamp;

		public Integer getGenerated_timestamp() {
			return this.generated_timestamp;
		}

		public String created_sr;

		public String getCreated_sr() {
			return this.created_sr;
		}

		public String updated_sr;

		public String getUpdated_sr() {
			return this.updated_sr;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EDW_ETL_ADITYA_zendesk_tickets,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.external_id = null;
					} else {
						this.external_id = dis.readLong();
					}

					this.channel = readString(dis);

					this.email_from_address = readString(dis);

					this.email_from_name = readString(dis);

					this.email_to_name = readString(dis);

					this.email_to_address = readString(dis);

					this.created_at = readString(dis);

					this.updated_at = readString(dis);

					this.type = readString(dis);

					this.subject = readString(dis);

					this.raw_subject = readString(dis);

					this.description = readString(dis);

					this.priority = readString(dis);

					this.status = readString(dis);

					this.recipient = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.requester_id = null;
					} else {
						this.requester_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.submitter_id = null;
					} else {
						this.submitter_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.assignee_id = null;
					} else {
						this.assignee_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.organization_id = null;
					} else {
						this.organization_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.group_id = null;
					} else {
						this.group_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.collaborator_ids = null;
					} else {
						this.collaborator_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.follower_ids = null;
					} else {
						this.follower_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.email_cc_ids = null;
					} else {
						this.email_cc_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.forum_topic_id = null;
					} else {
						this.forum_topic_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.problem_id = null;
					} else {
						this.problem_id = dis.readLong();
					}

					this.has_incidents = readString(dis);

					this.is_public = readString(dis);

					this.due_at = readString(dis);

					this.satisfaction_rating_score = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.followup_ids = null;
					} else {
						this.followup_ids = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.brand_id = null;
					} else {
						this.brand_id = dis.readLong();
					}

					this.allow_channelback = readString(dis);

					this.allow_attachments = readString(dis);

					this.generated_timestamp = readInteger(dis);

					this.created_sr = readString(dis);

					this.updated_sr = readString(dis);

					this.tags = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

				// Long

				if (this.external_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.external_id);
				}

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.email_from_address, dos);

				// String

				writeString(this.email_from_name, dos);

				// String

				writeString(this.email_to_name, dos);

				// String

				writeString(this.email_to_address, dos);

				// String

				writeString(this.created_at, dos);

				// String

				writeString(this.updated_at, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.subject, dos);

				// String

				writeString(this.raw_subject, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.priority, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.recipient, dos);

				// Long

				if (this.requester_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.requester_id);
				}

				// Long

				if (this.submitter_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.submitter_id);
				}

				// Long

				if (this.assignee_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.assignee_id);
				}

				// Long

				if (this.organization_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.organization_id);
				}

				// Long

				if (this.group_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.group_id);
				}

				// Long

				if (this.collaborator_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.collaborator_ids);
				}

				// Long

				if (this.follower_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.follower_ids);
				}

				// Long

				if (this.email_cc_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.email_cc_ids);
				}

				// Long

				if (this.forum_topic_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.forum_topic_id);
				}

				// Long

				if (this.problem_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.problem_id);
				}

				// String

				writeString(this.has_incidents, dos);

				// String

				writeString(this.is_public, dos);

				// String

				writeString(this.due_at, dos);

				// String

				writeString(this.satisfaction_rating_score, dos);

				// Long

				if (this.followup_ids == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.followup_ids);
				}

				// Long

				if (this.brand_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.brand_id);
				}

				// String

				writeString(this.allow_channelback, dos);

				// String

				writeString(this.allow_attachments, dos);

				// Integer

				writeInteger(this.generated_timestamp, dos);

				// String

				writeString(this.created_sr, dos);

				// String

				writeString(this.updated_sr, dos);

				// String

				writeString(this.tags, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",external_id=" + String.valueOf(external_id));
			sb.append(",channel=" + channel);
			sb.append(",email_from_address=" + email_from_address);
			sb.append(",email_from_name=" + email_from_name);
			sb.append(",email_to_name=" + email_to_name);
			sb.append(",email_to_address=" + email_to_address);
			sb.append(",created_at=" + created_at);
			sb.append(",updated_at=" + updated_at);
			sb.append(",type=" + type);
			sb.append(",subject=" + subject);
			sb.append(",raw_subject=" + raw_subject);
			sb.append(",description=" + description);
			sb.append(",priority=" + priority);
			sb.append(",status=" + status);
			sb.append(",recipient=" + recipient);
			sb.append(",requester_id=" + String.valueOf(requester_id));
			sb.append(",submitter_id=" + String.valueOf(submitter_id));
			sb.append(",assignee_id=" + String.valueOf(assignee_id));
			sb.append(",organization_id=" + String.valueOf(organization_id));
			sb.append(",group_id=" + String.valueOf(group_id));
			sb.append(",collaborator_ids=" + String.valueOf(collaborator_ids));
			sb.append(",follower_ids=" + String.valueOf(follower_ids));
			sb.append(",email_cc_ids=" + String.valueOf(email_cc_ids));
			sb.append(",forum_topic_id=" + String.valueOf(forum_topic_id));
			sb.append(",problem_id=" + String.valueOf(problem_id));
			sb.append(",has_incidents=" + has_incidents);
			sb.append(",is_public=" + is_public);
			sb.append(",due_at=" + due_at);
			sb.append(",satisfaction_rating_score=" + satisfaction_rating_score);
			sb.append(",followup_ids=" + String.valueOf(followup_ids));
			sb.append(",brand_id=" + String.valueOf(brand_id));
			sb.append(",allow_channelback=" + allow_channelback);
			sb.append(",allow_attachments=" + allow_attachments);
			sb.append(",generated_timestamp="
					+ String.valueOf(generated_timestamp));
			sb.append(",created_sr=" + created_sr);
			sb.append(",updated_sr=" + updated_sr);
			sb.append(",tags=" + tags);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EDW_ETL_ADITYA_zendesk_tickets,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_zendesk_tickets.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_EDW_ETL_ADITYA_zendesk_tickets,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_zendesk_tickets, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_zendesk_tickets) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;
				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tLoop_1 begin ] start
				 */

				int NB_ITERATE_tHttpRequest_1 = 0; // for statistics

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				;

				while (((Boolean) globalMap.get("RunLoop"))) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_ITERATION",
							current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */

					/**
					 * [tLoop_1 process_data_begin ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_begin ] stop
					 */
					NB_ITERATE_tHttpRequest_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("out1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec"
								+ NB_ITERATE_tHttpRequest_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tLogRow_2 begin ] start
					 */

					ok_Hash.put("tLogRow_2", false);
					start_Hash.put("tLogRow_2", System.currentTimeMillis());

					currentComponent = "tLogRow_2";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("out1" + iterateId,
									0, 0);

						}
					}

					int tos_count_tLogRow_2 = 0;

					// /////////////////////

					final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
					java.io.PrintStream consoleOut_tLogRow_2 = null;

					StringBuilder strBuffer_tLogRow_2 = null;
					int nb_line_tLogRow_2 = 0;
					// /////////////////////

					/**
					 * [tLogRow_2 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row3" + iterateId,
									0, 0);

						}
					}

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out1Struct out1_tmp = new out1Struct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tExtractJSONFields_1 begin ] start
					 */

					ok_Hash.put("tExtractJSONFields_1", false);
					start_Hash.put("tExtractJSONFields_1",
							System.currentTimeMillis());

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row2" + iterateId,
									0, 0);

						}
					}

					int tos_count_tExtractJSONFields_1 = 0;

					int nb_line_tExtractJSONFields_1 = 0;
					String jsonStr_tExtractJSONFields_1 = "";

					class ConvertJSONString_tExtractJSONFields_1 {
						final static int Brace = 0; // {
						final static int Bracket = 1; // [
						private int barceType = -1;
						private String originalJsonString = "";
						private String originalLoopString = "";
						private String jsonString4XML = null;
						private String loopString4XML = null;
						private String additionRoot = null;

						public void barceType() {

							for (int c = 0; c < originalJsonString.length(); ++c) {
								if (originalJsonString.charAt(c) == '{') {
									barceType = Brace;
									break;
								} else if (originalJsonString.charAt(c) == '[') {
									barceType = Bracket;
									break;
								}
							}
						}

						public void setJsonString(String originalJsonString) {
							this.originalJsonString = originalJsonString;
						}

						public void setLoopString(String originalLoopString) {
							this.originalLoopString = originalLoopString;
						}

						public String getJsonString4XML() {
							return jsonString4XML;
						}

						public String getLoopString4XML() {
							if (loopString4XML.length() > 1
									&& loopString4XML.endsWith("/")) {
								loopString4XML = loopString4XML.substring(0,
										loopString4XML.length() - 1);
							}
							return loopString4XML;
						}

						public void setAdditionRoot(String additionRoot) {
							this.additionRoot = additionRoot;
						}

						public String getAdditionRoot() {
							return additionRoot;
						}

						public void generate() {
							barceType();
							jsonString4XML = originalJsonString;
							loopString4XML = originalLoopString;
							if (Brace == barceType) {
								if (isNeedAddRoot(originalJsonString)) {
									jsonString4XML = "{ \"root\": "
											+ originalJsonString + " }";
									loopString4XML = "root"
											+ originalLoopString;
									setAdditionRoot("root");
								}
							} else if (Bracket == barceType) {
								jsonString4XML = "{ \"root\" : { \"object\": "
										+ originalJsonString + " } }";
								loopString4XML = "root/object"
										+ originalLoopString;
								setAdditionRoot("object");
							}
						}

						public boolean isNeedAddRoot(String originalJsonString) {
							boolean isNeedAddRoot = false;
							net.sf.json.JSONObject jso = net.sf.json.JSONObject
									.fromObject(originalJsonString);
							String jsonKey = "";
							Object firstObject = null;
							if (jso.names().size() == 1) {
								jsonKey = jso.names().get(0).toString();
								firstObject = jso.get(jsonKey);
							}
							if (jso.size() > 1
									|| (firstObject != null
											&& firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
											.size() > 1)) {
								isNeedAddRoot = true;
							}
							return isNeedAddRoot;
						}

					}

					ConvertJSONString_tExtractJSONFields_1 cjs_tExtractJSONFields_1 = new ConvertJSONString_tExtractJSONFields_1();

					de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
							.multiplePI(false).build();
					de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLInputFactory(
							config_tExtractJSONFields_1);
					javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_1 = javax.xml.stream.XMLOutputFactory
							.newInstance();
					boolean isGetWholeJson_tExtractJSONFields_1 = false;

					class OriginalJSONString_tExtractJSONFields_1 {
					}

					OriginalJSONString_tExtractJSONFields_1 originalJSONString_tExtractJSONFields_1 = new OriginalJSONString_tExtractJSONFields_1();

					class XML_API_tExtractJSONFields_1 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					String xmlStr_tExtractJSONFields_1 = "";

					XML_API_tExtractJSONFields_1 xml_api_tExtractJSONFields_1 = new XML_API_tExtractJSONFields_1();

					/**
					 * [tExtractJSONFields_1 begin ] stop
					 */

					/**
					 * [tLogRow_1 begin ] start
					 */

					ok_Hash.put("tLogRow_1", false);
					start_Hash.put("tLogRow_1", System.currentTimeMillis());

					currentComponent = "tLogRow_1";

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null) {

							runStat.updateStatOnConnection("row1" + iterateId,
									0, 0);

						}
					}

					int tos_count_tLogRow_1 = 0;

					// /////////////////////

					class Util_tLogRow_1 {

						String[] des_top = { ".", ".", "-", "+" };

						String[] des_head = { "|=", "=|", "-", "+" };

						String[] des_bottom = { "'", "'", "-", "+" };

						String name = "";

						java.util.List<String[]> list = new java.util.ArrayList<String[]>();

						int[] colLengths = new int[1];

						public void addRow(String[] row) {

							for (int i = 0; i < 1; i++) {
								if (row[i] != null) {
									colLengths[i] = Math.max(colLengths[i],
											row[i].length());
								}
							}
							list.add(row);
						}

						public void setTableName(String name) {

							this.name = name;
						}

						public StringBuilder format() {

							StringBuilder sb = new StringBuilder();

							sb.append(print(des_top));

							int totals = 0;
							for (int i = 0; i < colLengths.length; i++) {
								totals = totals + colLengths[i];
							}

							// name
							sb.append("|");
							int k = 0;
							for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
								sb.append(' ');
							}
							sb.append(name);
							for (int i = 0; i < totals + 0 - name.length() - k; i++) {
								sb.append(' ');
							}
							sb.append("|\n");

							// head and rows
							sb.append(print(des_head));
							for (int i = 0; i < list.size(); i++) {

								String[] row = list.get(i);

								java.util.Formatter formatter = new java.util.Formatter(
										new StringBuilder());

								StringBuilder sbformat = new StringBuilder();
								sbformat.append("|%1$-");
								sbformat.append(colLengths[0]);
								sbformat.append("s");

								sbformat.append("|\n");

								formatter.format(sbformat.toString(),
										(Object[]) row);

								sb.append(formatter.toString());
								if (i == 0)
									sb.append(print(des_head)); // print the
																// head
							}

							// end
							sb.append(print(des_bottom));
							return sb;
						}

						private StringBuilder print(String[] fillChars) {
							StringBuilder sb = new StringBuilder();
							// first column
							sb.append(fillChars[0]);

							// last column
							for (int i = 0; i < colLengths[0]
									- fillChars[0].length()
									- fillChars[1].length() + 2; i++) {
								sb.append(fillChars[2]);
							}
							sb.append(fillChars[1]);
							sb.append("\n");
							return sb;
						}

						public boolean isTableEmpty() {
							if (list.size() > 1)
								return false;
							return true;
						}
					}
					Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
					util_tLogRow_1.setTableName("tLogRow_1");
					util_tLogRow_1.addRow(new String[] { "ResponseContent", });
					StringBuilder strBuffer_tLogRow_1 = null;
					int nb_line_tLogRow_1 = 0;
					// /////////////////////

					/**
					 * [tLogRow_1 begin ] stop
					 */

					/**
					 * [tHttpRequest_1 begin ] start
					 */

					ok_Hash.put("tHttpRequest_1", false);
					start_Hash
							.put("tHttpRequest_1", System.currentTimeMillis());

					currentComponent = "tHttpRequest_1";

					int tos_count_tHttpRequest_1 = 0;

					/**
					 * [tHttpRequest_1 begin ] stop
					 */

					/**
					 * [tHttpRequest_1 main ] start
					 */

					currentComponent = "tHttpRequest_1";

					int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30) * 1000;
					int readTimeOut_tHttpRequest_1 = Integer.valueOf(0) * 1000;

					java.net.URL url_tHttpRequest_1 = new java.net.URL(
							"https://tommyjohnwear.zendesk.com/api/v2/incremental/tickets.json?per_page=1000&start_time="
									+ (globalMap.get("generated_timestamp")));

					java.net.Authenticator
							.setDefault(new java.net.Authenticator() {
								protected java.net.PasswordAuthentication getPasswordAuthentication() {

									final String decryptedPassword_tHttpRequest_1 = routines.system.PasswordEncryptUtil
											.decryptPassword("77c3108ae71963767e923a0eebbd52bd");

									return new java.net.PasswordAuthentication(
											"bi@tommyjohnwear.com",
											decryptedPassword_tHttpRequest_1
													.toCharArray());
								}
							});
					java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
							.openConnection();
					urlConn_tHttpRequest_1.setRequestMethod("GET");
					urlConn_tHttpRequest_1.setDoOutput(true);
					urlConn_tHttpRequest_1.setDoInput(true);
					urlConn_tHttpRequest_1.setUseCaches(false);

					urlConn_tHttpRequest_1.setRequestProperty("accept",
							"application/json");
					boolean connected_tHttpRequest_1 = false;
					int responseCode_tHttpRequest_1 = 0;
					globalMap.put("tHttpRequest_1_CONNECTED", false);
					try {
						urlConn_tHttpRequest_1.connect();
						connected_tHttpRequest_1 = true;
						globalMap.put("tHttpRequest_1_CONNECTED", true);

						byte[] buffer_tHttpRequest_1 = new byte[1024];
						int bos_buffer_tHttpRequest_1 = 0;
						StringBuilder sb_tHttpRequest_1 = new StringBuilder();

						responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getResponseCode();
						globalMap.put("tHttpRequest_1_RESPONSE_CODE",
								responseCode_tHttpRequest_1);

						if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
							java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
									urlConn_tHttpRequest_1.getInputStream());
							while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
									.read(buffer_tHttpRequest_1)) != -1) {
								sb_tHttpRequest_1.append(new String(
										buffer_tHttpRequest_1, 0,
										bos_buffer_tHttpRequest_1));
							}
							bis_tHttpRequest_1.close();
						} else {
							String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1
									.getResponseMessage();

							// get details response information which will be
							// used when error appear
							java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1
									.getErrorStream();
							if (err_stream_tHttpRequest_1 != null) {
								java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(
										err_stream_tHttpRequest_1);
								java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();

								byte[] buf_tHttpRequest_1 = new byte[1024];
								int read_tHttpRequest_1 = -1;
								try {
									while ((read_tHttpRequest_1 = es_tHttpRequest_1
											.read(buf_tHttpRequest_1)) > 0) {
										baos_tHttpRequest_1.write(
												buf_tHttpRequest_1, 0,
												read_tHttpRequest_1);
									}
								} finally {
									es_tHttpRequest_1.close();
								}

								responseMessage_tHttpRequest_1 += ("\n" + new String(
										baos_tHttpRequest_1.toByteArray()));
							}

							System.err.println(responseCode_tHttpRequest_1
									+ " " + responseMessage_tHttpRequest_1);
							globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
									"Request failed:"
											+ responseCode_tHttpRequest_1 + " "
											+ responseMessage_tHttpRequest_1);
						}

						row1.ResponseContent = sb_tHttpRequest_1.toString();
						urlConn_tHttpRequest_1.disconnect();
					} catch (Exception e) {
						System.err.println(e.getMessage());
						globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
								e.getMessage());
					}

					tos_count_tHttpRequest_1++;

					/**
					 * [tHttpRequest_1 main ] stop
					 */

					/**
					 * [tHttpRequest_1 process_data_begin ] start
					 */

					currentComponent = "tHttpRequest_1";

					/**
					 * [tHttpRequest_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					// /////////////////////

					String[] row_tLogRow_1 = new String[1];

					if (row1.ResponseContent != null) { //
						row_tLogRow_1[0] = String.valueOf(row1.ResponseContent);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					row2 = row1;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tExtractJSONFields_1 main ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					if (row2.ResponseContent != null) {// C_01
						jsonStr_tExtractJSONFields_1 = row2.ResponseContent
								.toString();

						row3 = null;

						org.dom4j.io.SAXReader reader_tExtractJSONFields_1 = new org.dom4j.io.SAXReader();
						org.dom4j.Document doc_tExtractJSONFields_1 = null;
						java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_1 = new java.util.HashMap<String, String>();
						org.dom4j.XPath x_tExtractJSONFields_1 = null;
						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_1 = null;
						boolean isStructError_tExtractJSONFields_1 = true;

						String loopQuery_tExtractJSONFields_1 = "/tickets";
						String oraginalJsonStr_tExtractJSONFields_1 = jsonStr_tExtractJSONFields_1;
						cjs_tExtractJSONFields_1
								.setJsonString(jsonStr_tExtractJSONFields_1);
						cjs_tExtractJSONFields_1
								.setLoopString(loopQuery_tExtractJSONFields_1);
						java.io.ByteArrayInputStream bais_tExtractJSONFields_1 = null;
						java.io.ByteArrayOutputStream baos_tExtractJSONFields_1 = new java.io.ByteArrayOutputStream();
						try {
							cjs_tExtractJSONFields_1.generate();
							jsonStr_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
									.getJsonString4XML();
							loopQuery_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
									.getLoopString4XML();
							bais_tExtractJSONFields_1 = new ByteArrayInputStream(
									jsonStr_tExtractJSONFields_1
											.getBytes("UTF-8"));
							javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_1 = jsonXMLInputFactory_tExtractJSONFields_1
									.createXMLEventReader(bais_tExtractJSONFields_1);
							javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_1 = xmlOutputFactory_tExtractJSONFields_1
									.createXMLEventWriter(
											baos_tExtractJSONFields_1, "UTF-8");
							xmLEventWriter_tExtractJSONFields_1
									.add(xmlEventReader_tExtractJSONFields_1);
							// convert json string to xml
							xmlStr_tExtractJSONFields_1 = baos_tExtractJSONFields_1
									.toString();
							xmLEventWriter_tExtractJSONFields_1.close();
							xmlEventReader_tExtractJSONFields_1.close();

							doc_tExtractJSONFields_1 = reader_tExtractJSONFields_1
									.read(new java.io.StringReader(
											xmlStr_tExtractJSONFields_1));
							x_tExtractJSONFields_1 = doc_tExtractJSONFields_1
									.createXPath(loopQuery_tExtractJSONFields_1);
							x_tExtractJSONFields_1
									.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
							nodeList_tExtractJSONFields_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractJSONFields_1
									.selectNodes(doc_tExtractJSONFields_1);
							isStructError_tExtractJSONFields_1 = false;

						} catch (java.lang.Exception ex_tExtractJSONFields_1) {
							System.err.println(ex_tExtractJSONFields_1
									.getMessage());
						} finally {
							baos_tExtractJSONFields_1.close();
							if (bais_tExtractJSONFields_1 != null) {
								bais_tExtractJSONFields_1.close();
							}
						}

						org.dom4j.Node node_tExtractJSONFields_1 = null;
						String str_tExtractJSONFields_1 = "";
						for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
								|| (nodeList_tExtractJSONFields_1 != null && i_tExtractJSONFields_1 < nodeList_tExtractJSONFields_1
										.size()); i_tExtractJSONFields_1++) {

							if (!isStructError_tExtractJSONFields_1) {
								row3 = null;
								row3 = new row3Struct();

								org.dom4j.tree.AbstractNode temp_tExtractJSONFields_1 = nodeList_tExtractJSONFields_1
										.get(i_tExtractJSONFields_1);

								nb_line_tExtractJSONFields_1++;
								try {
									org.dom4j.XPath xTmp0_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("id");
									xTmp0_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj0_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj0_tExtractJSONFields_1 instanceof String
											|| obj0_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj0_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.id = null;
									} else {

										row3.id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp1_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("external_id");
									xTmp1_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj1_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj1_tExtractJSONFields_1 instanceof String
											|| obj1_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj1_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.external_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.external_id = null;
									} else {

										row3.external_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp2_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("via/channel");
									xTmp2_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj2_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj2_tExtractJSONFields_1 instanceof String
											|| obj2_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj2_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp2_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.channel = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.channel = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.channel = null;
									} else {

										row3.channel = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp3_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("via/source/from/address");
									xTmp3_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj3_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj3_tExtractJSONFields_1 instanceof String
											|| obj3_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj3_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp3_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.email_from_address = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.email_from_address = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.email_from_address = null;
									} else {

										row3.email_from_address = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp4_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("via/source/from/name");
									xTmp4_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj4_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj4_tExtractJSONFields_1 instanceof String
											|| obj4_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj4_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp4_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.email_from_name = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.email_from_name = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.email_from_name = null;
									} else {

										row3.email_from_name = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp5_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("via/source/to/name");
									xTmp5_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj5_tExtractJSONFields_1 = xTmp5_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj5_tExtractJSONFields_1 instanceof String
											|| obj5_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj5_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp5_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp5_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.email_to_name = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.email_to_name = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.email_to_name = null;
									} else {

										row3.email_to_name = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp6_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("via/source/to/address");
									xTmp6_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj6_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj6_tExtractJSONFields_1 instanceof String
											|| obj6_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj6_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp6_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.email_to_address = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.email_to_address = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.email_to_address = null;
									} else {

										row3.email_to_address = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp9_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("type");
									xTmp9_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj9_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj9_tExtractJSONFields_1 instanceof String
											|| obj9_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj9_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp9_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.type = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.type = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.type = null;
									} else {

										row3.type = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp10_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("subject");
									xTmp10_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj10_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj10_tExtractJSONFields_1 instanceof String
											|| obj10_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj10_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp10_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.subject = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.subject = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.subject = null;
									} else {

										row3.subject = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp11_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("raw_subject");
									xTmp11_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj11_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj11_tExtractJSONFields_1 instanceof String
											|| obj11_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj11_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp11_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.raw_subject = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.raw_subject = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.raw_subject = null;
									} else {

										row3.raw_subject = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp12_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("description");
									xTmp12_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj12_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj12_tExtractJSONFields_1 instanceof String
											|| obj12_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj12_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp12_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.description = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.description = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.description = null;
									} else {

										row3.description = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp13_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("priority");
									xTmp13_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj13_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj13_tExtractJSONFields_1 instanceof String
											|| obj13_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj13_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp13_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.priority = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.priority = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.priority = null;
									} else {

										row3.priority = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp14_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("status");
									xTmp14_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj14_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj14_tExtractJSONFields_1 instanceof String
											|| obj14_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj14_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp14_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.status = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.status = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.status = null;
									} else {

										row3.status = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp15_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("recipient");
									xTmp15_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj15_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj15_tExtractJSONFields_1 instanceof String
											|| obj15_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj15_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp15_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.recipient = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.recipient = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.recipient = null;
									} else {

										row3.recipient = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp16_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("requester_id");
									xTmp16_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj16_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj16_tExtractJSONFields_1 instanceof String
											|| obj16_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj16_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp16_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.requester_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.requester_id = null;
									} else {

										row3.requester_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp17_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("submitter_id");
									xTmp17_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj17_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj17_tExtractJSONFields_1 instanceof String
											|| obj17_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj17_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp17_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.submitter_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.submitter_id = null;
									} else {

										row3.submitter_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp18_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("assignee_id");
									xTmp18_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj18_tExtractJSONFields_1 = xTmp18_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj18_tExtractJSONFields_1 instanceof String
											|| obj18_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj18_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp18_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp18_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.assignee_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.assignee_id = null;
									} else {

										row3.assignee_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp19_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("organization_id");
									xTmp19_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj19_tExtractJSONFields_1 = xTmp19_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj19_tExtractJSONFields_1 instanceof String
											|| obj19_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj19_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp19_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp19_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.organization_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.organization_id = null;
									} else {

										row3.organization_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp20_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("group_id");
									xTmp20_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj20_tExtractJSONFields_1 = xTmp20_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj20_tExtractJSONFields_1 instanceof String
											|| obj20_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj20_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp20_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp20_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.group_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.group_id = null;
									} else {

										row3.group_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp21_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("collaborator_ids");
									xTmp21_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj21_tExtractJSONFields_1 = xTmp21_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj21_tExtractJSONFields_1 instanceof String
											|| obj21_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj21_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp21_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp21_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.collaborator_ids = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.collaborator_ids = null;
									} else {

										row3.collaborator_ids = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp22_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("follower_ids");
									xTmp22_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj22_tExtractJSONFields_1 = xTmp22_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj22_tExtractJSONFields_1 instanceof String
											|| obj22_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj22_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp22_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp22_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.follower_ids = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.follower_ids = null;
									} else {

										row3.follower_ids = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp23_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("email_cc_ids");
									xTmp23_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj23_tExtractJSONFields_1 = xTmp23_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj23_tExtractJSONFields_1 instanceof String
											|| obj23_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj23_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp23_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp23_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.email_cc_ids = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.email_cc_ids = null;
									} else {

										row3.email_cc_ids = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp24_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("forum_topic_id");
									xTmp24_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj24_tExtractJSONFields_1 = xTmp24_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj24_tExtractJSONFields_1 instanceof String
											|| obj24_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj24_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp24_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp24_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.forum_topic_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.forum_topic_id = null;
									} else {

										row3.forum_topic_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp25_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("problem_id");
									xTmp25_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj25_tExtractJSONFields_1 = xTmp25_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj25_tExtractJSONFields_1 instanceof String
											|| obj25_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj25_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp25_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp25_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.problem_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.problem_id = null;
									} else {

										row3.problem_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp26_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("has_incidents");
									xTmp26_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj26_tExtractJSONFields_1 = xTmp26_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj26_tExtractJSONFields_1 instanceof String
											|| obj26_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj26_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp26_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp26_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.has_incidents = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.has_incidents = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.has_incidents = null;
									} else {

										row3.has_incidents = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp27_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("is_public");
									xTmp27_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj27_tExtractJSONFields_1 = xTmp27_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj27_tExtractJSONFields_1 instanceof String
											|| obj27_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj27_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp27_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp27_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.is_public = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.is_public = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.is_public = null;
									} else {

										row3.is_public = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp28_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("due_at");
									xTmp28_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj28_tExtractJSONFields_1 = xTmp28_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj28_tExtractJSONFields_1 instanceof String
											|| obj28_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj28_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp28_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp28_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.due_at = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.due_at = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.due_at = null;
									} else {

										row3.due_at = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp29_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("satisfaction_rating/score");
									xTmp29_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj29_tExtractJSONFields_1 = xTmp29_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj29_tExtractJSONFields_1 instanceof String
											|| obj29_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj29_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp29_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp29_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.satisfaction_rating_score = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.satisfaction_rating_score = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.satisfaction_rating_score = null;
									} else {

										row3.satisfaction_rating_score = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp30_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("followup_ids");
									xTmp30_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj30_tExtractJSONFields_1 = xTmp30_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj30_tExtractJSONFields_1 instanceof String
											|| obj30_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj30_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp30_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp30_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.followup_ids = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.followup_ids = null;
									} else {

										row3.followup_ids = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp31_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("brand_id");
									xTmp31_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj31_tExtractJSONFields_1 = xTmp31_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj31_tExtractJSONFields_1 instanceof String
											|| obj31_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj31_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp31_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp31_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.brand_id = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.brand_id = null;
									} else {

										row3.brand_id = ParserUtils
												.parseTo_Long(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp32_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("allow_channelback");
									xTmp32_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj32_tExtractJSONFields_1 = xTmp32_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj32_tExtractJSONFields_1 instanceof String
											|| obj32_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj32_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp32_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp32_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.allow_channelback = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.allow_channelback = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.allow_channelback = null;
									} else {

										row3.allow_channelback = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp33_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("allow_attachments");
									xTmp33_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj33_tExtractJSONFields_1 = xTmp33_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj33_tExtractJSONFields_1 instanceof String
											|| obj33_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj33_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp33_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp33_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.allow_attachments = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.allow_attachments = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.allow_attachments = null;
									} else {

										row3.allow_attachments = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp34_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("generated_timestamp");
									xTmp34_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj34_tExtractJSONFields_1 = xTmp34_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj34_tExtractJSONFields_1 instanceof String
											|| obj34_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj34_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp34_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp34_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.generated_timestamp = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)
											|| xml_api_tExtractJSONFields_1
													.isMissing(node_tExtractJSONFields_1)) {
										row3.generated_timestamp = null;
									} else {

										row3.generated_timestamp = ParserUtils
												.parseTo_Integer(str_tExtractJSONFields_1);

									}

									org.dom4j.XPath xTmp35_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("created_at");
									xTmp35_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj35_tExtractJSONFields_1 = xTmp35_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj35_tExtractJSONFields_1 instanceof String
											|| obj35_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj35_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp35_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp35_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.created_sr = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.created_sr = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.created_sr = null;
									} else {

										row3.created_sr = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp36_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("updated_at");
									xTmp36_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj36_tExtractJSONFields_1 = xTmp36_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj36_tExtractJSONFields_1 instanceof String
											|| obj36_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj36_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp36_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp36_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.updated_sr = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.updated_sr = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.updated_sr = null;
									} else {

										row3.updated_sr = str_tExtractJSONFields_1;

									}

									org.dom4j.XPath xTmp37_tExtractJSONFields_1 = temp_tExtractJSONFields_1
											.createXPath("tags");
									xTmp37_tExtractJSONFields_1
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
									Object obj37_tExtractJSONFields_1 = xTmp37_tExtractJSONFields_1
											.evaluate(temp_tExtractJSONFields_1);
									if (obj37_tExtractJSONFields_1 instanceof String
											|| obj37_tExtractJSONFields_1 instanceof Number) {
										node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
										str_tExtractJSONFields_1 = String
												.valueOf(obj37_tExtractJSONFields_1);
									} else {
										node_tExtractJSONFields_1 = xTmp37_tExtractJSONFields_1
												.selectSingleNode(temp_tExtractJSONFields_1);

										str_tExtractJSONFields_1 = xTmp37_tExtractJSONFields_1
												.valueOf(temp_tExtractJSONFields_1);

									}

									if (xml_api_tExtractJSONFields_1
											.isDefNull(node_tExtractJSONFields_1)) {
										row3.tags = null;
									} else if (xml_api_tExtractJSONFields_1
											.isEmpty(node_tExtractJSONFields_1)) {
										row3.tags = "";
									} else if (xml_api_tExtractJSONFields_1
											.isMissing(node_tExtractJSONFields_1)) {
										row3.tags = null;
									} else {

										row3.tags = str_tExtractJSONFields_1;

									}

								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1
											.getMessage());
									row3 = null;
								}
							}

							isStructError_tExtractJSONFields_1 = false;

							tos_count_tExtractJSONFields_1++;

							/**
							 * [tExtractJSONFields_1 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

									// # Output table : 'out1'
									out1_tmp.ticket_id = row3.id;
									out1_tmp.ticket_external_id = row3.external_id;
									out1_tmp.channel = row3.channel;
									out1_tmp.email_from_address = row3.email_from_address;
									out1_tmp.email_from_name = row3.email_from_name;
									out1_tmp.email_to_name = row3.email_to_name;
									out1_tmp.email_to_address = row3.email_to_address;
									out1_tmp.created_at = TalendDate.parseDate(
											"yyyy-MM-dd HH:mm:ss",
											row3.created_sr.substring(0, 19)
													.replace('T', ' '));
									out1_tmp.updated_at = TalendDate.parseDate(
											"yyyy-MM-dd HH:mm:ss",
											row3.updated_sr.substring(0, 19)
													.replace('T', ' '));
									out1_tmp.type = row3.type;
									out1_tmp.subject = row3.subject;
									out1_tmp.raw_subject = row3.raw_subject;
									out1_tmp.description = row3.description;
									out1_tmp.priority = row3.priority;
									out1_tmp.status = row3.status;
									out1_tmp.recipient = row3.recipient;
									out1_tmp.requester_id = row3.requester_id;
									out1_tmp.submitter_id = row3.submitter_id;
									out1_tmp.assignee_id = row3.assignee_id;
									out1_tmp.organization_id = row3.organization_id;
									out1_tmp.group_id = row3.group_id;
									out1_tmp.collaborator_ids = row3.collaborator_ids;
									out1_tmp.follower_ids = row3.follower_ids;
									out1_tmp.email_cc_ids = row3.email_cc_ids;
									out1_tmp.forum_topic_id = row3.forum_topic_id;
									out1_tmp.problem_id = row3.problem_id;
									out1_tmp.has_incidents = row3.has_incidents;
									out1_tmp.is_public = row3.is_public;
									out1_tmp.ticket_due_at = row3.due_at
											.equals("")
											|| row3.due_at.equals(null) ? null
											: TalendDate.parseDate(
													"yyyy-MM-dd HH:mm:ss",

													row3.due_at.replace('T',
															' '));
									out1_tmp.satisfaction_rating_score = row3.satisfaction_rating_score;
									out1_tmp.followup_ids = row3.followup_ids;
									out1_tmp.brand_id = row3.brand_id;
									out1_tmp.allow_channelback = row3.allow_channelback;
									out1_tmp.allow_attachments = row3.allow_attachments;
									out1_tmp.generated_timestamp = row3.generated_timestamp;
									out1_tmp.tags = row3.tags.replace('[', ' ')
											.replace(']', ' ')
											.replace('"', ' ');
									out1 = out1_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
								// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									// out1
									// out1

									if (execStat) {
										runStat.updateStatOnConnection("out1"
												+ iterateId, 1, 1);
									}

									// /////////////////////

									strBuffer_tLogRow_2 = new StringBuilder();

									if (out1.ticket_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.ticket_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.ticket_external_id != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.ticket_external_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.channel != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.channel));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.email_from_address != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.email_from_address));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.email_from_name != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.email_from_name));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.email_to_name != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.email_to_name));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.email_to_address != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.email_to_address));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.created_at != null) { //

										strBuffer_tLogRow_2
												.append(FormatterUtils
														.format_Date(
																out1.created_at,
																"dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.updated_at != null) { //

										strBuffer_tLogRow_2
												.append(FormatterUtils
														.format_Date(
																out1.updated_at,
																"dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.type != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.type));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.subject != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.subject));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.raw_subject != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.raw_subject));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.description != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.description));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.priority != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.priority));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.status != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.status));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.recipient != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.recipient));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.requester_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.requester_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.submitter_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.submitter_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.assignee_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.assignee_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.organization_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.organization_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.group_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.group_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.collaborator_ids != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.collaborator_ids));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.follower_ids != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.follower_ids));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.email_cc_ids != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.email_cc_ids));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.forum_topic_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.forum_topic_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.problem_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.problem_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.has_incidents != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.has_incidents));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.is_public != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.is_public));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.ticket_due_at != null) { //

										strBuffer_tLogRow_2
												.append(FormatterUtils
														.format_Date(
																out1.ticket_due_at,
																"dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.satisfaction_rating_score != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.satisfaction_rating_score));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.followup_ids != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.followup_ids));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.brand_id != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.brand_id));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.allow_channelback != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.allow_channelback));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.allow_attachments != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.allow_attachments));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.generated_timestamp != null) { //

										strBuffer_tLogRow_2
												.append(String
														.valueOf(out1.generated_timestamp));

									} //

									strBuffer_tLogRow_2.append("|");

									if (out1.tags != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out1.tags));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_2 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_2);
									}
									consoleOut_tLogRow_2
											.println(strBuffer_tLogRow_2
													.toString());
									consoleOut_tLogRow_2.flush();
									nb_line_tLogRow_2++;
									// ////

									// ////

									// /////////////////////

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

									/**
									 * [tLogRow_2 process_data_begin ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_2 process_data_end ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					/**
					 * [tExtractJSONFields_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tHttpRequest_1 process_data_end ] start
					 */

					currentComponent = "tHttpRequest_1";

					/**
					 * [tHttpRequest_1 process_data_end ] stop
					 */

					/**
					 * [tHttpRequest_1 end ] start
					 */

					currentComponent = "tHttpRequest_1";

					ok_Hash.put("tHttpRequest_1", true);
					end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

					/**
					 * [tHttpRequest_1 end ] stop
					 */

					/**
					 * [tLogRow_1 end ] start
					 */

					currentComponent = "tLogRow_1";

					// ////

					java.io.PrintStream consoleOut_tLogRow_1 = null;
					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}

					consoleOut_tLogRow_1.println(util_tLogRow_1.format()
							.toString());
					consoleOut_tLogRow_1.flush();
					// ////
					globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row1" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tLogRow_1", true);
					end_Hash.put("tLogRow_1", System.currentTimeMillis());

					/**
					 * [tLogRow_1 end ] stop
					 */

					/**
					 * [tExtractJSONFields_1 end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					globalMap.put("tExtractJSONFields_1_NB_LINE",
							nb_line_tExtractJSONFields_1);

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row2" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tExtractJSONFields_1", true);
					end_Hash.put("tExtractJSONFields_1",
							System.currentTimeMillis());

					/**
					 * [tExtractJSONFields_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("row3" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tLogRow_2 end ] start
					 */

					currentComponent = "tLogRow_2";

					// ////
					// ////
					globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

					// /////////////////////

					if (execStat) {
						if (resourceMap.get("inIterateVComp") == null
								|| !((Boolean) resourceMap
										.get("inIterateVComp"))) {
							runStat.updateStatOnConnection("out1" + iterateId,
									2, 0);
						}
					}

					ok_Hash.put("tLogRow_2", true);
					end_Hash.put("tLogRow_2", System.currentTimeMillis());

					/**
					 * [tLogRow_2 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec"
								+ NB_ITERATE_tHttpRequest_1);
					}

					/**
					 * [tLoop_1 process_data_end ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_end ] stop
					 */

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

					;

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				/**
				 * [tLoop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final zendesk_tickets zendesk_ticketsClass = new zendesk_tickets();

		int exitCode = zendesk_ticketsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = zendesk_tickets.class
					.getClassLoader().getResourceAsStream(
							"edw_etl_aditya/zendesk_tickets_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = zendesk_tickets.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("total_records", "id_Integer");

			try {
				context.total_records = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("total_records"));
			} catch (NumberFormatException e) {
				System.err.println(String.format(
						"Null value will be used for context parameter %s: %s",
						"total_records", e.getMessage()));
				context.total_records = null;
			}
			context.setContextType("Impact_Staging", "id_String");

			context.Impact_Staging = (String) context
					.getProperty("Impact_Staging");
			context.setContextType("accesskey", "id_String");

			context.accesskey = (String) context.getProperty("accesskey");
			context.setContextType("EDW_Database", "id_String");

			context.EDW_Database = (String) context.getProperty("EDW_Database");
			context.setContextType("EDW_Host", "id_String");

			context.EDW_Host = (String) context.getProperty("EDW_Host");
			context.setContextType("EDW_Password", "id_String");

			context.EDW_Password = (String) context.getProperty("EDW_Password");
			context.setContextType("EDW_Port", "id_String");

			context.EDW_Port = (String) context.getProperty("EDW_Port");
			context.setContextType("EDW_Schema", "id_String");

			context.EDW_Schema = (String) context.getProperty("EDW_Schema");
			context.setContextType("EDW_Username", "id_String");

			context.EDW_Username = (String) context.getProperty("EDW_Username");
			context.setContextType("secretkey", "id_Password");

			String pwd_secretkey_value = context.getProperty("secretkey");
			context.secretkey = null;
			if (pwd_secretkey_value != null) {
				if (context_param.containsKey("secretkey")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.secretkey = pwd_secretkey_value;
				} else if (!pwd_secretkey_value.isEmpty()) {
					try {
						context.secretkey = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_secretkey_value);
						context.put("secretkey", context.secretkey);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SH_Database", "id_String");

			context.SH_Database = (String) context.getProperty("SH_Database");
			context.setContextType("SH_Password", "id_String");

			context.SH_Password = (String) context.getProperty("SH_Password");
			context.setContextType("SH_Port", "id_String");

			context.SH_Port = (String) context.getProperty("SH_Port");
			context.setContextType("SH_RR_Host", "id_String");

			context.SH_RR_Host = (String) context.getProperty("SH_RR_Host");
			context.setContextType("SH_Username", "id_String");

			context.SH_Username = (String) context.getProperty("SH_Username");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("total_records")) {
				context.total_records = (Integer) parentContextMap
						.get("total_records");
			}
			if (parentContextMap.containsKey("Impact_Staging")) {
				context.Impact_Staging = (String) parentContextMap
						.get("Impact_Staging");
			}
			if (parentContextMap.containsKey("accesskey")) {
				context.accesskey = (String) parentContextMap.get("accesskey");
			}
			if (parentContextMap.containsKey("EDW_Database")) {
				context.EDW_Database = (String) parentContextMap
						.get("EDW_Database");
			}
			if (parentContextMap.containsKey("EDW_Host")) {
				context.EDW_Host = (String) parentContextMap.get("EDW_Host");
			}
			if (parentContextMap.containsKey("EDW_Password")) {
				context.EDW_Password = (String) parentContextMap
						.get("EDW_Password");
			}
			if (parentContextMap.containsKey("EDW_Port")) {
				context.EDW_Port = (String) parentContextMap.get("EDW_Port");
			}
			if (parentContextMap.containsKey("EDW_Schema")) {
				context.EDW_Schema = (String) parentContextMap
						.get("EDW_Schema");
			}
			if (parentContextMap.containsKey("EDW_Username")) {
				context.EDW_Username = (String) parentContextMap
						.get("EDW_Username");
			}
			if (parentContextMap.containsKey("secretkey")) {
				context.secretkey = (java.lang.String) parentContextMap
						.get("secretkey");
			}
			if (parentContextMap.containsKey("SH_Database")) {
				context.SH_Database = (String) parentContextMap
						.get("SH_Database");
			}
			if (parentContextMap.containsKey("SH_Password")) {
				context.SH_Password = (String) parentContextMap
						.get("SH_Password");
			}
			if (parentContextMap.containsKey("SH_Port")) {
				context.SH_Port = (String) parentContextMap.get("SH_Port");
			}
			if (parentContextMap.containsKey("SH_RR_Host")) {
				context.SH_RR_Host = (String) parentContextMap
						.get("SH_RR_Host");
			}
			if (parentContextMap.containsKey("SH_Username")) {
				context.SH_Username = (String) parentContextMap
						.get("SH_Username");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("secretkey");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : zendesk_tickets");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 214504 characters generated by Talend Open Studio for Data Integration on the
 * 7 February, 2020 4:05:45 PM IST
 ************************************************************************************************/
