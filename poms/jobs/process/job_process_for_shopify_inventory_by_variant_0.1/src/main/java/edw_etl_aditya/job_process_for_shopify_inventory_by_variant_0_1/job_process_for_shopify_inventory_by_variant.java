// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package edw_etl_aditya.job_process_for_shopify_inventory_by_variant_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: job_process_for_shopify_inventory_by_variant Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class job_process_for_shopify_inventory_by_variant implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (accesskey != null) {

				this.setProperty("accesskey", accesskey.toString());

			}

			if (accesskeyswap != null) {

				this.setProperty("accesskeyswap", accesskeyswap.toString());

			}

			if (EDW_Database != null) {

				this.setProperty("EDW_Database", EDW_Database.toString());

			}

			if (EDW_Host != null) {

				this.setProperty("EDW_Host", EDW_Host.toString());

			}

			if (EDW_Password != null) {

				this.setProperty("EDW_Password", EDW_Password.toString());

			}

			if (EDW_Port != null) {

				this.setProperty("EDW_Port", EDW_Port.toString());

			}

			if (EDW_Schema != null) {

				this.setProperty("EDW_Schema", EDW_Schema.toString());

			}

			if (EDW_Username != null) {

				this.setProperty("EDW_Username", EDW_Username.toString());

			}

			if (secretkey != null) {

				this.setProperty("secretkey", secretkey.toString());

			}

			if (secretkeyswap != null) {

				this.setProperty("secretkeyswap", secretkeyswap.toString());

			}

			if (SendMailFrom != null) {

				this.setProperty("SendMailFrom", SendMailFrom.toString());

			}

			if (SendMailPassword != null) {

				this.setProperty("SendMailPassword",
						SendMailPassword.toString());

			}

			if (SendMailTo != null) {

				this.setProperty("SendMailTo", SendMailTo.toString());

			}

			if (SendMailUsername != null) {

				this.setProperty("SendMailUsername",
						SendMailUsername.toString());

			}

			if (SH_Database != null) {

				this.setProperty("SH_Database", SH_Database.toString());

			}

			if (SH_Password != null) {

				this.setProperty("SH_Password", SH_Password.toString());

			}

			if (SH_Port != null) {

				this.setProperty("SH_Port", SH_Port.toString());

			}

			if (SH_RR_Host != null) {

				this.setProperty("SH_RR_Host", SH_RR_Host.toString());

			}

			if (SH_Username != null) {

				this.setProperty("SH_Username", SH_Username.toString());

			}

			if (SMTP_Host != null) {

				this.setProperty("SMTP_Host", SMTP_Host.toString());

			}

			if (SMTP_Port != null) {

				this.setProperty("SMTP_Port", SMTP_Port.toString());

			}

		}

		public String accesskey;

		public String getAccesskey() {
			return this.accesskey;
		}

		public String accesskeyswap;

		public String getAccesskeyswap() {
			return this.accesskeyswap;
		}

		public String EDW_Database;

		public String getEDW_Database() {
			return this.EDW_Database;
		}

		public String EDW_Host;

		public String getEDW_Host() {
			return this.EDW_Host;
		}

		public String EDW_Password;

		public String getEDW_Password() {
			return this.EDW_Password;
		}

		public String EDW_Port;

		public String getEDW_Port() {
			return this.EDW_Port;
		}

		public String EDW_Schema;

		public String getEDW_Schema() {
			return this.EDW_Schema;
		}

		public String EDW_Username;

		public String getEDW_Username() {
			return this.EDW_Username;
		}

		public java.lang.String secretkey;

		public java.lang.String getSecretkey() {
			return this.secretkey;
		}

		public java.lang.String secretkeyswap;

		public java.lang.String getSecretkeyswap() {
			return this.secretkeyswap;
		}

		public String SendMailFrom;

		public String getSendMailFrom() {
			return this.SendMailFrom;
		}

		public String SendMailPassword;

		public String getSendMailPassword() {
			return this.SendMailPassword;
		}

		public String SendMailTo;

		public String getSendMailTo() {
			return this.SendMailTo;
		}

		public String SendMailUsername;

		public String getSendMailUsername() {
			return this.SendMailUsername;
		}

		public String SH_Database;

		public String getSH_Database() {
			return this.SH_Database;
		}

		public String SH_Password;

		public String getSH_Password() {
			return this.SH_Password;
		}

		public String SH_Port;

		public String getSH_Port() {
			return this.SH_Port;
		}

		public String SH_RR_Host;

		public String getSH_RR_Host() {
			return this.SH_RR_Host;
		}

		public String SH_Username;

		public String getSH_Username() {
			return this.SH_Username;
		}

		public String SMTP_Host;

		public String getSMTP_Host() {
			return this.SMTP_Host;
		}

		public String SMTP_Port;

		public String getSMTP_Port() {
			return this.SMTP_Port;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "job_process_for_shopify_inventory_by_variant";
	private final String projectName = "EDW_ETL_ADITYA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					job_process_for_shopify_inventory_by_variant.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									job_process_for_shopify_inventory_by_variant.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];

		public Integer counts;

		public Integer getCounts() {
			return this.counts;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant) {

				try {

					int length = 0;

					this.counts = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.counts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("counts=" + String.valueOf(counts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select count(1) as counts from edw_process_logs_shopify_inventory where job_status = 'RUNNING' and job_name = 'shopify_"
						+ "inventory_by_variant'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.counts = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.counts = rs_tDBInput_1.getInt(1);
							} else {
								row1.counts = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// output_row.id = row1.id * 2;
						//
						// lowercase the name
						// output_row.name = row1.name.toLowerCase();

						globalMap.put("counts", row1.counts);

						System.out.println("count:" + globalMap.get("counts"));

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("counts")) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tDBRow_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1
						.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				query_tDBRow_1 = "insert into edw_process_logs_shopify_inventory (job_user, job_name, job_start, job_status) \nvalues ('"
						+ context.EDW_Username
						+ "','shopify_inventory_by_variant',current_timestamp,'RUNNING')";
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_2Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				if (resourceMap.get("statementClosed_tDBRow_1") == null) {
					java.sql.Statement stmtToClose_tDBRow_1 = null;
					if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_1")) != null) {
						stmtToClose_tDBRow_1.close();
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public static class outputStruct implements
			routines.system.IPersistableRow<outputStruct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];

		public Long product_id;

		public Long getProduct_id() {
			return this.product_id;
		}

		public String handle;

		public String getHandle() {
			return this.handle;
		}

		public String sku;

		public String getSku() {
			return this.sku;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public Long inventory_item_id;

		public Long getInventory_item_id() {
			return this.inventory_item_id;
		}

		public String variant_color;

		public String getVariant_color() {
			return this.variant_color;
		}

		public String variant_size;

		public String getVariant_size() {
			return this.variant_size;
		}

		public Integer is_product_active;

		public Integer getIs_product_active() {
			return this.is_product_active;
		}

		public Integer is_variant_active;

		public Integer getIs_variant_active() {
			return this.is_variant_active;
		}

		public String is_in_stock;

		public String getIs_in_stock() {
			return this.is_in_stock;
		}

		public Integer is_variant_live_on_site;

		public Integer getIs_variant_live_on_site() {
			return this.is_variant_live_on_site;
		}

		public Integer is_variant_in_stock;

		public Integer getIs_variant_in_stock() {
			return this.is_variant_in_stock;
		}

		public Integer is_variant_out_of_stock;

		public Integer getIs_variant_out_of_stock() {
			return this.is_variant_out_of_stock;
		}

		public java.util.Date published_at;

		public java.util.Date getPublished_at() {
			return this.published_at;
		}

		public Integer live_variant_count;

		public Integer getLive_variant_count() {
			return this.live_variant_count;
		}

		public Integer in_stock_variant_count;

		public Integer getIn_stock_variant_count() {
			return this.in_stock_variant_count;
		}

		public Integer out_of_stock_variant_count;

		public Integer getOut_of_stock_variant_count() {
			return this.out_of_stock_variant_count;
		}

		public Integer inventory_quantity;

		public Integer getInventory_quantity() {
			return this.inventory_quantity;
		}

		public Integer total_inventory_of_all_the_variants;

		public Integer getTotal_inventory_of_all_the_variants() {
			return this.total_inventory_of_all_the_variants;
		}

		public BigDecimal percentage_of_ooo;

		public BigDecimal getPercentage_of_ooo() {
			return this.percentage_of_ooo;
		}

		public java.util.Date edw_created_at;

		public java.util.Date getEdw_created_at() {
			return this.edw_created_at;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.product_id = null;
					} else {
						this.product_id = dis.readLong();
					}

					this.handle = readString(dis);

					this.sku = readString(dis);

					this.title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inventory_item_id = null;
					} else {
						this.inventory_item_id = dis.readLong();
					}

					this.variant_color = readString(dis);

					this.variant_size = readString(dis);

					this.is_product_active = readInteger(dis);

					this.is_variant_active = readInteger(dis);

					this.is_in_stock = readString(dis);

					this.is_variant_live_on_site = readInteger(dis);

					this.is_variant_in_stock = readInteger(dis);

					this.is_variant_out_of_stock = readInteger(dis);

					this.published_at = readDate(dis);

					this.live_variant_count = readInteger(dis);

					this.in_stock_variant_count = readInteger(dis);

					this.out_of_stock_variant_count = readInteger(dis);

					this.inventory_quantity = readInteger(dis);

					this.total_inventory_of_all_the_variants = readInteger(dis);

					this.percentage_of_ooo = (BigDecimal) dis.readObject();

					this.edw_created_at = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.product_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.product_id);
				}

				// String

				writeString(this.handle, dos);

				// String

				writeString(this.sku, dos);

				// String

				writeString(this.title, dos);

				// Long

				if (this.inventory_item_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.inventory_item_id);
				}

				// String

				writeString(this.variant_color, dos);

				// String

				writeString(this.variant_size, dos);

				// Integer

				writeInteger(this.is_product_active, dos);

				// Integer

				writeInteger(this.is_variant_active, dos);

				// String

				writeString(this.is_in_stock, dos);

				// Integer

				writeInteger(this.is_variant_live_on_site, dos);

				// Integer

				writeInteger(this.is_variant_in_stock, dos);

				// Integer

				writeInteger(this.is_variant_out_of_stock, dos);

				// java.util.Date

				writeDate(this.published_at, dos);

				// Integer

				writeInteger(this.live_variant_count, dos);

				// Integer

				writeInteger(this.in_stock_variant_count, dos);

				// Integer

				writeInteger(this.out_of_stock_variant_count, dos);

				// Integer

				writeInteger(this.inventory_quantity, dos);

				// Integer

				writeInteger(this.total_inventory_of_all_the_variants, dos);

				// BigDecimal

				dos.writeObject(this.percentage_of_ooo);

				// java.util.Date

				writeDate(this.edw_created_at, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("product_id=" + String.valueOf(product_id));
			sb.append(",handle=" + handle);
			sb.append(",sku=" + sku);
			sb.append(",title=" + title);
			sb.append(",inventory_item_id=" + String.valueOf(inventory_item_id));
			sb.append(",variant_color=" + variant_color);
			sb.append(",variant_size=" + variant_size);
			sb.append(",is_product_active=" + String.valueOf(is_product_active));
			sb.append(",is_variant_active=" + String.valueOf(is_variant_active));
			sb.append(",is_in_stock=" + is_in_stock);
			sb.append(",is_variant_live_on_site="
					+ String.valueOf(is_variant_live_on_site));
			sb.append(",is_variant_in_stock="
					+ String.valueOf(is_variant_in_stock));
			sb.append(",is_variant_out_of_stock="
					+ String.valueOf(is_variant_out_of_stock));
			sb.append(",published_at=" + String.valueOf(published_at));
			sb.append(",live_variant_count="
					+ String.valueOf(live_variant_count));
			sb.append(",in_stock_variant_count="
					+ String.valueOf(in_stock_variant_count));
			sb.append(",out_of_stock_variant_count="
					+ String.valueOf(out_of_stock_variant_count));
			sb.append(",inventory_quantity="
					+ String.valueOf(inventory_quantity));
			sb.append(",total_inventory_of_all_the_variants="
					+ String.valueOf(total_inventory_of_all_the_variants));
			sb.append(",percentage_of_ooo=" + String.valueOf(percentage_of_ooo));
			sb.append(",edw_created_at=" + String.valueOf(edw_created_at));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];

		public Long product_id;

		public Long getProduct_id() {
			return this.product_id;
		}

		public String handle;

		public String getHandle() {
			return this.handle;
		}

		public String sku;

		public String getSku() {
			return this.sku;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public Long inventory_item_id;

		public Long getInventory_item_id() {
			return this.inventory_item_id;
		}

		public String option1;

		public String getOption1() {
			return this.option1;
		}

		public String option2;

		public String getOption2() {
			return this.option2;
		}

		public Integer is_product_active;

		public Integer getIs_product_active() {
			return this.is_product_active;
		}

		public Integer is_variant_active;

		public Integer getIs_variant_active() {
			return this.is_variant_active;
		}

		public String is_in_stock;

		public String getIs_in_stock() {
			return this.is_in_stock;
		}

		public Integer is_variant_live_on_site;

		public Integer getIs_variant_live_on_site() {
			return this.is_variant_live_on_site;
		}

		public Integer is_variant_in_stock;

		public Integer getIs_variant_in_stock() {
			return this.is_variant_in_stock;
		}

		public Integer is_variant_out_of_stock;

		public Integer getIs_variant_out_of_stock() {
			return this.is_variant_out_of_stock;
		}

		public java.util.Date published_at;

		public java.util.Date getPublished_at() {
			return this.published_at;
		}

		public Integer live_variant_count;

		public Integer getLive_variant_count() {
			return this.live_variant_count;
		}

		public Integer in_stock_variant_count;

		public Integer getIn_stock_variant_count() {
			return this.in_stock_variant_count;
		}

		public Integer variant_out_of_stock;

		public Integer getVariant_out_of_stock() {
			return this.variant_out_of_stock;
		}

		public Integer inventory_quantity;

		public Integer getInventory_quantity() {
			return this.inventory_quantity;
		}

		public Integer total_inventory_of_all_the_variants;

		public Integer getTotal_inventory_of_all_the_variants() {
			return this.total_inventory_of_all_the_variants;
		}

		public BigDecimal percentage_of_ooo;

		public BigDecimal getPercentage_of_ooo() {
			return this.percentage_of_ooo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.product_id = null;
					} else {
						this.product_id = dis.readLong();
					}

					this.handle = readString(dis);

					this.sku = readString(dis);

					this.title = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inventory_item_id = null;
					} else {
						this.inventory_item_id = dis.readLong();
					}

					this.option1 = readString(dis);

					this.option2 = readString(dis);

					this.is_product_active = readInteger(dis);

					this.is_variant_active = readInteger(dis);

					this.is_in_stock = readString(dis);

					this.is_variant_live_on_site = readInteger(dis);

					this.is_variant_in_stock = readInteger(dis);

					this.is_variant_out_of_stock = readInteger(dis);

					this.published_at = readDate(dis);

					this.live_variant_count = readInteger(dis);

					this.in_stock_variant_count = readInteger(dis);

					this.variant_out_of_stock = readInteger(dis);

					this.inventory_quantity = readInteger(dis);

					this.total_inventory_of_all_the_variants = readInteger(dis);

					this.percentage_of_ooo = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.product_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.product_id);
				}

				// String

				writeString(this.handle, dos);

				// String

				writeString(this.sku, dos);

				// String

				writeString(this.title, dos);

				// Long

				if (this.inventory_item_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.inventory_item_id);
				}

				// String

				writeString(this.option1, dos);

				// String

				writeString(this.option2, dos);

				// Integer

				writeInteger(this.is_product_active, dos);

				// Integer

				writeInteger(this.is_variant_active, dos);

				// String

				writeString(this.is_in_stock, dos);

				// Integer

				writeInteger(this.is_variant_live_on_site, dos);

				// Integer

				writeInteger(this.is_variant_in_stock, dos);

				// Integer

				writeInteger(this.is_variant_out_of_stock, dos);

				// java.util.Date

				writeDate(this.published_at, dos);

				// Integer

				writeInteger(this.live_variant_count, dos);

				// Integer

				writeInteger(this.in_stock_variant_count, dos);

				// Integer

				writeInteger(this.variant_out_of_stock, dos);

				// Integer

				writeInteger(this.inventory_quantity, dos);

				// Integer

				writeInteger(this.total_inventory_of_all_the_variants, dos);

				// BigDecimal

				dos.writeObject(this.percentage_of_ooo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("product_id=" + String.valueOf(product_id));
			sb.append(",handle=" + handle);
			sb.append(",sku=" + sku);
			sb.append(",title=" + title);
			sb.append(",inventory_item_id=" + String.valueOf(inventory_item_id));
			sb.append(",option1=" + option1);
			sb.append(",option2=" + option2);
			sb.append(",is_product_active=" + String.valueOf(is_product_active));
			sb.append(",is_variant_active=" + String.valueOf(is_variant_active));
			sb.append(",is_in_stock=" + is_in_stock);
			sb.append(",is_variant_live_on_site="
					+ String.valueOf(is_variant_live_on_site));
			sb.append(",is_variant_in_stock="
					+ String.valueOf(is_variant_in_stock));
			sb.append(",is_variant_out_of_stock="
					+ String.valueOf(is_variant_out_of_stock));
			sb.append(",published_at=" + String.valueOf(published_at));
			sb.append(",live_variant_count="
					+ String.valueOf(live_variant_count));
			sb.append(",in_stock_variant_count="
					+ String.valueOf(in_stock_variant_count));
			sb.append(",variant_out_of_stock="
					+ String.valueOf(variant_out_of_stock));
			sb.append(",inventory_quantity="
					+ String.valueOf(inventory_quantity));
			sb.append(",total_inventory_of_all_the_variants="
					+ String.valueOf(total_inventory_of_all_the_variants));
			sb.append(",percentage_of_ooo=" + String.valueOf(percentage_of_ooo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				outputStruct output = new outputStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("output" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_"
						+ "tDBConnection_2");

				String tableName_tDBOutput_1 = "fact_shopify_inventory_by_variant";
				String schemaForSearch_tDBOutput_1 = null;
				String tableForSearch_tDBOutput_1 = tableName_tDBOutput_1;
				if (dbschema_tDBOutput_1 != null
						&& dbschema_tDBOutput_1.trim().length() > 0) {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ tableName_tDBOutput_1;
				}

				schemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				long date_tDBOutput_1;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				class Util_tDBOutput_1 {

					int correctNumPerInsert(String source, int numPerInsert) {
						if (source == null) {
							return numPerInsert;
						}

						int columnCountEveryRow = 0;

						for (int i = 0; i < source.length(); i++) {
							if ('?' == source.charAt(i)) {
								columnCountEveryRow++;
							}
						}

						if (columnCountEveryRow == 0) {
							return numPerInsert;
						}

						int maxNumForParameterSize = 32767;
						int maxNumPerInsert = maxNumForParameterSize
								/ columnCountEveryRow;

						if (numPerInsert > maxNumPerInsert) {
							return maxNumPerInsert;
						}

						return numPerInsert;
					}

				}

				final Util_tDBOutput_1 util_tDBOutput_1 = new Util_tDBOutput_1();
				int numPerInsert_tDBOutput_1 = 100;
				int count_tDBOutput_1 = 0;

				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				int rowCounttDBOutput_1 = 0;
				class BufferLine_tDBOutput_1 {
					Long product_id;

					public BufferLine_tDBOutput_1 c0(Long product_id) {
						this.product_id = product_id;
						return this;
					}

					String handle;

					public BufferLine_tDBOutput_1 c1(String handle) {
						this.handle = handle;
						return this;
					}

					String sku;

					public BufferLine_tDBOutput_1 c2(String sku) {
						this.sku = sku;
						return this;
					}

					String title;

					public BufferLine_tDBOutput_1 c3(String title) {
						this.title = title;
						return this;
					}

					Long inventory_item_id;

					public BufferLine_tDBOutput_1 c4(Long inventory_item_id) {
						this.inventory_item_id = inventory_item_id;
						return this;
					}

					String variant_color;

					public BufferLine_tDBOutput_1 c5(String variant_color) {
						this.variant_color = variant_color;
						return this;
					}

					String variant_size;

					public BufferLine_tDBOutput_1 c6(String variant_size) {
						this.variant_size = variant_size;
						return this;
					}

					Integer is_product_active;

					public BufferLine_tDBOutput_1 c7(Integer is_product_active) {
						this.is_product_active = is_product_active;
						return this;
					}

					Integer is_variant_active;

					public BufferLine_tDBOutput_1 c8(Integer is_variant_active) {
						this.is_variant_active = is_variant_active;
						return this;
					}

					String is_in_stock;

					public BufferLine_tDBOutput_1 c9(String is_in_stock) {
						this.is_in_stock = is_in_stock;
						return this;
					}

					Integer is_variant_live_on_site;

					public BufferLine_tDBOutput_1 c10(
							Integer is_variant_live_on_site) {
						this.is_variant_live_on_site = is_variant_live_on_site;
						return this;
					}

					Integer is_variant_in_stock;

					public BufferLine_tDBOutput_1 c11(
							Integer is_variant_in_stock) {
						this.is_variant_in_stock = is_variant_in_stock;
						return this;
					}

					Integer is_variant_out_of_stock;

					public BufferLine_tDBOutput_1 c12(
							Integer is_variant_out_of_stock) {
						this.is_variant_out_of_stock = is_variant_out_of_stock;
						return this;
					}

					java.util.Date published_at;

					public BufferLine_tDBOutput_1 c13(
							java.util.Date published_at) {
						this.published_at = published_at;
						return this;
					}

					Integer live_variant_count;

					public BufferLine_tDBOutput_1 c14(Integer live_variant_count) {
						this.live_variant_count = live_variant_count;
						return this;
					}

					Integer in_stock_variant_count;

					public BufferLine_tDBOutput_1 c15(
							Integer in_stock_variant_count) {
						this.in_stock_variant_count = in_stock_variant_count;
						return this;
					}

					Integer out_of_stock_variant_count;

					public BufferLine_tDBOutput_1 c16(
							Integer out_of_stock_variant_count) {
						this.out_of_stock_variant_count = out_of_stock_variant_count;
						return this;
					}

					Integer inventory_quantity;

					public BufferLine_tDBOutput_1 c17(Integer inventory_quantity) {
						this.inventory_quantity = inventory_quantity;
						return this;
					}

					Integer total_inventory_of_all_the_variants;

					public BufferLine_tDBOutput_1 c18(
							Integer total_inventory_of_all_the_variants) {
						this.total_inventory_of_all_the_variants = total_inventory_of_all_the_variants;
						return this;
					}

					BigDecimal percentage_of_ooo;

					public BufferLine_tDBOutput_1 c19(
							BigDecimal percentage_of_ooo) {
						this.percentage_of_ooo = percentage_of_ooo;
						return this;
					}

					java.util.Date edw_created_at;

					public BufferLine_tDBOutput_1 c20(
							java.util.Date edw_created_at) {
						this.edw_created_at = edw_created_at;
						return this;
					}
				}

				java.util.List<BufferLine_tDBOutput_1> exInsertColValueListtDBOutput_1 = new java.util.ArrayList();
				BufferLine_tDBOutput_1 exInsertColValuetDBOutput_1 = null;

				String valueList_tDBOutput_1 = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				numPerInsert_tDBOutput_1 = util_tDBOutput_1
						.correctNumPerInsert(valueList_tDBOutput_1,
								numPerInsert_tDBOutput_1);

				StringBuilder extendInsertValueStmt_tDBOutput_1 = new StringBuilder();
				for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < numPerInsert_tDBOutput_1; i_tDBOutput_1++) {
					extendInsertValueStmt_tDBOutput_1
							.append(valueList_tDBOutput_1);
					if (i_tDBOutput_1 != numPerInsert_tDBOutput_1 - 1)
						extendInsertValueStmt_tDBOutput_1.append(",");
				}

				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"product_id\",\"handle\",\"sku\",\"title\",\"inventory_item_id\",\"variant_color\",\"variant_size\",\"is_product_active\",\"is_variant_active\",\"is_in_stock\",\"is_variant_live_on_site\",\"is_variant_in_stock\",\"is_variant_out_of_stock\",\"published_at\",\"live_variant_count\",\"in_stock_variant_count\",\"out_of_stock_variant_count\",\"inventory_quantity\",\"total_inventory_of_all_the_variants\",\"percentage_of_ooo\",\"edw_created_at\") VALUES "
						+ extendInsertValueStmt_tDBOutput_1.toString();
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outputStruct output_tmp = new outputStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT v.product_id, p.handle, v.sku, v.title, v.inventory_item_id, v.option1, v.option2, p.is_active is_product_active"
						+ ", \nv.is_active is_variant_active, sv.is_in_stock, sv.is_variant_live_on_site, sv.is_variant_in_stock, sv.is_variant_out_"
						+ "of_stock, \np.published_at, sv.live_variant_count, sv.in_stock_variant_count, sv.variant_out_of_stock, v.inventory_quanti"
						+ "ty, \nsv.total_inventory_of_all_the_variants, sv.percentage_of_ooo\nFROM shopify_staging.product_variants v \nleft join sho"
						+ "pify_staging.products p  \non v.product_id = p.product_id\nleft JOIN edw_staging.shopify_inventory_by_variant sv \non v.inv"
						+ "entory_item_id = sv.inventory_item_id\nand v.product_id = sv.product_id\nwhere v.product_id not in (select consolidated_pr"
						+ "oduct_id from shopify_staging.consolidated_product_distributed);";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.product_id = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.product_id = rs_tDBInput_2.getLong(1);
							} else {
								row2.product_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.handle = null;
						} else {

							row2.handle = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.sku = null;
						} else {

							row2.sku = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.title = null;
						} else {

							row2.title = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.inventory_item_id = null;
						} else {

							if (rs_tDBInput_2.getObject(5) != null) {
								row2.inventory_item_id = rs_tDBInput_2
										.getLong(5);
							} else {
								row2.inventory_item_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.option1 = null;
						} else {

							row2.option1 = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.option2 = null;
						} else {

							row2.option2 = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.is_product_active = null;
						} else {

							if (rs_tDBInput_2.getObject(8) != null) {
								row2.is_product_active = rs_tDBInput_2
										.getInt(8);
							} else {
								row2.is_product_active = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.is_variant_active = null;
						} else {

							if (rs_tDBInput_2.getObject(9) != null) {
								row2.is_variant_active = rs_tDBInput_2
										.getInt(9);
							} else {
								row2.is_variant_active = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.is_in_stock = null;
						} else {

							row2.is_in_stock = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.is_variant_live_on_site = null;
						} else {

							if (rs_tDBInput_2.getObject(11) != null) {
								row2.is_variant_live_on_site = rs_tDBInput_2
										.getInt(11);
							} else {
								row2.is_variant_live_on_site = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.is_variant_in_stock = null;
						} else {

							if (rs_tDBInput_2.getObject(12) != null) {
								row2.is_variant_in_stock = rs_tDBInput_2
										.getInt(12);
							} else {
								row2.is_variant_in_stock = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.is_variant_out_of_stock = null;
						} else {

							if (rs_tDBInput_2.getObject(13) != null) {
								row2.is_variant_out_of_stock = rs_tDBInput_2
										.getInt(13);
							} else {
								row2.is_variant_out_of_stock = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.published_at = null;
						} else {

							if (rs_tDBInput_2.getString(14) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2
										.getString(14);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_2)) {
									row2.published_at = rs_tDBInput_2
											.getTimestamp(14);
								} else {
									row2.published_at = (java.util.Date) year0_tDBInput_2
											.clone();
								}
							} else {
								row2.published_at = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.live_variant_count = null;
						} else {

							if (rs_tDBInput_2.getObject(15) != null) {
								row2.live_variant_count = rs_tDBInput_2
										.getInt(15);
							} else {
								row2.live_variant_count = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.in_stock_variant_count = null;
						} else {

							if (rs_tDBInput_2.getObject(16) != null) {
								row2.in_stock_variant_count = rs_tDBInput_2
										.getInt(16);
							} else {
								row2.in_stock_variant_count = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.variant_out_of_stock = null;
						} else {

							if (rs_tDBInput_2.getObject(17) != null) {
								row2.variant_out_of_stock = rs_tDBInput_2
										.getInt(17);
							} else {
								row2.variant_out_of_stock = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.inventory_quantity = null;
						} else {

							if (rs_tDBInput_2.getObject(18) != null) {
								row2.inventory_quantity = rs_tDBInput_2
										.getInt(18);
							} else {
								row2.inventory_quantity = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.total_inventory_of_all_the_variants = null;
						} else {

							if (rs_tDBInput_2.getObject(19) != null) {
								row2.total_inventory_of_all_the_variants = rs_tDBInput_2
										.getInt(19);
							} else {
								row2.total_inventory_of_all_the_variants = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.percentage_of_ooo = null;
						} else {

							if (rs_tDBInput_2.getObject(20) != null) {
								row2.percentage_of_ooo = rs_tDBInput_2
										.getBigDecimal(20);
							} else {
								row2.percentage_of_ooo = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							output = null;

							// # Output table : 'output'
							output_tmp.product_id = row2.product_id;
							output_tmp.handle = row2.handle;
							output_tmp.sku = row2.sku;
							output_tmp.title = row2.title;
							output_tmp.inventory_item_id = row2.inventory_item_id;
							output_tmp.variant_color = row2.option1;
							output_tmp.variant_size = row2.option2;
							output_tmp.is_product_active = row2.is_product_active;
							output_tmp.is_variant_active = row2.is_variant_active;
							output_tmp.is_in_stock = row2.is_in_stock;
							output_tmp.is_variant_live_on_site = row2.is_variant_live_on_site;
							output_tmp.is_variant_in_stock = row2.is_variant_in_stock;
							output_tmp.is_variant_out_of_stock = row2.is_variant_out_of_stock;
							output_tmp.published_at = row2.published_at;
							output_tmp.live_variant_count = row2.live_variant_count;
							output_tmp.in_stock_variant_count = row2.in_stock_variant_count;
							output_tmp.out_of_stock_variant_count = row2.variant_out_of_stock;
							output_tmp.inventory_quantity = row2.inventory_quantity;
							output_tmp.total_inventory_of_all_the_variants = row2.total_inventory_of_all_the_variants;
							output_tmp.percentage_of_ooo = row2.percentage_of_ooo;
							output_tmp.edw_created_at = TalendDate
									.getCurrentDate();
							output = output_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "output"
						if (output != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							// output
							// output

							if (execStat) {
								runStat.updateStatOnConnection("output"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_1 = false;
							int countertDBOutput_1 = rowCounttDBOutput_1 * (21) + 1;

							if (output.product_id == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setLong(countertDBOutput_1,
										output.product_id);

							}

							countertDBOutput_1++;

							if (output.handle == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.handle);

							}

							countertDBOutput_1++;

							if (output.sku == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.sku);

							}

							countertDBOutput_1++;

							if (output.title == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.title);

							}

							countertDBOutput_1++;

							if (output.inventory_item_id == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setLong(countertDBOutput_1,
										output.inventory_item_id);

							}

							countertDBOutput_1++;

							if (output.variant_color == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.variant_color);

							}

							countertDBOutput_1++;

							if (output.variant_size == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.variant_size);

							}

							countertDBOutput_1++;

							if (output.is_product_active == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.is_product_active);

							}

							countertDBOutput_1++;

							if (output.is_variant_active == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.is_variant_active);

							}

							countertDBOutput_1++;

							if (output.is_in_stock == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1,
										output.is_in_stock);

							}

							countertDBOutput_1++;

							if (output.is_variant_live_on_site == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.is_variant_live_on_site);

							}

							countertDBOutput_1++;

							if (output.is_variant_in_stock == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.is_variant_in_stock);

							}

							countertDBOutput_1++;

							if (output.is_variant_out_of_stock == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.is_variant_out_of_stock);

							}

							countertDBOutput_1++;

							if (output.published_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_1 = output.published_at
										.getTime();
								if (date_tDBOutput_1 < year1_tDBOutput_1
										|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
									pstmt_tDBOutput_1.setString(
											countertDBOutput_1,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_1.setTimestamp(
											countertDBOutput_1,
											new java.sql.Timestamp(
													date_tDBOutput_1));
								}
							} else {

								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.DATE);

							}

							countertDBOutput_1++;

							if (output.live_variant_count == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.live_variant_count);

							}

							countertDBOutput_1++;

							if (output.in_stock_variant_count == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.in_stock_variant_count);

							}

							countertDBOutput_1++;

							if (output.out_of_stock_variant_count == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.out_of_stock_variant_count);

							}

							countertDBOutput_1++;

							if (output.inventory_quantity == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1,
										output.inventory_quantity);

							}

							countertDBOutput_1++;

							if (output.total_inventory_of_all_the_variants == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1
										.setInt(countertDBOutput_1,
												output.total_inventory_of_all_the_variants);

							}

							countertDBOutput_1++;

							pstmt_tDBOutput_1.setBigDecimal(countertDBOutput_1,
									output.percentage_of_ooo);

							countertDBOutput_1++;

							if (output.edw_created_at != null) {
								// timestamp < min java date value (year 1) ||
								// timestamp > max mysql value (year 10000) =>
								// set 0000-00-00 as date in MySQL
								date_tDBOutput_1 = output.edw_created_at
										.getTime();
								if (date_tDBOutput_1 < year1_tDBOutput_1
										|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
									pstmt_tDBOutput_1.setString(
											countertDBOutput_1,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_1.setTimestamp(
											countertDBOutput_1,
											new java.sql.Timestamp(
													date_tDBOutput_1));
								}
							} else {

								pstmt_tDBOutput_1.setNull(countertDBOutput_1,
										java.sql.Types.DATE);

							}

							countertDBOutput_1++;

							exInsertColValuetDBOutput_1 = new BufferLine_tDBOutput_1();
							exInsertColValuetDBOutput_1

									.c0(output.product_id)
									.c1(output.handle)
									.c2(output.sku)
									.c3(output.title)
									.c4(output.inventory_item_id)
									.c5(output.variant_color)
									.c6(output.variant_size)
									.c7(output.is_product_active)
									.c8(output.is_variant_active)
									.c9(output.is_in_stock)
									.c10(output.is_variant_live_on_site)
									.c11(output.is_variant_in_stock)
									.c12(output.is_variant_out_of_stock)
									.c13(output.published_at)
									.c14(output.live_variant_count)
									.c15(output.in_stock_variant_count)
									.c16(output.out_of_stock_variant_count)
									.c17(output.inventory_quantity)
									.c18(output.total_inventory_of_all_the_variants)
									.c19(output.percentage_of_ooo)
									.c20(output.edw_created_at);

							exInsertColValueListtDBOutput_1
									.add(exInsertColValuetDBOutput_1);
							rowCounttDBOutput_1++;

							nb_line_tDBOutput_1++;

							if (rowCounttDBOutput_1 == numPerInsert_tDBOutput_1) {
								insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
										+ pstmt_tDBOutput_1.executeUpdate();
								exInsertColValueListtDBOutput_1.clear();
								rowCounttDBOutput_1 = 0;
								countertDBOutput_1 = 1;
							}
							if (!whetherReject_tDBOutput_1) {
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "output"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (rowCounttDBOutput_1 != 0) {

					StringBuilder extendInsertValue_tDBOutput_1 = new StringBuilder();
					for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < rowCounttDBOutput_1; i_tDBOutput_1++) {
						extendInsertValue_tDBOutput_1
								.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
						if (i_tDBOutput_1 != rowCounttDBOutput_1 - 1)
							extendInsertValue_tDBOutput_1.append(",");
					}

					insert_tDBOutput_1 = "INSERT INTO \""
							+ tableName_tDBOutput_1
							+ "\" (\"product_id\",\"handle\",\"sku\",\"title\",\"inventory_item_id\",\"variant_color\",\"variant_size\",\"is_product_active\",\"is_variant_active\",\"is_in_stock\",\"is_variant_live_on_site\",\"is_variant_in_stock\",\"is_variant_out_of_stock\",\"published_at\",\"live_variant_count\",\"in_stock_variant_count\",\"out_of_stock_variant_count\",\"inventory_quantity\",\"total_inventory_of_all_the_variants\",\"percentage_of_ooo\",\"edw_created_at\") VALUES "
							+ extendInsertValue_tDBOutput_1.toString();
					pstmt_tDBOutput_1 = conn_tDBOutput_1
							.prepareStatement(insert_tDBOutput_1);
					rowCounttDBOutput_1 = 0;
					for (BufferLine_tDBOutput_1 bufferLtDBOutput_1 : exInsertColValueListtDBOutput_1) {
						int counttDBOutput_1 = rowCounttDBOutput_1 * (21) + 1;
						if (bufferLtDBOutput_1.product_id == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setLong(counttDBOutput_1,
									bufferLtDBOutput_1.product_id);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.handle == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.handle);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.sku == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.sku);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.title == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.title);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.inventory_item_id == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setLong(counttDBOutput_1,
									bufferLtDBOutput_1.inventory_item_id);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.variant_color == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.variant_color);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.variant_size == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.variant_size);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_product_active == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.is_product_active);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_variant_active == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.is_variant_active);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_in_stock == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1,
									bufferLtDBOutput_1.is_in_stock);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_variant_live_on_site == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.is_variant_live_on_site);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_variant_in_stock == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.is_variant_in_stock);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.is_variant_out_of_stock == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.is_variant_out_of_stock);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.published_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_1 = bufferLtDBOutput_1.published_at
									.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1
									|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(counttDBOutput_1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1
										.setTimestamp(counttDBOutput_1,
												new java.sql.Timestamp(
														date_tDBOutput_1));
							}
						} else {

							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.DATE);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.live_variant_count == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.live_variant_count);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.in_stock_variant_count == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.in_stock_variant_count);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.out_of_stock_variant_count == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1
									.setInt(counttDBOutput_1,
											bufferLtDBOutput_1.out_of_stock_variant_count);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.inventory_quantity == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1,
									bufferLtDBOutput_1.inventory_quantity);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.total_inventory_of_all_the_variants == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1
									.setInt(counttDBOutput_1,
											bufferLtDBOutput_1.total_inventory_of_all_the_variants);

						}

						counttDBOutput_1++;

						pstmt_tDBOutput_1.setBigDecimal(counttDBOutput_1,
								bufferLtDBOutput_1.percentage_of_ooo);

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.edw_created_at != null) {
							// timestamp < min java date value (year 1) ||
							// timestamp > max mysql value (year 10000) => set
							// 0000-00-00 as date in MySQL
							date_tDBOutput_1 = bufferLtDBOutput_1.edw_created_at
									.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1
									|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(counttDBOutput_1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1
										.setTimestamp(counttDBOutput_1,
												new java.sql.Timestamp(
														date_tDBOutput_1));
							}
						} else {

							pstmt_tDBOutput_1.setNull(counttDBOutput_1,
									java.sql.Types.DATE);

						}

						counttDBOutput_1++;

						rowCounttDBOutput_1++;
					}
					insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
							+ pstmt_tDBOutput_1.executeUpdate();
				}

				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("output" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBRow_2Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_2 begin ] start
				 */

				ok_Hash.put("tDBRow_2", false);
				start_Hash.put("tDBRow_2", System.currentTimeMillis());

				currentComponent = "tDBRow_2";

				int tos_count_tDBRow_2 = 0;

				java.sql.Connection conn_tDBRow_2 = null;
				String query_tDBRow_2 = "";
				boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
				java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2
						.createStatement();
				resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

				/**
				 * [tDBRow_2 begin ] stop
				 */

				/**
				 * [tDBRow_2 main ] start
				 */

				currentComponent = "tDBRow_2";

				query_tDBRow_2 = "update edw_process_logs_shopify_inventory\nset job_status = 'COMPLETED',\njob_end = CURRENT_TIMESTAMP\nwhere job_name = 's"
						+ "hopify_inventory_by_variant'\nand job_status = 'RUNNING';";
				whetherReject_tDBRow_2 = false;
				globalMap.put("tDBRow_2_QUERY", query_tDBRow_2);
				try {
					stmt_tDBRow_2.execute(query_tDBRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_2 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tDBRow_2++;

				/**
				 * [tDBRow_2 main ] stop
				 */

				/**
				 * [tDBRow_2 process_data_begin ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_2 process_data_end ] start
				 */

				currentComponent = "tDBRow_2";

				/**
				 * [tDBRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBRow_2 end ] start
				 */

				currentComponent = "tDBRow_2";

				stmt_tDBRow_2.close();
				resourceMap.remove("stmt_tDBRow_2");
				resourceMap.put("statementClosed_tDBRow_2", true);
				resourceMap.put("finish_tDBRow_2", true);

				ok_Hash.put("tDBRow_2", true);
				end_Hash.put("tDBRow_2", System.currentTimeMillis());

				/**
				 * [tDBRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_2 finally ] start
				 */

				currentComponent = "tDBRow_2";

				if (resourceMap.get("statementClosed_tDBRow_2") == null) {
					java.sql.Statement stmtToClose_tDBRow_2 = null;
					if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_2")) != null) {
						stmtToClose_tDBRow_2.close();
					}
				}

				/**
				 * [tDBRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];
		static byte[] commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length) {
					if (length < 1024
							&& commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant.length == 0) {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[1024];
					} else {
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length);
				strReturn = new String(
						commonByteArray_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_EDW_ETL_ADITYA_job_process_for_shopify_inventory_by_variant) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row4.type = lcm.getType();
						row4.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row4.priority = lcm.getPriority();
						row4.message = lcm.getMessage();
						row4.code = lcm.getCode();

						row4.moment = java.util.Calendar.getInstance()
								.getTime();

						row4.pid = pid;
						row4.root_pid = rootPid;
						row4.father_pid = fatherPid;

						row4.project = projectName;
						row4.job = jobName;
						row4.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema

						globalMap.put("pid", row4.pid);

						globalMap.put("message", row4.message);

						globalMap.put("code", row4.code);

						System.out.println("pid:" + globalMap.get("pid"));

						System.out.println("message:"
								+ globalMap.get("message"));

						System.out.println("code:" + globalMap.get("code"));

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(
							String.format(
									"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_3 begin ] start
				 */

				ok_Hash.put("tDBRow_3", false);
				start_Hash.put("tDBRow_3", System.currentTimeMillis());

				currentComponent = "tDBRow_3";

				int tos_count_tDBRow_3 = 0;

				java.sql.Connection conn_tDBRow_3 = null;
				String query_tDBRow_3 = "";
				boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");

				resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
				java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3
						.createStatement();
				resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

				/**
				 * [tDBRow_3 begin ] stop
				 */

				/**
				 * [tDBRow_3 main ] start
				 */

				currentComponent = "tDBRow_3";

				query_tDBRow_3 = "update edw_process_logs_shopify_inventory\nset job_status = 'FAILED', job_end = CURRENT_TIMESTAMP\nwhere job_name = 'shop"
						+ "ify_inventory_by_variant'\nand job_status = 'RUNNING';";
				whetherReject_tDBRow_3 = false;
				globalMap.put("tDBRow_3_QUERY", query_tDBRow_3);
				try {
					stmt_tDBRow_3.execute(query_tDBRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_3 = true;

					System.err.print(e.getMessage());

				}

				tos_count_tDBRow_3++;

				/**
				 * [tDBRow_3 main ] stop
				 */

				/**
				 * [tDBRow_3 process_data_begin ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_3 process_data_end ] start
				 */

				currentComponent = "tDBRow_3";

				/**
				 * [tDBRow_3 process_data_end ] stop
				 */

				/**
				 * [tDBRow_3 end ] start
				 */

				currentComponent = "tDBRow_3";

				stmt_tDBRow_3.close();
				resourceMap.remove("stmt_tDBRow_3");
				resourceMap.put("statementClosed_tDBRow_3", true);
				resourceMap.put("finish_tDBRow_3", true);

				ok_Hash.put("tDBRow_3", true);
				end_Hash.put("tDBRow_3", System.currentTimeMillis());

				/**
				 * [tDBRow_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_3 finally ] start
				 */

				currentComponent = "tDBRow_3";

				if (resourceMap.get("statementClosed_tDBRow_3") == null) {
					java.sql.Statement stmtToClose_tDBRow_3 = null;
					if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap
							.remove("stmt_tDBRow_3")) != null) {
						stmtToClose_tDBRow_3.close();
					}
				}

				/**
				 * [tDBRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBClose_2Process(globalMap);

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_2 begin ] start
				 */

				ok_Hash.put("tDBClose_2", false);
				start_Hash.put("tDBClose_2", System.currentTimeMillis());

				currentComponent = "tDBClose_2";

				int tos_count_tDBClose_2 = 0;

				/**
				 * [tDBClose_2 begin ] stop
				 */

				/**
				 * [tDBClose_2 main ] start
				 */

				currentComponent = "tDBClose_2";

				java.sql.Connection conn_tDBClose_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_2");
				if (conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed()) {
					conn_tDBClose_2.close();
				}

				if (null != java.sql.DriverManager.getLogWriter()) {
					java.sql.DriverManager.getLogWriter().close();
				}

				java.io.PrintWriter logWriter_tDBClose_2 = (java.io.PrintWriter) globalMap
						.get("logWriter_tDBConnection_2");
				if (logWriter_tDBClose_2 != null) {
					logWriter_tDBClose_2.close();
				}

				tos_count_tDBClose_2++;

				/**
				 * [tDBClose_2 main ] stop
				 */

				/**
				 * [tDBClose_2 process_data_begin ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_2 process_data_end ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_end ] stop
				 */

				/**
				 * [tDBClose_2 end ] start
				 */

				currentComponent = "tDBClose_2";

				ok_Hash.put("tDBClose_2", true);
				end_Hash.put("tDBClose_2", System.currentTimeMillis());

				/**
				 * [tDBClose_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_2 finally ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://"
						+ context.SH_RR_Host + ":" + context.SH_Port + "/"
						+ context.SH_Database + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = context.SH_Username;

				final String decryptedPassword_tDBConnection_1 = context.SH_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", context.SH_Database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				StringBuilder sbuilder_tDBConnection_2 = new StringBuilder();
				sbuilder_tDBConnection_2.append("jdbc:redshift:");
				sbuilder_tDBConnection_2.append("//").append(context.EDW_Host)
						.append(":").append(context.EDW_Port).append("/")
						.append(context.EDW_Database).append("?loglevel=")
						.append(0);
				String url_tDBConnection_2 = sbuilder_tDBConnection_2
						.toString();
				String dbUser_tDBConnection_2 = context.EDW_Username;

				final String decryptedPassword_tDBConnection_2 = context.EDW_Password;
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(
						url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}
				globalMap.put("schema_" + "tDBConnection_2", "public");

				globalMap
						.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final job_process_for_shopify_inventory_by_variant job_process_for_shopify_inventory_by_variantClass = new job_process_for_shopify_inventory_by_variant();

		int exitCode = job_process_for_shopify_inventory_by_variantClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = job_process_for_shopify_inventory_by_variant.class
					.getClassLoader().getResourceAsStream(
							"edw_etl_aditya/job_process_for_shopify_inventory_by_variant_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = job_process_for_shopify_inventory_by_variant.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("accesskey", "id_String");

			context.accesskey = (String) context.getProperty("accesskey");
			context.setContextType("accesskeyswap", "id_String");

			context.accesskeyswap = (String) context
					.getProperty("accesskeyswap");
			context.setContextType("EDW_Database", "id_String");

			context.EDW_Database = (String) context.getProperty("EDW_Database");
			context.setContextType("EDW_Host", "id_String");

			context.EDW_Host = (String) context.getProperty("EDW_Host");
			context.setContextType("EDW_Password", "id_String");

			context.EDW_Password = (String) context.getProperty("EDW_Password");
			context.setContextType("EDW_Port", "id_String");

			context.EDW_Port = (String) context.getProperty("EDW_Port");
			context.setContextType("EDW_Schema", "id_String");

			context.EDW_Schema = (String) context.getProperty("EDW_Schema");
			context.setContextType("EDW_Username", "id_String");

			context.EDW_Username = (String) context.getProperty("EDW_Username");
			context.setContextType("secretkey", "id_Password");

			String pwd_secretkey_value = context.getProperty("secretkey");
			context.secretkey = null;
			if (pwd_secretkey_value != null) {
				if (context_param.containsKey("secretkey")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.secretkey = pwd_secretkey_value;
				} else if (!pwd_secretkey_value.isEmpty()) {
					try {
						context.secretkey = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_secretkey_value);
						context.put("secretkey", context.secretkey);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("secretkeyswap", "id_Password");

			String pwd_secretkeyswap_value = context
					.getProperty("secretkeyswap");
			context.secretkeyswap = null;
			if (pwd_secretkeyswap_value != null) {
				if (context_param.containsKey("secretkeyswap")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.secretkeyswap = pwd_secretkeyswap_value;
				} else if (!pwd_secretkeyswap_value.isEmpty()) {
					try {
						context.secretkeyswap = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_secretkeyswap_value);
						context.put("secretkeyswap", context.secretkeyswap);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.setContextType("SendMailFrom", "id_String");

			context.SendMailFrom = (String) context.getProperty("SendMailFrom");
			context.setContextType("SendMailPassword", "id_String");

			context.SendMailPassword = (String) context
					.getProperty("SendMailPassword");
			context.setContextType("SendMailTo", "id_String");

			context.SendMailTo = (String) context.getProperty("SendMailTo");
			context.setContextType("SendMailUsername", "id_String");

			context.SendMailUsername = (String) context
					.getProperty("SendMailUsername");
			context.setContextType("SH_Database", "id_String");

			context.SH_Database = (String) context.getProperty("SH_Database");
			context.setContextType("SH_Password", "id_String");

			context.SH_Password = (String) context.getProperty("SH_Password");
			context.setContextType("SH_Port", "id_String");

			context.SH_Port = (String) context.getProperty("SH_Port");
			context.setContextType("SH_RR_Host", "id_String");

			context.SH_RR_Host = (String) context.getProperty("SH_RR_Host");
			context.setContextType("SH_Username", "id_String");

			context.SH_Username = (String) context.getProperty("SH_Username");
			context.setContextType("SMTP_Host", "id_String");

			context.SMTP_Host = (String) context.getProperty("SMTP_Host");
			context.setContextType("SMTP_Port", "id_String");

			context.SMTP_Port = (String) context.getProperty("SMTP_Port");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("accesskey")) {
				context.accesskey = (String) parentContextMap.get("accesskey");
			}
			if (parentContextMap.containsKey("accesskeyswap")) {
				context.accesskeyswap = (String) parentContextMap
						.get("accesskeyswap");
			}
			if (parentContextMap.containsKey("EDW_Database")) {
				context.EDW_Database = (String) parentContextMap
						.get("EDW_Database");
			}
			if (parentContextMap.containsKey("EDW_Host")) {
				context.EDW_Host = (String) parentContextMap.get("EDW_Host");
			}
			if (parentContextMap.containsKey("EDW_Password")) {
				context.EDW_Password = (String) parentContextMap
						.get("EDW_Password");
			}
			if (parentContextMap.containsKey("EDW_Port")) {
				context.EDW_Port = (String) parentContextMap.get("EDW_Port");
			}
			if (parentContextMap.containsKey("EDW_Schema")) {
				context.EDW_Schema = (String) parentContextMap
						.get("EDW_Schema");
			}
			if (parentContextMap.containsKey("EDW_Username")) {
				context.EDW_Username = (String) parentContextMap
						.get("EDW_Username");
			}
			if (parentContextMap.containsKey("secretkey")) {
				context.secretkey = (java.lang.String) parentContextMap
						.get("secretkey");
			}
			if (parentContextMap.containsKey("secretkeyswap")) {
				context.secretkeyswap = (java.lang.String) parentContextMap
						.get("secretkeyswap");
			}
			if (parentContextMap.containsKey("SendMailFrom")) {
				context.SendMailFrom = (String) parentContextMap
						.get("SendMailFrom");
			}
			if (parentContextMap.containsKey("SendMailPassword")) {
				context.SendMailPassword = (String) parentContextMap
						.get("SendMailPassword");
			}
			if (parentContextMap.containsKey("SendMailTo")) {
				context.SendMailTo = (String) parentContextMap
						.get("SendMailTo");
			}
			if (parentContextMap.containsKey("SendMailUsername")) {
				context.SendMailUsername = (String) parentContextMap
						.get("SendMailUsername");
			}
			if (parentContextMap.containsKey("SH_Database")) {
				context.SH_Database = (String) parentContextMap
						.get("SH_Database");
			}
			if (parentContextMap.containsKey("SH_Password")) {
				context.SH_Password = (String) parentContextMap
						.get("SH_Password");
			}
			if (parentContextMap.containsKey("SH_Port")) {
				context.SH_Port = (String) parentContextMap.get("SH_Port");
			}
			if (parentContextMap.containsKey("SH_RR_Host")) {
				context.SH_RR_Host = (String) parentContextMap
						.get("SH_RR_Host");
			}
			if (parentContextMap.containsKey("SH_Username")) {
				context.SH_Username = (String) parentContextMap
						.get("SH_Username");
			}
			if (parentContextMap.containsKey("SMTP_Host")) {
				context.SMTP_Host = (String) parentContextMap.get("SMTP_Host");
			}
			if (parentContextMap.containsKey("SMTP_Port")) {
				context.SMTP_Port = (String) parentContextMap.get("SMTP_Port");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("secretkey");
		parametersToEncrypt.add("secretkeyswap");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : job_process_for_shopify_inventory_by_variant");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2",
				globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 160367 characters generated by Talend Open Studio for Data Integration on the
 * 27 February, 2020 5:41:59 PM IST
 ************************************************************************************************/
